// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::api::*;
use crate::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.3.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -2130978743;

// Section: executor

pub use crate::api::api::FLUTTER_RUST_BRIDGE_HANDLER;

// Section: wire_funcs

fn wire__crate__api__api__add_album_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_album",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_guid = <String>::sse_decode(&mut deserializer);
            let api_folder = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::add_album(&*api_state_guard, api_guid, api_folder)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__answer_ft_request_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "answer_ft_request",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_request = <crate::api::api::LetMeInRequest>::sse_decode(&mut deserializer);
            let api_approved_group = <Option<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::answer_ft_request(
                            &*api_state_guard,
                            api_request,
                            api_approved_group,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__attachment_get_size_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "attachment_get_size",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::api::Attachment>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::api::Attachment::get_size(&api_that))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__auth_phone_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "auth_phone",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_number = <String>::sse_decode(&mut deserializer);
            let api_sig = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::auth_phone(&*api_state_guard, api_number, api_sig)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__can_find_my_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "can_find_my",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::can_find_my(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__cancel_facetime_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "cancel_facetime",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_guid = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::cancel_facetime(&*api_state_guard, api_guid).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__complete_msg_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "complete_msg",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::api::complete_msg(api_ptr).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__config_from_encoded_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "config_from_encoded",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_encoded = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::config_from_encoded(api_encoded)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__config_from_relay_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "config_from_relay",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_code = <String>::sse_decode(&mut deserializer);
            let api_host = <String>::sse_decode(&mut deserializer);
            let api_token = <Option<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::api::config_from_relay(api_code, api_host, &api_token)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__config_from_validation_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "config_from_validation_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_extra = <crate::api::api::HwExtra>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::api::api::config_from_validation_data(api_data, api_extra)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__configure_app_review_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "configure_app_review",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::configure_app_review(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__configure_macos_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "configure_macos",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_config = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<JoinedOSConfig>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let mut api_config_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_state, 0, false,
                                    ),
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_config,
                                        1,
                                        false,
                                    ),
                                ],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                1 => {
                                    api_config_guard =
                                        Some(api_config.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let api_config_guard = api_config_guard.unwrap();
                        let output_ok =
                            crate::api::api::configure_macos(&*api_state_guard, &*api_config_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__convert_token_to_uuid_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "convert_token_to_uuid",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_handle = <String>::sse_decode(&mut deserializer);
            let api_token = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::convert_token_to_uuid(
                            &*api_state_guard,
                            api_handle,
                            api_token,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__create_facetime_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_facetime",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_uuid = <String>::sse_decode(&mut deserializer);
            let api_handle = <String>::sse_decode(&mut deserializer);
            let api_participants = <Vec<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::create_facetime(
                            &*api_state_guard,
                            api_uuid,
                            api_handle,
                            api_participants,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__create_icon_array_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_icon_array",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_img = <crate::api::api::LPIconMetadata>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::api::create_icon_array(api_img))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__create_image_array_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_image_array",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_img = <crate::api::api::LPImageMetadata>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::api::create_image_array(api_img))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__decline_facetime_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "decline_facetime",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_guid = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::decline_facetime(&*api_state_guard, api_guid).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__do_reregister_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "do_reregister",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::do_reregister(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__download_attachment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "download_attachment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::api::TransferProgress,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_attachment = <crate::api::api::Attachment>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::api::download_attachment(
                                api_sink,
                                &*api_state_guard,
                                api_attachment,
                                api_path,
                            )
                            .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__download_mmcs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "download_mmcs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::api::TransferProgress,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_attachment = <crate::api::api::MMCSFile>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::api::download_mmcs(
                                api_sink,
                                &*api_state_guard,
                                api_attachment,
                                api_path,
                            )
                            .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__ffi_file_packager_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_file_packager_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::api::FFIFilePackager::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__ft_sessions_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ft_sessions",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::ft_sessions(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_2fa_sms_opts_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_2fa_sms_opts",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::get_2fa_sms_opts(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_albums_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_albums",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_refresh = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::get_albums(&*api_state_guard, api_refresh).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_anisette_headers_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_anisette_headers",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::get_anisette_headers(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_background_following_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_background_following",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::api::get_background_following(&*api_state_guard).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_config_state_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_config_state",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::api::get_config_state(&*api_state_guard).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_device_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_device_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<JoinedOSConfig>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let mut api_config_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_config,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => api_config_guard = Some(api_config.lockable_decode_sync_ref()),
                                _ => unreachable!(),
                            }
                        }
                        let api_config_guard = api_config_guard.unwrap();
                        let output_ok = crate::api::api::get_device_info(&*api_config_guard)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__get_device_info_state_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_device_info_state",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::get_device_info_state(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_devices_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_devices",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_client = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    FindMyPhoneClient<DefaultAnisetteProvider>,
                >,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_client_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_client,
                                    0,
                                    true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_client_guard =
                                        Some(api_client.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_client_guard = api_client_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::api::get_devices(&mut *api_client_guard).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_following_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_following",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_client = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    FindMyFriendsClient<DefaultAnisetteProvider>,
                >,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_client_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_client,
                                    0,
                                    true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_client_guard =
                                        Some(api_client.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_client_guard = api_client_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::api::get_following(&mut *api_client_guard).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_ft_link_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_ft_link",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_usage = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::get_ft_link(&*api_state_guard, api_usage).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_handles_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_handles",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::get_handles(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_phase_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_phase",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::api::get_phase(&*api_state_guard).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_regstate_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_regstate",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::get_regstate(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_sms_targets_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sms_targets",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_handle = <String>::sse_decode(&mut deserializer);
            let api_refresh = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::get_sms_targets(
                            &*api_state_guard,
                            api_handle,
                            api_refresh,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_syncstatus_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_syncstatus",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::get_syncstatus(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_token_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_token",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::api::get_token(&*api_state_guard).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__get_user_name_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_user_name",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::get_user_name(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__invalidate_id_cache_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "invalidate_id_cache",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::invalidate_id_cache(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__make_find_my_friends_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "make_find_my_friends",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::make_find_my_friends(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__make_find_my_phone_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "make_find_my_phone",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::make_find_my_phone(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__message_parts_raw_text_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "message_parts_raw_text",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::api::MessageParts>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::api::MessageParts::raw_text(&api_that))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__my_async_runtime_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "my_async_runtime_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::api::MyAsyncRuntime::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__new_msg_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "new_msg",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_conversation =
                <crate::api::api::ConversationData>::sse_decode(&mut deserializer);
            let api_sender = <String>::sse_decode(&mut deserializer);
            let api_message = <crate::api::api::Message>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::api::new_msg(
                                &*api_state_guard,
                                api_conversation,
                                api_sender,
                                api_message,
                            )
                            .await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__new_push_state_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "new_push_state",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_dir = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok =
                            Result::<_, ()>::Ok(crate::api::api::new_push_state(api_dir).await)?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__ptr_to_dart_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ptr_to_dart",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok =
                            Result::<_, ()>::Ok(crate::api::api::ptr_to_dart(api_ptr).await)?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__recv_wait_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "recv_wait",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::api::recv_wait(&*api_state_guard).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__refresh_background_following_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "refresh_background_following",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::refresh_background_following(&*api_state_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__refresh_devices_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "refresh_devices",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_client = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    FindMyPhoneClient<DefaultAnisetteProvider>,
                >,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let mut api_client_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_state, 0, false,
                                    ),
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_client,
                                        1,
                                        true,
                                    ),
                                ],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                1 => {
                                    api_client_guard =
                                        Some(api_client.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let mut api_client_guard = api_client_guard.unwrap();
                        let output_ok = crate::api::api::refresh_devices(
                            &*api_state_guard,
                            &mut *api_client_guard,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__refresh_following_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "refresh_following",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_client = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    FindMyFriendsClient<DefaultAnisetteProvider>,
                >,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let mut api_client_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_state, 0, false,
                                    ),
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_client,
                                        1,
                                        true,
                                    ),
                                ],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                1 => {
                                    api_client_guard =
                                        Some(api_client.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let mut api_client_guard = api_client_guard.unwrap();
                        let output_ok = crate::api::api::refresh_following(
                            &*api_state_guard,
                            &mut *api_client_guard,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__refresh_token_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "refresh_token",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::refresh_token(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__register_ids_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "register_ids",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_users = <Vec<IDSUser>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::register_ids(&*api_state_guard, &api_users).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__remove_album_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "remove_album",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_guid = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::remove_album(&*api_state_guard, api_guid).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__reset_state_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "reset_state",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_reset_hw = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::reset_state(&*api_state_guard, api_reset_hw).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__restore_attachment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "restore_attachment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::api::restore_attachment(api_data))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__restore_user_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "restore_user",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_user = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::restore_user(api_user)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__retry_login_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "retry_login",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::retry_login(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__save_attachment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "save_attachment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_att = <crate::api::api::Attachment>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::api::save_attachment(&api_att))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__save_user_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "save_user",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_user = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IDSUser>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let mut api_user_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_user, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => api_user_guard = Some(api_user.lockable_decode_sync_ref()),
                                _ => unreachable!(),
                            }
                        }
                        let api_user_guard = api_user_guard.unwrap();
                        let output_ok = crate::api::api::save_user(&*api_user_guard)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__select_background_friend_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "select_background_friend",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_friend = <Option<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::select_background_friend(
                            &*api_state_guard,
                            api_friend,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__select_friend_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "select_friend",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_client = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    FindMyFriendsClient<DefaultAnisetteProvider>,
                >,
            >>::sse_decode(&mut deserializer);
            let api_friend = <Option<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let mut api_client_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_state, 0, false,
                                    ),
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_client,
                                        1,
                                        true,
                                    ),
                                ],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                1 => {
                                    api_client_guard =
                                        Some(api_client.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let mut api_client_guard = api_client_guard.unwrap();
                        let output_ok = crate::api::api::select_friend(
                            &*api_state_guard,
                            &mut *api_client_guard,
                            api_friend,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__send_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_msg = <crate::api::api::MessageInst>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::send(&*api_state_guard, api_msg).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__send_2fa_sms_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_2fa_sms",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_phone_id = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::send_2fa_sms(&*api_state_guard, api_phone_id).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__send_2fa_to_devices_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_2fa_to_devices",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::send_2fa_to_devices(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__service_from_ptr_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "service_from_ptr",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::api::service_from_ptr(api_ptr))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__subscribe_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "subscribe",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_guid = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::subscribe(&*api_state_guard, api_guid).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__subscribe_token_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "subscribe_token",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_token = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::subscribe_token(&*api_state_guard, api_token).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__supports_shared_streams_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "supports_shared_streams",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::supports_shared_streams(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__sync_now_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_now",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::sync_now(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__try_auth_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "try_auth",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_username = <String>::sse_decode(&mut deserializer);
            let api_password = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::try_auth(
                            &*api_state_guard,
                            api_username,
                            api_password,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__unsubscribe_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unsubscribe",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_guid = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::unsubscribe(&*api_state_guard, api_guid).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__update_account_headers_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "update_account_headers",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::update_account_headers(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__upload_attachment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "upload_attachment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::api::TransferProgress,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_mime = <String>::sse_decode(&mut deserializer);
            let api_uti = <String>::sse_decode(&mut deserializer);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::api::upload_attachment(
                                api_sink,
                                &*api_state_guard,
                                api_path,
                                api_mime,
                                api_uti,
                                api_name,
                            )
                            .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__upload_mmcs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "upload_mmcs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::api::MMCSTransferProgress,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::api::upload_mmcs(api_sink, &*api_state_guard, api_path)
                                .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__use_link_for_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_link_for",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_old_usage = <String>::sse_decode(&mut deserializer);
            let api_usage = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::use_link_for(
                            &*api_state_guard,
                            api_old_usage,
                            api_usage,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__validate_cert_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "validate_cert",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_user = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IDSUser>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let mut api_user_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_state, 0, false,
                                    ),
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_user, 1, false,
                                    ),
                                ],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                1 => {
                                    api_user_guard =
                                        Some(api_user.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let api_user_guard = api_user_guard.unwrap();
                        let output_ok =
                            crate::api::api::validate_cert(&*api_state_guard, &*api_user_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__validate_relay_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "validate_relay",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::validate_relay(&*api_state_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__validate_targets_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "validate_targets",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_targets = <Vec<String>>::sse_decode(&mut deserializer);
            let api_sender = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::validate_targets(
                            &*api_state_guard,
                            api_targets,
                            api_sender,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__validate_targets_facetime_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "validate_targets_facetime",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_targets = <Vec<String>>::sse_decode(&mut deserializer);
            let api_sender = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok = crate::api::api::validate_targets_facetime(
                            &*api_state_guard,
                            api_targets,
                            api_sender,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__verify_2fa_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "verify_2fa",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_code = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_state, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let output_ok =
                            crate::api::api::verify_2fa(&*api_state_guard, api_code).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__api__verify_2fa_sms_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "verify_2fa_sms",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
            >>::sse_decode(&mut deserializer);
            let api_body = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>,
            >>::sse_decode(&mut deserializer);
            let api_code = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_state_guard = None;
                        let mut api_body_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_state, 0, false,
                                    ),
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_body, 1, false,
                                    ),
                                ],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_state_guard =
                                        Some(api_state.lockable_decode_async_ref().await)
                                }
                                1 => {
                                    api_body_guard =
                                        Some(api_body.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_state_guard = api_state_guard.unwrap();
                        let api_body_guard = api_body_guard.unwrap();
                        let output_ok = crate::api::api::verify_2fa_sms(
                            &*api_state_guard,
                            &*api_body_guard,
                            api_code,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    {
        let Address = None::<crate::api::api::Address>.unwrap();
        let _: Option<String> = Address.administrative_area;
        let _: String = Address.country;
        let _: String = Address.country_code;
        let _: Option<Vec<String>> = Address.formatted_address_lines;
        let _: Option<String> = Address.locality;
        let _: Option<String> = Address.state_code;
        let _: Option<String> = Address.street_address;
        let _: Option<String> = Address.street_name;
    }
    {
        let Attachment = None::<crate::api::api::Attachment>.unwrap();
        let _: crate::api::api::AttachmentType = Attachment.a_type;
        let _: u64 = Attachment.part;
        let _: String = Attachment.uti_type;
        let _: String = Attachment.mime;
        let _: String = Attachment.name;
        let _: bool = Attachment.iris;
    }
    match None::<crate::api::api::AttachmentType>.unwrap() {
        crate::api::api::AttachmentType::Inline(field0) => {
            let _: Vec<u8> = field0;
        }
        crate::api::api::AttachmentType::MMCS(field0) => {
            let _: crate::api::api::MMCSFile = field0;
        }
    }
    {
        let Balloon = None::<crate::api::api::Balloon>.unwrap();
        let _: String = Balloon.url;
        let _: Option<String> = Balloon.session;
        let _: crate::api::api::BalloonLayout = Balloon.layout;
        let _: Option<String> = Balloon.ld_text;
        let _: bool = Balloon.is_live;
        let _: Vec<u8> = Balloon.icon;
    }
    match None::<crate::api::api::BalloonLayout>.unwrap() {
        crate::api::api::BalloonLayout::TemplateLayout {
            image_subtitle,
            image_title,
            caption,
            secondary_subcaption,
            tertiary_subcaption,
            subcaption,
            class,
        } => {
            let _: String = image_subtitle;
            let _: String = image_title;
            let _: String = caption;
            let _: String = secondary_subcaption;
            let _: String = tertiary_subcaption;
            let _: String = subcaption;
            let _: crate::api::api::NSDictionaryClass = class;
        }
    }
    {
        let ChangeParticipantMessage = None::<crate::api::api::ChangeParticipantMessage>.unwrap();
        let _: Vec<String> = ChangeParticipantMessage.new_participants;
        let _: u64 = ChangeParticipantMessage.group_version;
    }
    {
        let ConversationData = None::<crate::api::api::ConversationData>.unwrap();
        let _: Vec<String> = ConversationData.participants;
        let _: Option<String> = ConversationData.cv_name;
        let _: Option<String> = ConversationData.sender_guid;
        let _: Option<String> = ConversationData.after_guid;
    }
    match None::<crate::api::api::DeleteTarget>.unwrap() {
        crate::api::api::DeleteTarget::Chat(field0) => {
            let _: crate::api::api::OperatedChat = field0;
        }
        crate::api::api::DeleteTarget::Messages(field0) => {
            let _: Vec<String> = field0;
        }
    }
    {
        let EditMessage = None::<crate::api::api::EditMessage>.unwrap();
        let _: String = EditMessage.tuuid;
        let _: u64 = EditMessage.edit_part;
        let _: crate::api::api::MessageParts = EditMessage.new_parts;
    }
    {
        let ErrorMessage = None::<crate::api::api::ErrorMessage>.unwrap();
        let _: String = ErrorMessage.for_uuid;
        let _: u64 = ErrorMessage.status;
        let _: String = ErrorMessage.status_str;
    }
    {
        let ExtensionApp = None::<crate::api::api::ExtensionApp>.unwrap();
        let _: String = ExtensionApp.name;
        let _: Option<u64> = ExtensionApp.app_id;
        let _: String = ExtensionApp.bundle_id;
        let _: Option<crate::api::api::Balloon> = ExtensionApp.balloon;
    }
    {
        let Follow = None::<crate::api::api::Follow>.unwrap();
        let _: i64 = Follow.create_timestamp;
        let _: i64 = Follow.expires;
        let _: String = Follow.id;
        let _: Vec<String> = Follow.invitation_accepted_handles;
        let _: Vec<String> = Follow.invitation_from_handles;
        let _: bool = Follow.is_from_messages;
        let _: Option<String> = Follow.offer_id;
        let _: bool = Follow.only_in_event;
        let _: String = Follow.person_id_hash;
        let _: bool = Follow.secure_locations_capable;
        let _: bool = Follow.shallow_or_live_secure_locations_capable;
        let _: String = Follow.source;
        let _: bool = Follow.tk_permission;
        let _: i64 = Follow.update_timestamp;
        let _: Option<bool> = Follow.fallback_to_legacy_allowed;
        let _: Option<bool> = Follow.opted_not_to_share;
        let _: Option<crate::api::api::Location> = Follow.last_location;
        let _: bool = Follow.locate_in_progress;
    }
    {
        let FoundDevice = None::<crate::api::api::FoundDevice>.unwrap();
        let _: Option<String> = FoundDevice.device_model;
        let _: Option<bool> = FoundDevice.low_power_mode;
        let _: Option<i64> = FoundDevice.passcode_length;
        let _: Option<String> = FoundDevice.id;
        let _: Option<String> = FoundDevice.battery_status;
        let _: Option<bool> = FoundDevice.lost_mode_capable;
        let _: Option<f64> = FoundDevice.battery_level;
        let _: Option<bool> = FoundDevice.location_enabled;
        let _: Option<bool> = FoundDevice.is_considered_accessory;
        let _: Option<crate::api::api::Location> = FoundDevice.location;
        let _: Option<String> = FoundDevice.model_display_name;
        let _: Option<String> = FoundDevice.device_color;
        let _: Option<bool> = FoundDevice.activation_locked;
        let _: Option<i64> = FoundDevice.rm2_state;
        let _: Option<bool> = FoundDevice.loc_found_enabled;
        let _: Option<bool> = FoundDevice.nwd;
        let _: Option<String> = FoundDevice.device_status;
        let _: Option<bool> = FoundDevice.fmly_share;
        let _: std::collections::HashMap<String, bool> = FoundDevice.features;
        let _: Option<bool> = FoundDevice.this_device;
        let _: Option<bool> = FoundDevice.lost_mode_enabled;
        let _: Option<String> = FoundDevice.device_display_name;
        let _: Option<String> = FoundDevice.name;
        let _: Option<bool> = FoundDevice.can_wipe_after_lock;
        let _: Option<bool> = FoundDevice.is_mac;
        let _: Option<String> = FoundDevice.raw_device_model;
        let _: Option<String> = FoundDevice.ba_uuid;
        let _: Option<String> = FoundDevice.device_discovery_id;
        let _: Option<bool> = FoundDevice.scd;
        let _: Option<bool> = FoundDevice.location_capable;
        let _: Option<bool> = FoundDevice.wipe_in_progress;
        let _: Option<bool> = FoundDevice.dark_wake;
        let _: Option<bool> = FoundDevice.device_with_you;
        let _: Option<i64> = FoundDevice.max_msg_char;
        let _: Option<String> = FoundDevice.device_class;
    }
    {
        let FTMember = None::<crate::api::api::FTMember>.unwrap();
        let _: Option<String> = FTMember.nickname;
        let _: String = FTMember.handle;
    }
    match None::<crate::api::api::FTMessage>.unwrap() {
        crate::api::api::FTMessage::LetMeInRequest(field0) => {
            let _: crate::api::api::LetMeInRequest = field0;
        }
        crate::api::api::FTMessage::LinkChanged { guid } => {
            let _: String = guid;
        }
        crate::api::api::FTMessage::JoinEvent {
            guid,
            participant,
            handle,
            ring,
        } => {
            let _: String = guid;
            let _: u64 = participant;
            let _: String = handle;
            let _: bool = ring;
        }
        crate::api::api::FTMessage::AddMembers {
            guid,
            members,
            ring,
        } => {
            let _: String = guid;
            let _: std::collections::HashSet<crate::api::api::FTMember> = members;
            let _: bool = ring;
        }
        crate::api::api::FTMessage::RemoveMembers { guid, members } => {
            let _: String = guid;
            let _: std::collections::HashSet<crate::api::api::FTMember> = members;
        }
        crate::api::api::FTMessage::LeaveEvent {
            guid,
            participant,
            handle,
        } => {
            let _: String = guid;
            let _: u64 = participant;
            let _: String = handle;
        }
        crate::api::api::FTMessage::Ring { guid } => {
            let _: String = guid;
        }
        crate::api::api::FTMessage::Decline { guid } => {
            let _: String = guid;
        }
        crate::api::api::FTMessage::RespondedElsewhere { guid } => {
            let _: String = guid;
        }
    }
    {
        let FTParticipant = None::<crate::api::api::FTParticipant>.unwrap();
        let _: Option<String> = FTParticipant.token;
        let _: String = FTParticipant.handle;
        let _: u64 = FTParticipant.participant_id;
        let _: Option<u64> = FTParticipant.last_join_date;
        let _: Option<ConversationParticipant> = FTParticipant.active;
    }
    {
        let FTSession = None::<crate::api::api::FTSession>.unwrap();
        let _: String = FTSession.group_id;
        let _: Vec<String> = FTSession.my_handles;
        let _: std::collections::HashMap<String, crate::api::api::FTParticipant> =
            FTSession.participants;
        let _: Option<ConversationLink> = FTSession.link;
        let _: std::collections::HashSet<crate::api::api::FTMember> = FTSession.members;
        let _: String = FTSession.report_id;
        let _: Option<u64> = FTSession.start_time;
        let _: Option<u64> = FTSession.last_rekey;
        let _: bool = FTSession.is_propped;
        let _: bool = FTSession.is_ringing_inaccurate;
        let _: Option<crate::api::api::FTMode> = FTSession.mode;
        let _: std::collections::HashMap<String, u64> = FTSession.recent_member_adds;
    }
    {
        let IconChangeMessage = None::<crate::api::api::IconChangeMessage>.unwrap();
        let _: Option<crate::api::api::MMCSFile> = IconChangeMessage.file;
        let _: u64 = IconChangeMessage.group_version;
    }
    {
        let IndexedMessagePart = None::<crate::api::api::IndexedMessagePart>.unwrap();
        let _: crate::api::api::MessagePart = IndexedMessagePart.part;
        let _: Option<usize> = IndexedMessagePart.idx;
        let _: Option<crate::api::api::PartExtension> = IndexedMessagePart.ext;
    }
    {
        let LetMeInRequest = None::<crate::api::api::LetMeInRequest>.unwrap();
        let _: Vec<u8> = LetMeInRequest.shared_secret;
        let _: String = LetMeInRequest.pseud;
        let _: String = LetMeInRequest.requestor;
        let _: Option<String> = LetMeInRequest.nickname;
        let _: Vec<u8> = LetMeInRequest.token;
        let _: Option<String> = LetMeInRequest.delegation_uuid;
        let _: Option<String> = LetMeInRequest.usage;
    }
    {
        let LinkMeta = None::<crate::api::api::LinkMeta>.unwrap();
        let _: crate::api::api::LPLinkMetadata = LinkMeta.data;
        let _: Vec<Vec<u8>> = LinkMeta.attachments;
    }
    {
        let Location = None::<crate::api::api::Location>.unwrap();
        let _: Option<crate::api::api::Address> = Location.address;
        let _: f64 = Location.altitude;
        let _: i64 = Location.floor_level;
        let _: f64 = Location.horizontal_accuracy;
        let _: bool = Location.is_inaccurate;
        let _: f64 = Location.latitude;
        let _: Option<String> = Location.location_id;
        let _: Option<i64> = Location.location_timestamp;
        let _: f64 = Location.longitude;
        let _: i64 = Location.secure_location_ts;
        let _: i64 = Location.timestamp;
        let _: f64 = Location.vertical_accuracy;
        let _: Option<String> = Location.position_type;
        let _: Option<bool> = Location.is_old;
        let _: Option<bool> = Location.location_finished;
    }
    match None::<crate::api::api::LoginState>.unwrap() {
        crate::api::api::LoginState::LoggedIn => {}
        crate::api::api::LoginState::NeedsDevice2FA => {}
        crate::api::api::LoginState::Needs2FAVerification => {}
        crate::api::api::LoginState::NeedsSMS2FA => {}
        crate::api::api::LoginState::NeedsSMS2FAVerification(field0) => {
            let _: VerifyBody = field0;
        }
        crate::api::api::LoginState::NeedsExtraStep(field0) => {
            let _: String = field0;
        }
        crate::api::api::LoginState::NeedsLogin => {}
    }
    {
        let LPIconMetadata = None::<crate::api::api::LPIconMetadata>.unwrap();
        let _: crate::api::api::NSURL = LPIconMetadata.url;
        let _: u8 = LPIconMetadata.version;
    }
    {
        let LPImageMetadata = None::<crate::api::api::LPImageMetadata>.unwrap();
        let _: String = LPImageMetadata.size;
        let _: crate::api::api::NSURL = LPImageMetadata.url;
        let _: u8 = LPImageMetadata.version;
    }
    {
        let LPLinkMetadata = None::<crate::api::api::LPLinkMetadata>.unwrap();
        let _: Option<crate::api::api::LPImageMetadata> = LPLinkMetadata.image_metadata;
        let _: u8 = LPLinkMetadata.version;
        let _: Option<crate::api::api::LPIconMetadata> = LPLinkMetadata.icon_metadata;
        let _: crate::api::api::NSURL = LPLinkMetadata.original_url;
        let _: Option<crate::api::api::NSURL> = LPLinkMetadata.url;
        let _: Option<String> = LPLinkMetadata.title;
        let _: Option<String> = LPLinkMetadata.summary;
        let _: Option<crate::api::api::RichLinkImageAttachmentSubstitute> = LPLinkMetadata.image;
        let _: Option<crate::api::api::RichLinkImageAttachmentSubstitute> = LPLinkMetadata.icon;
        let _: Option<NSArray<LPImageMetadata>> = LPLinkMetadata.images;
        let _: Option<NSArray<LPIconMetadata>> = LPLinkMetadata.icons;
    }
    match None::<crate::api::api::Message>.unwrap() {
        crate::api::api::Message::Message(field0) => {
            let _: crate::api::api::NormalMessage = field0;
        }
        crate::api::api::Message::RenameMessage(field0) => {
            let _: crate::api::api::RenameMessage = field0;
        }
        crate::api::api::Message::ChangeParticipants(field0) => {
            let _: crate::api::api::ChangeParticipantMessage = field0;
        }
        crate::api::api::Message::React(field0) => {
            let _: crate::api::api::ReactMessage = field0;
        }
        crate::api::api::Message::Delivered => {}
        crate::api::api::Message::Read => {}
        crate::api::api::Message::Typing => {}
        crate::api::api::Message::Unsend(field0) => {
            let _: crate::api::api::UnsendMessage = field0;
        }
        crate::api::api::Message::Edit(field0) => {
            let _: crate::api::api::EditMessage = field0;
        }
        crate::api::api::Message::IconChange(field0) => {
            let _: crate::api::api::IconChangeMessage = field0;
        }
        crate::api::api::Message::StopTyping => {}
        crate::api::api::Message::EnableSmsActivation(field0) => {
            let _: bool = field0;
        }
        crate::api::api::Message::MessageReadOnDevice => {}
        crate::api::api::Message::SmsConfirmSent(field0) => {
            let _: bool = field0;
        }
        crate::api::api::Message::MarkUnread => {}
        crate::api::api::Message::PeerCacheInvalidate => {}
        crate::api::api::Message::UpdateExtension(field0) => {
            let _: crate::api::api::UpdateExtensionMessage = field0;
        }
        crate::api::api::Message::Error(field0) => {
            let _: crate::api::api::ErrorMessage = field0;
        }
        crate::api::api::Message::MoveToRecycleBin(field0) => {
            let _: crate::api::api::MoveToRecycleBinMessage = field0;
        }
        crate::api::api::Message::RecoverChat(field0) => {
            let _: crate::api::api::OperatedChat = field0;
        }
        crate::api::api::Message::PermanentDelete(field0) => {
            let _: crate::api::api::PermanentDeleteMessage = field0;
        }
        crate::api::api::Message::Unschedule => {}
    }
    {
        let MessageInst = None::<crate::api::api::MessageInst>.unwrap();
        let _: String = MessageInst.id;
        let _: Option<String> = MessageInst.sender;
        let _: Option<crate::api::api::ConversationData> = MessageInst.conversation;
        let _: crate::api::api::Message = MessageInst.message;
        let _: u64 = MessageInst.sent_timestamp;
        let _: Option<Vec<crate::api::api::MessageTarget>> = MessageInst.target;
        let _: bool = MessageInst.send_delivered;
        let _: bool = MessageInst.verification_failed;
    }
    match None::<crate::api::api::MessagePart>.unwrap() {
        crate::api::api::MessagePart::Text(field0, field1) => {
            let _: String = field0;
            let _: crate::api::api::TextFormat = field1;
        }
        crate::api::api::MessagePart::Attachment(field0) => {
            let _: crate::api::api::Attachment = field0;
        }
        crate::api::api::MessagePart::Mention(field0, field1) => {
            let _: String = field0;
            let _: String = field1;
        }
        crate::api::api::MessagePart::Object(field0) => {
            let _: String = field0;
        }
    }
    {
        let MessageParts_ = None::<crate::api::api::MessageParts>.unwrap();
        let _: Vec<crate::api::api::IndexedMessagePart> = MessageParts_.0;
    }
    match None::<crate::api::api::MessageTarget>.unwrap() {
        crate::api::api::MessageTarget::Token(field0) => {
            let _: Vec<u8> = field0;
        }
        crate::api::api::MessageTarget::Uuid(field0) => {
            let _: String = field0;
        }
    }
    match None::<crate::api::api::MessageType>.unwrap() {
        crate::api::api::MessageType::IMessage => {}
        crate::api::api::MessageType::SMS {
            is_phone,
            using_number,
            from_handle,
        } => {
            let _: bool = is_phone;
            let _: String = using_number;
            let _: Option<String> = from_handle;
        }
    }
    {
        let MMCSFile = None::<crate::api::api::MMCSFile>.unwrap();
        let _: Vec<u8> = MMCSFile.signature;
        let _: String = MMCSFile.object;
        let _: String = MMCSFile.url;
        let _: Vec<u8> = MMCSFile.key;
        let _: usize = MMCSFile.size;
    }
    {
        let MoveToRecycleBinMessage = None::<crate::api::api::MoveToRecycleBinMessage>.unwrap();
        let _: crate::api::api::DeleteTarget = MoveToRecycleBinMessage.target;
        let _: u64 = MoveToRecycleBinMessage.recoverable_delete_date;
    }
    {
        let NormalMessage = None::<crate::api::api::NormalMessage>.unwrap();
        let _: crate::api::api::MessageParts = NormalMessage.parts;
        let _: Option<String> = NormalMessage.effect;
        let _: Option<String> = NormalMessage.reply_guid;
        let _: Option<String> = NormalMessage.reply_part;
        let _: crate::api::api::MessageType = NormalMessage.service;
        let _: Option<String> = NormalMessage.subject;
        let _: Option<crate::api::api::ExtensionApp> = NormalMessage.app;
        let _: Option<crate::api::api::LinkMeta> = NormalMessage.link_meta;
        let _: bool = NormalMessage.voice;
        let _: Option<crate::api::api::ScheduleMode> = NormalMessage.scheduled;
    }
    {
        let NSURL = None::<crate::api::api::NSURL>.unwrap();
        let _: String = NSURL.base;
        let _: String = NSURL.relative;
    }
    {
        let OperatedChat = None::<crate::api::api::OperatedChat>.unwrap();
        let _: Vec<String> = OperatedChat.participants;
        let _: String = OperatedChat.group_id;
        let _: String = OperatedChat.guid;
        let _: Option<bool> = OperatedChat.delete_incoming_messages;
        let _: Option<bool> = OperatedChat.was_reported_as_junk;
    }
    match None::<crate::api::api::PartExtension>.unwrap() {
        crate::api::api::PartExtension::Sticker {
            msg_width,
            rotation,
            sai,
            scale,
            update,
            sli,
            normalized_x,
            normalized_y,
            version,
            hash,
            safi,
            effect_type,
            sticker_id,
        } => {
            let _: f64 = msg_width;
            let _: f64 = rotation;
            let _: u64 = sai;
            let _: f64 = scale;
            let _: Option<bool> = update;
            let _: u64 = sli;
            let _: f64 = normalized_x;
            let _: f64 = normalized_y;
            let _: u64 = version;
            let _: String = hash;
            let _: u64 = safi;
            let _: i64 = effect_type;
            let _: String = sticker_id;
        }
    }
    {
        let PermanentDeleteMessage = None::<crate::api::api::PermanentDeleteMessage>.unwrap();
        let _: crate::api::api::DeleteTarget = PermanentDeleteMessage.target;
        let _: bool = PermanentDeleteMessage.is_scheduled;
    }
    {
        let PrivateDeviceInfo = None::<crate::api::api::PrivateDeviceInfo>.unwrap();
        let _: Option<String> = PrivateDeviceInfo.uuid;
        let _: Option<String> = PrivateDeviceInfo.device_name;
        let _: Vec<u8> = PrivateDeviceInfo.token;
        let _: bool = PrivateDeviceInfo.is_hsa_trusted;
        let _: Vec<String> = PrivateDeviceInfo.identites;
        let _: Vec<String> = PrivateDeviceInfo.sub_services;
    }
    {
        let ReactMessage = None::<crate::api::api::ReactMessage>.unwrap();
        let _: String = ReactMessage.to_uuid;
        let _: Option<u64> = ReactMessage.to_part;
        let _: crate::api::api::ReactMessageType = ReactMessage.reaction;
        let _: String = ReactMessage.to_text;
    }
    match None::<crate::api::api::ReactMessageType>.unwrap() {
        crate::api::api::ReactMessageType::React { reaction, enable } => {
            let _: crate::api::api::Reaction = reaction;
            let _: bool = enable;
        }
        crate::api::api::ReactMessageType::Extension { spec, body } => {
            let _: crate::api::api::ExtensionApp = spec;
            let _: crate::api::api::MessageParts = body;
        }
    }
    match None::<crate::api::api::Reaction>.unwrap() {
        crate::api::api::Reaction::Heart => {}
        crate::api::api::Reaction::Like => {}
        crate::api::api::Reaction::Dislike => {}
        crate::api::api::Reaction::Laugh => {}
        crate::api::api::Reaction::Emphasize => {}
        crate::api::api::Reaction::Question => {}
        crate::api::api::Reaction::Emoji(field0) => {
            let _: String = field0;
        }
        crate::api::api::Reaction::Sticker { spec, body } => {
            let _: Option<crate::api::api::ExtensionApp> = spec;
            let _: crate::api::api::MessageParts = body;
        }
    }
    {
        let RenameMessage = None::<crate::api::api::RenameMessage>.unwrap();
        let _: String = RenameMessage.new_name;
    }
    {
        let RichLinkImageAttachmentSubstitute =
            None::<crate::api::api::RichLinkImageAttachmentSubstitute>.unwrap();
        let _: String = RichLinkImageAttachmentSubstitute.mime_type;
        let _: u64 = RichLinkImageAttachmentSubstitute.rich_link_image_attachment_substitute_index;
    }
    {
        let ScheduleMode = None::<crate::api::api::ScheduleMode>.unwrap();
        let _: u64 = ScheduleMode.ms;
        let _: bool = ScheduleMode.schedule;
    }
    {
        let SharedAlbum = None::<crate::api::api::SharedAlbum>.unwrap();
        let _: Option<String> = SharedAlbum.name;
        let _: Option<String> = SharedAlbum.fullname;
        let _: Option<String> = SharedAlbum.email;
        let _: String = SharedAlbum.albumguid;
        let _: String = SharedAlbum.sharingtype;
        let _: Option<String> = SharedAlbum.subscriptiondate;
        let _: Option<String> = SharedAlbum.albumlocation;
        let _: Vec<String> = SharedAlbum.assets;
        let _: Option<String> = SharedAlbum.delete;
    }
    {
        let SupportAction = None::<crate::api::api::SupportAction>.unwrap();
        let _: String = SupportAction.url;
        let _: String = SupportAction.button;
    }
    {
        let SupportAlert = None::<crate::api::api::SupportAlert>.unwrap();
        let _: String = SupportAlert.title;
        let _: String = SupportAlert.body;
        let _: Option<crate::api::api::SupportAction> = SupportAlert.action;
    }
    match None::<crate::api::api::SyncStatus>.unwrap() {
        crate::api::api::SyncStatus::Synced => {}
        crate::api::api::SyncStatus::Downloading { progress, total } => {
            let _: usize = progress;
            let _: usize = total;
        }
        crate::api::api::SyncStatus::Uploading { progress, total } => {
            let _: usize = progress;
            let _: usize = total;
        }
        crate::api::api::SyncStatus::Syncing => {}
    }
    {
        let TextFlags = None::<crate::api::api::TextFlags>.unwrap();
        let _: bool = TextFlags.bold;
        let _: bool = TextFlags.italic;
        let _: bool = TextFlags.underline;
        let _: bool = TextFlags.strikethrough;
    }
    match None::<crate::api::api::TextFormat>.unwrap() {
        crate::api::api::TextFormat::Flags(field0) => {
            let _: crate::api::api::TextFlags = field0;
        }
        crate::api::api::TextFormat::Effect(field0) => {
            let _: crate::api::api::TextEffect = field0;
        }
    }
    {
        let TrustedPhoneNumber = None::<crate::api::api::TrustedPhoneNumber>.unwrap();
        let _: String = TrustedPhoneNumber.number_with_dial_code;
        let _: String = TrustedPhoneNumber.last_two_digits;
        let _: String = TrustedPhoneNumber.push_mode;
        let _: u32 = TrustedPhoneNumber.id;
    }
    {
        let UnsendMessage = None::<crate::api::api::UnsendMessage>.unwrap();
        let _: String = UnsendMessage.tuuid;
        let _: u64 = UnsendMessage.edit_part;
    }
    {
        let UpdateExtensionMessage = None::<crate::api::api::UpdateExtensionMessage>.unwrap();
        let _: String = UpdateExtensionMessage.for_uuid;
        let _: crate::api::api::PartExtension = UpdateExtensionMessage.ext;
    }
};

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationLink>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationParticipant>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
        FindMyFriendsClient<DefaultAnisetteProvider>,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
        FindMyPhoneClient<DefaultAnisetteProvider>,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IDSUser>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<JoinedOSConfig>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray<LPIconMetadata>>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray<LPImageMetadata>>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for Arc<PushState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ConversationLink {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationLink>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ConversationParticipant {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationParticipant>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for FindMyFriendsClient<DefaultAnisetteProvider> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                FindMyFriendsClient<DefaultAnisetteProvider>,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for FindMyPhoneClient<DefaultAnisetteProvider> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                FindMyPhoneClient<DefaultAnisetteProvider>,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for IDSUser {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IDSUser>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for JoinedOSConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<JoinedOSConfig>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for NSArray<LPIconMetadata> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray<LPIconMetadata>>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for NSArray<LPImageMetadata> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray<LPImageMetadata>>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for VerifyBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for std::collections::HashMap<String, u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, u64)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<String, bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, bool)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<String, crate::api::api::FTParticipant> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, crate::api::api::FTParticipant)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<String, crate::api::api::SyncStatus> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, crate::api::api::SyncStatus)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationLink>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationParticipant>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            FindMyFriendsClient<DefaultAnisetteProvider>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            FindMyPhoneClient<DefaultAnisetteProvider>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IDSUser>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<JoinedOSConfig>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray<LPIconMetadata>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray<LPImageMetadata>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for std::collections::HashSet<crate::api::api::FTMember> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::api::FTMember>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for StreamSink<
        crate::api::api::MMCSTransferProgress,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<crate::api::api::TransferProgress, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::api::Address {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_administrativeArea = <Option<String>>::sse_decode(deserializer);
        let mut var_country = <String>::sse_decode(deserializer);
        let mut var_countryCode = <String>::sse_decode(deserializer);
        let mut var_formattedAddressLines = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_locality = <Option<String>>::sse_decode(deserializer);
        let mut var_stateCode = <Option<String>>::sse_decode(deserializer);
        let mut var_streetAddress = <Option<String>>::sse_decode(deserializer);
        let mut var_streetName = <Option<String>>::sse_decode(deserializer);
        return crate::api::api::Address {
            administrative_area: var_administrativeArea,
            country: var_country,
            country_code: var_countryCode,
            formatted_address_lines: var_formattedAddressLines,
            locality: var_locality,
            state_code: var_stateCode,
            street_address: var_streetAddress,
            street_name: var_streetName,
        };
    }
}

impl SseDecode for crate::api::api::Attachment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_aType = <crate::api::api::AttachmentType>::sse_decode(deserializer);
        let mut var_part_ = <u64>::sse_decode(deserializer);
        let mut var_utiType = <String>::sse_decode(deserializer);
        let mut var_mime = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_iris = <bool>::sse_decode(deserializer);
        return crate::api::api::Attachment {
            a_type: var_aType,
            part: var_part_,
            uti_type: var_utiType,
            mime: var_mime,
            name: var_name,
            iris: var_iris,
        };
    }
}

impl SseDecode for crate::api::api::AttachmentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::api::AttachmentType::Inline(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::api::MMCSFile>::sse_decode(deserializer);
                return crate::api::api::AttachmentType::MMCS(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::Balloon {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_session = <Option<String>>::sse_decode(deserializer);
        let mut var_layout = <crate::api::api::BalloonLayout>::sse_decode(deserializer);
        let mut var_ldText = <Option<String>>::sse_decode(deserializer);
        let mut var_isLive = <bool>::sse_decode(deserializer);
        let mut var_icon = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::api::Balloon {
            url: var_url,
            session: var_session,
            layout: var_layout,
            ld_text: var_ldText,
            is_live: var_isLive,
            icon: var_icon,
        };
    }
}

impl SseDecode for crate::api::api::BalloonLayout {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_imageSubtitle = <String>::sse_decode(deserializer);
                let mut var_imageTitle = <String>::sse_decode(deserializer);
                let mut var_caption = <String>::sse_decode(deserializer);
                let mut var_secondarySubcaption = <String>::sse_decode(deserializer);
                let mut var_tertiarySubcaption = <String>::sse_decode(deserializer);
                let mut var_subcaption = <String>::sse_decode(deserializer);
                let mut var_class_ = <crate::api::api::NSDictionaryClass>::sse_decode(deserializer);
                return crate::api::api::BalloonLayout::TemplateLayout {
                    image_subtitle: var_imageSubtitle,
                    image_title: var_imageTitle,
                    caption: var_caption,
                    secondary_subcaption: var_secondarySubcaption,
                    tertiary_subcaption: var_tertiarySubcaption,
                    subcaption: var_subcaption,
                    class: var_class_,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::api::ChangeParticipantMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_newParticipants = <Vec<String>>::sse_decode(deserializer);
        let mut var_groupVersion = <u64>::sse_decode(deserializer);
        return crate::api::api::ChangeParticipantMessage {
            new_participants: var_newParticipants,
            group_version: var_groupVersion,
        };
    }
}

impl SseDecode for crate::api::api::ConversationData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_participants = <Vec<String>>::sse_decode(deserializer);
        let mut var_cvName = <Option<String>>::sse_decode(deserializer);
        let mut var_senderGuid = <Option<String>>::sse_decode(deserializer);
        let mut var_afterGuid = <Option<String>>::sse_decode(deserializer);
        return crate::api::api::ConversationData {
            participants: var_participants,
            cv_name: var_cvName,
            sender_guid: var_senderGuid,
            after_guid: var_afterGuid,
        };
    }
}

impl SseDecode for crate::api::api::DeleteTarget {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::api::OperatedChat>::sse_decode(deserializer);
                return crate::api::api::DeleteTarget::Chat(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<String>>::sse_decode(deserializer);
                return crate::api::api::DeleteTarget::Messages(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::DeviceInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_serial = <String>::sse_decode(deserializer);
        let mut var_osVersion = <String>::sse_decode(deserializer);
        let mut var_encodedData = <Option<Vec<u8>>>::sse_decode(deserializer);
        return crate::api::api::DeviceInfo {
            name: var_name,
            serial: var_serial,
            os_version: var_osVersion,
            encoded_data: var_encodedData,
        };
    }
}

impl SseDecode for crate::api::api::EditMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tuuid = <String>::sse_decode(deserializer);
        let mut var_editPart = <u64>::sse_decode(deserializer);
        let mut var_newParts = <crate::api::api::MessageParts>::sse_decode(deserializer);
        return crate::api::api::EditMessage {
            tuuid: var_tuuid,
            edit_part: var_editPart,
            new_parts: var_newParts,
        };
    }
}

impl SseDecode for crate::api::api::ErrorMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_forUuid = <String>::sse_decode(deserializer);
        let mut var_status = <u64>::sse_decode(deserializer);
        let mut var_statusStr = <String>::sse_decode(deserializer);
        return crate::api::api::ErrorMessage {
            for_uuid: var_forUuid,
            status: var_status,
            status_str: var_statusStr,
        };
    }
}

impl SseDecode for crate::api::api::ExtensionApp {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_appId = <Option<u64>>::sse_decode(deserializer);
        let mut var_bundleId = <String>::sse_decode(deserializer);
        let mut var_balloon = <Option<crate::api::api::Balloon>>::sse_decode(deserializer);
        return crate::api::api::ExtensionApp {
            name: var_name,
            app_id: var_appId,
            bundle_id: var_bundleId,
            balloon: var_balloon,
        };
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::api::FFIFilePackager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::api::FFIFilePackager {};
    }
}

impl SseDecode for crate::api::api::Follow {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_createTimestamp = <i64>::sse_decode(deserializer);
        let mut var_expires = <i64>::sse_decode(deserializer);
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_invitationAcceptedHandles = <Vec<String>>::sse_decode(deserializer);
        let mut var_invitationFromHandles = <Vec<String>>::sse_decode(deserializer);
        let mut var_isFromMessages = <bool>::sse_decode(deserializer);
        let mut var_offerId = <Option<String>>::sse_decode(deserializer);
        let mut var_onlyInEvent = <bool>::sse_decode(deserializer);
        let mut var_personIdHash = <String>::sse_decode(deserializer);
        let mut var_secureLocationsCapable = <bool>::sse_decode(deserializer);
        let mut var_shallowOrLiveSecureLocationsCapable = <bool>::sse_decode(deserializer);
        let mut var_source = <String>::sse_decode(deserializer);
        let mut var_tkPermission = <bool>::sse_decode(deserializer);
        let mut var_updateTimestamp = <i64>::sse_decode(deserializer);
        let mut var_fallbackToLegacyAllowed = <Option<bool>>::sse_decode(deserializer);
        let mut var_optedNotToShare = <Option<bool>>::sse_decode(deserializer);
        let mut var_lastLocation = <Option<crate::api::api::Location>>::sse_decode(deserializer);
        let mut var_locateInProgress = <bool>::sse_decode(deserializer);
        return crate::api::api::Follow {
            create_timestamp: var_createTimestamp,
            expires: var_expires,
            id: var_id,
            invitation_accepted_handles: var_invitationAcceptedHandles,
            invitation_from_handles: var_invitationFromHandles,
            is_from_messages: var_isFromMessages,
            offer_id: var_offerId,
            only_in_event: var_onlyInEvent,
            person_id_hash: var_personIdHash,
            secure_locations_capable: var_secureLocationsCapable,
            shallow_or_live_secure_locations_capable: var_shallowOrLiveSecureLocationsCapable,
            source: var_source,
            tk_permission: var_tkPermission,
            update_timestamp: var_updateTimestamp,
            fallback_to_legacy_allowed: var_fallbackToLegacyAllowed,
            opted_not_to_share: var_optedNotToShare,
            last_location: var_lastLocation,
            locate_in_progress: var_locateInProgress,
        };
    }
}

impl SseDecode for crate::api::api::FoundDevice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_deviceModel = <Option<String>>::sse_decode(deserializer);
        let mut var_lowPowerMode = <Option<bool>>::sse_decode(deserializer);
        let mut var_passcodeLength = <Option<i64>>::sse_decode(deserializer);
        let mut var_id = <Option<String>>::sse_decode(deserializer);
        let mut var_batteryStatus = <Option<String>>::sse_decode(deserializer);
        let mut var_lostModeCapable = <Option<bool>>::sse_decode(deserializer);
        let mut var_batteryLevel = <Option<f64>>::sse_decode(deserializer);
        let mut var_locationEnabled = <Option<bool>>::sse_decode(deserializer);
        let mut var_isConsideredAccessory = <Option<bool>>::sse_decode(deserializer);
        let mut var_location = <Option<crate::api::api::Location>>::sse_decode(deserializer);
        let mut var_modelDisplayName = <Option<String>>::sse_decode(deserializer);
        let mut var_deviceColor = <Option<String>>::sse_decode(deserializer);
        let mut var_activationLocked = <Option<bool>>::sse_decode(deserializer);
        let mut var_rm2State = <Option<i64>>::sse_decode(deserializer);
        let mut var_locFoundEnabled = <Option<bool>>::sse_decode(deserializer);
        let mut var_nwd = <Option<bool>>::sse_decode(deserializer);
        let mut var_deviceStatus = <Option<String>>::sse_decode(deserializer);
        let mut var_fmlyShare = <Option<bool>>::sse_decode(deserializer);
        let mut var_features = <std::collections::HashMap<String, bool>>::sse_decode(deserializer);
        let mut var_thisDevice = <Option<bool>>::sse_decode(deserializer);
        let mut var_lostModeEnabled = <Option<bool>>::sse_decode(deserializer);
        let mut var_deviceDisplayName = <Option<String>>::sse_decode(deserializer);
        let mut var_name = <Option<String>>::sse_decode(deserializer);
        let mut var_canWipeAfterLock = <Option<bool>>::sse_decode(deserializer);
        let mut var_isMac = <Option<bool>>::sse_decode(deserializer);
        let mut var_rawDeviceModel = <Option<String>>::sse_decode(deserializer);
        let mut var_baUuid = <Option<String>>::sse_decode(deserializer);
        let mut var_deviceDiscoveryId = <Option<String>>::sse_decode(deserializer);
        let mut var_scd = <Option<bool>>::sse_decode(deserializer);
        let mut var_locationCapable = <Option<bool>>::sse_decode(deserializer);
        let mut var_wipeInProgress = <Option<bool>>::sse_decode(deserializer);
        let mut var_darkWake = <Option<bool>>::sse_decode(deserializer);
        let mut var_deviceWithYou = <Option<bool>>::sse_decode(deserializer);
        let mut var_maxMsgChar = <Option<i64>>::sse_decode(deserializer);
        let mut var_deviceClass = <Option<String>>::sse_decode(deserializer);
        return crate::api::api::FoundDevice {
            device_model: var_deviceModel,
            low_power_mode: var_lowPowerMode,
            passcode_length: var_passcodeLength,
            id: var_id,
            battery_status: var_batteryStatus,
            lost_mode_capable: var_lostModeCapable,
            battery_level: var_batteryLevel,
            location_enabled: var_locationEnabled,
            is_considered_accessory: var_isConsideredAccessory,
            location: var_location,
            model_display_name: var_modelDisplayName,
            device_color: var_deviceColor,
            activation_locked: var_activationLocked,
            rm2_state: var_rm2State,
            loc_found_enabled: var_locFoundEnabled,
            nwd: var_nwd,
            device_status: var_deviceStatus,
            fmly_share: var_fmlyShare,
            features: var_features,
            this_device: var_thisDevice,
            lost_mode_enabled: var_lostModeEnabled,
            device_display_name: var_deviceDisplayName,
            name: var_name,
            can_wipe_after_lock: var_canWipeAfterLock,
            is_mac: var_isMac,
            raw_device_model: var_rawDeviceModel,
            ba_uuid: var_baUuid,
            device_discovery_id: var_deviceDiscoveryId,
            scd: var_scd,
            location_capable: var_locationCapable,
            wipe_in_progress: var_wipeInProgress,
            dark_wake: var_darkWake,
            device_with_you: var_deviceWithYou,
            max_msg_char: var_maxMsgChar,
            device_class: var_deviceClass,
        };
    }
}

impl SseDecode for crate::api::api::FTMember {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_nickname = <Option<String>>::sse_decode(deserializer);
        let mut var_handle = <String>::sse_decode(deserializer);
        return crate::api::api::FTMember {
            nickname: var_nickname,
            handle: var_handle,
        };
    }
}

impl SseDecode for crate::api::api::FTMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::api::LetMeInRequest>::sse_decode(deserializer);
                return crate::api::api::FTMessage::LetMeInRequest(var_field0);
            }
            1 => {
                let mut var_guid = <String>::sse_decode(deserializer);
                return crate::api::api::FTMessage::LinkChanged { guid: var_guid };
            }
            2 => {
                let mut var_guid = <String>::sse_decode(deserializer);
                let mut var_participant = <u64>::sse_decode(deserializer);
                let mut var_handle = <String>::sse_decode(deserializer);
                let mut var_ring = <bool>::sse_decode(deserializer);
                return crate::api::api::FTMessage::JoinEvent {
                    guid: var_guid,
                    participant: var_participant,
                    handle: var_handle,
                    ring: var_ring,
                };
            }
            3 => {
                let mut var_guid = <String>::sse_decode(deserializer);
                let mut var_members =
                    <std::collections::HashSet<crate::api::api::FTMember>>::sse_decode(
                        deserializer,
                    );
                let mut var_ring = <bool>::sse_decode(deserializer);
                return crate::api::api::FTMessage::AddMembers {
                    guid: var_guid,
                    members: var_members,
                    ring: var_ring,
                };
            }
            4 => {
                let mut var_guid = <String>::sse_decode(deserializer);
                let mut var_members =
                    <std::collections::HashSet<crate::api::api::FTMember>>::sse_decode(
                        deserializer,
                    );
                return crate::api::api::FTMessage::RemoveMembers {
                    guid: var_guid,
                    members: var_members,
                };
            }
            5 => {
                let mut var_guid = <String>::sse_decode(deserializer);
                let mut var_participant = <u64>::sse_decode(deserializer);
                let mut var_handle = <String>::sse_decode(deserializer);
                return crate::api::api::FTMessage::LeaveEvent {
                    guid: var_guid,
                    participant: var_participant,
                    handle: var_handle,
                };
            }
            6 => {
                let mut var_guid = <String>::sse_decode(deserializer);
                return crate::api::api::FTMessage::Ring { guid: var_guid };
            }
            7 => {
                let mut var_guid = <String>::sse_decode(deserializer);
                return crate::api::api::FTMessage::Decline { guid: var_guid };
            }
            8 => {
                let mut var_guid = <String>::sse_decode(deserializer);
                return crate::api::api::FTMessage::RespondedElsewhere { guid: var_guid };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::FTMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::api::FTMode::Outgoing,
            1 => crate::api::api::FTMode::Incoming,
            2 => crate::api::api::FTMode::Missed,
            3 => crate::api::api::FTMode::MissedOutgoing,
            _ => unreachable!("Invalid variant for FTMode: {}", inner),
        };
    }
}

impl SseDecode for crate::api::api::FTParticipant {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_token = <Option<String>>::sse_decode(deserializer);
        let mut var_handle = <String>::sse_decode(deserializer);
        let mut var_participantId = <u64>::sse_decode(deserializer);
        let mut var_lastJoinDate = <Option<u64>>::sse_decode(deserializer);
        let mut var_active = <Option<ConversationParticipant>>::sse_decode(deserializer);
        return crate::api::api::FTParticipant {
            token: var_token,
            handle: var_handle,
            participant_id: var_participantId,
            last_join_date: var_lastJoinDate,
            active: var_active,
        };
    }
}

impl SseDecode for crate::api::api::FTSession {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_groupId = <String>::sse_decode(deserializer);
        let mut var_myHandles = <Vec<String>>::sse_decode(deserializer);
        let mut var_participants = <std::collections::HashMap<
            String,
            crate::api::api::FTParticipant,
        >>::sse_decode(deserializer);
        let mut var_link = <Option<ConversationLink>>::sse_decode(deserializer);
        let mut var_members =
            <std::collections::HashSet<crate::api::api::FTMember>>::sse_decode(deserializer);
        let mut var_reportId = <String>::sse_decode(deserializer);
        let mut var_startTime = <Option<u64>>::sse_decode(deserializer);
        let mut var_lastRekey = <Option<u64>>::sse_decode(deserializer);
        let mut var_isPropped = <bool>::sse_decode(deserializer);
        let mut var_isRingingInaccurate = <bool>::sse_decode(deserializer);
        let mut var_mode = <Option<crate::api::api::FTMode>>::sse_decode(deserializer);
        let mut var_recentMemberAdds =
            <std::collections::HashMap<String, u64>>::sse_decode(deserializer);
        return crate::api::api::FTSession {
            group_id: var_groupId,
            my_handles: var_myHandles,
            participants: var_participants,
            link: var_link,
            members: var_members,
            report_id: var_reportId,
            start_time: var_startTime,
            last_rekey: var_lastRekey,
            is_propped: var_isPropped,
            is_ringing_inaccurate: var_isRingingInaccurate,
            mode: var_mode,
            recent_member_adds: var_recentMemberAdds,
        };
    }
}

impl SseDecode for crate::api::api::HwExtra {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_version = <String>::sse_decode(deserializer);
        let mut var_protocolVersion = <u32>::sse_decode(deserializer);
        let mut var_deviceId = <String>::sse_decode(deserializer);
        let mut var_icloudUa = <String>::sse_decode(deserializer);
        let mut var_aoskitVersion = <String>::sse_decode(deserializer);
        return crate::api::api::HwExtra {
            version: var_version,
            protocol_version: var_protocolVersion,
            device_id: var_deviceId,
            icloud_ua: var_icloudUa,
            aoskit_version: var_aoskitVersion,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::api::IconChangeMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_file = <Option<crate::api::api::MMCSFile>>::sse_decode(deserializer);
        let mut var_groupVersion = <u64>::sse_decode(deserializer);
        return crate::api::api::IconChangeMessage {
            file: var_file,
            group_version: var_groupVersion,
        };
    }
}

impl SseDecode for crate::api::api::IndexedMessagePart {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_part_ = <crate::api::api::MessagePart>::sse_decode(deserializer);
        let mut var_idx = <Option<usize>>::sse_decode(deserializer);
        let mut var_ext = <Option<crate::api::api::PartExtension>>::sse_decode(deserializer);
        return crate::api::api::IndexedMessagePart {
            part: var_part_,
            idx: var_idx,
            ext: var_ext,
        };
    }
}

impl SseDecode for crate::api::api::LetMeInRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_sharedSecret = <Vec<u8>>::sse_decode(deserializer);
        let mut var_pseud = <String>::sse_decode(deserializer);
        let mut var_requestor = <String>::sse_decode(deserializer);
        let mut var_nickname = <Option<String>>::sse_decode(deserializer);
        let mut var_token = <Vec<u8>>::sse_decode(deserializer);
        let mut var_delegationUuid = <Option<String>>::sse_decode(deserializer);
        let mut var_usage = <Option<String>>::sse_decode(deserializer);
        return crate::api::api::LetMeInRequest {
            shared_secret: var_sharedSecret,
            pseud: var_pseud,
            requestor: var_requestor,
            nickname: var_nickname,
            token: var_token,
            delegation_uuid: var_delegationUuid,
            usage: var_usage,
        };
    }
}

impl SseDecode for crate::api::api::LinkMeta {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data = <crate::api::api::LPLinkMetadata>::sse_decode(deserializer);
        let mut var_attachments = <Vec<Vec<u8>>>::sse_decode(deserializer);
        return crate::api::api::LinkMeta {
            data: var_data,
            attachments: var_attachments,
        };
    }
}

impl SseDecode for Vec<IDSUser> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<IDSUser>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::Follow> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::Follow>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::FoundDevice> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::FoundDevice>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::FTMember> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::FTMember>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::FTSession> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::FTSession>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::IndexedMessagePart> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::IndexedMessagePart>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Vec<u8>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::MessageTarget> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::MessageTarget>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::PrivateDeviceInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::PrivateDeviceInfo>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, bool)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, bool)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, u64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, u64)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, crate::api::api::FTParticipant)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, crate::api::api::FTParticipant)>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, crate::api::api::SyncStatus)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, crate::api::api::SyncStatus)>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::SharedAlbum> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::SharedAlbum>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::TrustedPhoneNumber> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::TrustedPhoneNumber>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::api::Location {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_address = <Option<crate::api::api::Address>>::sse_decode(deserializer);
        let mut var_altitude = <f64>::sse_decode(deserializer);
        let mut var_floorLevel = <i64>::sse_decode(deserializer);
        let mut var_horizontalAccuracy = <f64>::sse_decode(deserializer);
        let mut var_isInaccurate = <bool>::sse_decode(deserializer);
        let mut var_latitude = <f64>::sse_decode(deserializer);
        let mut var_locationId = <Option<String>>::sse_decode(deserializer);
        let mut var_locationTimestamp = <Option<i64>>::sse_decode(deserializer);
        let mut var_longitude = <f64>::sse_decode(deserializer);
        let mut var_secureLocationTs = <i64>::sse_decode(deserializer);
        let mut var_timestamp = <i64>::sse_decode(deserializer);
        let mut var_verticalAccuracy = <f64>::sse_decode(deserializer);
        let mut var_positionType = <Option<String>>::sse_decode(deserializer);
        let mut var_isOld = <Option<bool>>::sse_decode(deserializer);
        let mut var_locationFinished = <Option<bool>>::sse_decode(deserializer);
        return crate::api::api::Location {
            address: var_address,
            altitude: var_altitude,
            floor_level: var_floorLevel,
            horizontal_accuracy: var_horizontalAccuracy,
            is_inaccurate: var_isInaccurate,
            latitude: var_latitude,
            location_id: var_locationId,
            location_timestamp: var_locationTimestamp,
            longitude: var_longitude,
            secure_location_ts: var_secureLocationTs,
            timestamp: var_timestamp,
            vertical_accuracy: var_verticalAccuracy,
            position_type: var_positionType,
            is_old: var_isOld,
            location_finished: var_locationFinished,
        };
    }
}

impl SseDecode for crate::api::api::LoginState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::api::LoginState::LoggedIn;
            }
            1 => {
                return crate::api::api::LoginState::NeedsDevice2FA;
            }
            2 => {
                return crate::api::api::LoginState::Needs2FAVerification;
            }
            3 => {
                return crate::api::api::LoginState::NeedsSMS2FA;
            }
            4 => {
                let mut var_field0 = <VerifyBody>::sse_decode(deserializer);
                return crate::api::api::LoginState::NeedsSMS2FAVerification(var_field0);
            }
            5 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::api::LoginState::NeedsExtraStep(var_field0);
            }
            6 => {
                return crate::api::api::LoginState::NeedsLogin;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::LPIconMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <crate::api::api::NSURL>::sse_decode(deserializer);
        let mut var_version = <u8>::sse_decode(deserializer);
        return crate::api::api::LPIconMetadata {
            url: var_url,
            version: var_version,
        };
    }
}

impl SseDecode for crate::api::api::LPImageMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_size = <String>::sse_decode(deserializer);
        let mut var_url = <crate::api::api::NSURL>::sse_decode(deserializer);
        let mut var_version = <u8>::sse_decode(deserializer);
        return crate::api::api::LPImageMetadata {
            size: var_size,
            url: var_url,
            version: var_version,
        };
    }
}

impl SseDecode for crate::api::api::LPLinkMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_imageMetadata =
            <Option<crate::api::api::LPImageMetadata>>::sse_decode(deserializer);
        let mut var_version = <u8>::sse_decode(deserializer);
        let mut var_iconMetadata =
            <Option<crate::api::api::LPIconMetadata>>::sse_decode(deserializer);
        let mut var_originalUrl = <crate::api::api::NSURL>::sse_decode(deserializer);
        let mut var_url = <Option<crate::api::api::NSURL>>::sse_decode(deserializer);
        let mut var_title = <Option<String>>::sse_decode(deserializer);
        let mut var_summary = <Option<String>>::sse_decode(deserializer);
        let mut var_image =
            <Option<crate::api::api::RichLinkImageAttachmentSubstitute>>::sse_decode(deserializer);
        let mut var_icon =
            <Option<crate::api::api::RichLinkImageAttachmentSubstitute>>::sse_decode(deserializer);
        let mut var_images = <Option<NSArray<LPImageMetadata>>>::sse_decode(deserializer);
        let mut var_icons = <Option<NSArray<LPIconMetadata>>>::sse_decode(deserializer);
        return crate::api::api::LPLinkMetadata {
            image_metadata: var_imageMetadata,
            version: var_version,
            icon_metadata: var_iconMetadata,
            original_url: var_originalUrl,
            url: var_url,
            title: var_title,
            summary: var_summary,
            image: var_image,
            icon: var_icon,
            images: var_images,
            icons: var_icons,
        };
    }
}

impl SseDecode for crate::api::api::Message {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::api::NormalMessage>::sse_decode(deserializer);
                return crate::api::api::Message::Message(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::api::RenameMessage>::sse_decode(deserializer);
                return crate::api::api::Message::RenameMessage(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <crate::api::api::ChangeParticipantMessage>::sse_decode(deserializer);
                return crate::api::api::Message::ChangeParticipants(var_field0);
            }
            3 => {
                let mut var_field0 = <crate::api::api::ReactMessage>::sse_decode(deserializer);
                return crate::api::api::Message::React(var_field0);
            }
            4 => {
                return crate::api::api::Message::Delivered;
            }
            5 => {
                return crate::api::api::Message::Read;
            }
            6 => {
                return crate::api::api::Message::Typing;
            }
            7 => {
                let mut var_field0 = <crate::api::api::UnsendMessage>::sse_decode(deserializer);
                return crate::api::api::Message::Unsend(var_field0);
            }
            8 => {
                let mut var_field0 = <crate::api::api::EditMessage>::sse_decode(deserializer);
                return crate::api::api::Message::Edit(var_field0);
            }
            9 => {
                let mut var_field0 = <crate::api::api::IconChangeMessage>::sse_decode(deserializer);
                return crate::api::api::Message::IconChange(var_field0);
            }
            10 => {
                return crate::api::api::Message::StopTyping;
            }
            11 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                return crate::api::api::Message::EnableSmsActivation(var_field0);
            }
            12 => {
                return crate::api::api::Message::MessageReadOnDevice;
            }
            13 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                return crate::api::api::Message::SmsConfirmSent(var_field0);
            }
            14 => {
                return crate::api::api::Message::MarkUnread;
            }
            15 => {
                return crate::api::api::Message::PeerCacheInvalidate;
            }
            16 => {
                let mut var_field0 =
                    <crate::api::api::UpdateExtensionMessage>::sse_decode(deserializer);
                return crate::api::api::Message::UpdateExtension(var_field0);
            }
            17 => {
                let mut var_field0 = <crate::api::api::ErrorMessage>::sse_decode(deserializer);
                return crate::api::api::Message::Error(var_field0);
            }
            18 => {
                let mut var_field0 =
                    <crate::api::api::MoveToRecycleBinMessage>::sse_decode(deserializer);
                return crate::api::api::Message::MoveToRecycleBin(var_field0);
            }
            19 => {
                let mut var_field0 = <crate::api::api::OperatedChat>::sse_decode(deserializer);
                return crate::api::api::Message::RecoverChat(var_field0);
            }
            20 => {
                let mut var_field0 =
                    <crate::api::api::PermanentDeleteMessage>::sse_decode(deserializer);
                return crate::api::api::Message::PermanentDelete(var_field0);
            }
            21 => {
                return crate::api::api::Message::Unschedule;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::MessageInst {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_sender = <Option<String>>::sse_decode(deserializer);
        let mut var_conversation =
            <Option<crate::api::api::ConversationData>>::sse_decode(deserializer);
        let mut var_message = <crate::api::api::Message>::sse_decode(deserializer);
        let mut var_sentTimestamp = <u64>::sse_decode(deserializer);
        let mut var_target =
            <Option<Vec<crate::api::api::MessageTarget>>>::sse_decode(deserializer);
        let mut var_sendDelivered = <bool>::sse_decode(deserializer);
        let mut var_verificationFailed = <bool>::sse_decode(deserializer);
        return crate::api::api::MessageInst {
            id: var_id,
            sender: var_sender,
            conversation: var_conversation,
            message: var_message,
            sent_timestamp: var_sentTimestamp,
            target: var_target,
            send_delivered: var_sendDelivered,
            verification_failed: var_verificationFailed,
        };
    }
}

impl SseDecode for crate::api::api::MessagePart {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <crate::api::api::TextFormat>::sse_decode(deserializer);
                return crate::api::api::MessagePart::Text(var_field0, var_field1);
            }
            1 => {
                let mut var_field0 = <crate::api::api::Attachment>::sse_decode(deserializer);
                return crate::api::api::MessagePart::Attachment(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <String>::sse_decode(deserializer);
                return crate::api::api::MessagePart::Mention(var_field0, var_field1);
            }
            3 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::api::MessagePart::Object(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::MessageParts {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Vec<crate::api::api::IndexedMessagePart>>::sse_decode(deserializer);
        return crate::api::api::MessageParts(var_field0);
    }
}

impl SseDecode for crate::api::api::MessageTarget {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::api::MessageTarget::Token(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::api::MessageTarget::Uuid(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::MessageType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::api::MessageType::IMessage;
            }
            1 => {
                let mut var_isPhone = <bool>::sse_decode(deserializer);
                let mut var_usingNumber = <String>::sse_decode(deserializer);
                let mut var_fromHandle = <Option<String>>::sse_decode(deserializer);
                return crate::api::api::MessageType::SMS {
                    is_phone: var_isPhone,
                    using_number: var_usingNumber,
                    from_handle: var_fromHandle,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::MMCSFile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_signature = <Vec<u8>>::sse_decode(deserializer);
        let mut var_object = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_key = <Vec<u8>>::sse_decode(deserializer);
        let mut var_size = <usize>::sse_decode(deserializer);
        return crate::api::api::MMCSFile {
            signature: var_signature,
            object: var_object,
            url: var_url,
            key: var_key,
            size: var_size,
        };
    }
}

impl SseDecode for crate::api::api::MMCSTransferProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_prog = <usize>::sse_decode(deserializer);
        let mut var_total = <usize>::sse_decode(deserializer);
        let mut var_file = <Option<crate::api::api::MMCSFile>>::sse_decode(deserializer);
        return crate::api::api::MMCSTransferProgress {
            prog: var_prog,
            total: var_total,
            file: var_file,
        };
    }
}

impl SseDecode for crate::api::api::MoveToRecycleBinMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_target = <crate::api::api::DeleteTarget>::sse_decode(deserializer);
        let mut var_recoverableDeleteDate = <u64>::sse_decode(deserializer);
        return crate::api::api::MoveToRecycleBinMessage {
            target: var_target,
            recoverable_delete_date: var_recoverableDeleteDate,
        };
    }
}

impl SseDecode for crate::api::api::MyAsyncRuntime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::api::MyAsyncRuntime();
    }
}

impl SseDecode for crate::api::api::NormalMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_parts = <crate::api::api::MessageParts>::sse_decode(deserializer);
        let mut var_effect = <Option<String>>::sse_decode(deserializer);
        let mut var_replyGuid = <Option<String>>::sse_decode(deserializer);
        let mut var_replyPart = <Option<String>>::sse_decode(deserializer);
        let mut var_service = <crate::api::api::MessageType>::sse_decode(deserializer);
        let mut var_subject = <Option<String>>::sse_decode(deserializer);
        let mut var_app = <Option<crate::api::api::ExtensionApp>>::sse_decode(deserializer);
        let mut var_linkMeta = <Option<crate::api::api::LinkMeta>>::sse_decode(deserializer);
        let mut var_voice = <bool>::sse_decode(deserializer);
        let mut var_scheduled = <Option<crate::api::api::ScheduleMode>>::sse_decode(deserializer);
        return crate::api::api::NormalMessage {
            parts: var_parts,
            effect: var_effect,
            reply_guid: var_replyGuid,
            reply_part: var_replyPart,
            service: var_service,
            subject: var_subject,
            app: var_app,
            link_meta: var_linkMeta,
            voice: var_voice,
            scheduled: var_scheduled,
        };
    }
}

impl SseDecode for crate::api::api::NSDictionaryClass {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::api::NSDictionaryClass::NSDictionary,
            1 => crate::api::api::NSDictionaryClass::NSMutableDictionary,
            _ => unreachable!("Invalid variant for NSDictionaryClass: {}", inner),
        };
    }
}

impl SseDecode for crate::api::api::NSURL {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_base = <String>::sse_decode(deserializer);
        let mut var_relative = <String>::sse_decode(deserializer);
        return crate::api::api::NSURL {
            base: var_base,
            relative: var_relative,
        };
    }
}

impl SseDecode for crate::api::api::OperatedChat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_participants = <Vec<String>>::sse_decode(deserializer);
        let mut var_groupId = <String>::sse_decode(deserializer);
        let mut var_guid = <String>::sse_decode(deserializer);
        let mut var_deleteIncomingMessages = <Option<bool>>::sse_decode(deserializer);
        let mut var_wasReportedAsJunk = <Option<bool>>::sse_decode(deserializer);
        return crate::api::api::OperatedChat {
            participants: var_participants,
            group_id: var_groupId,
            guid: var_guid,
            delete_incoming_messages: var_deleteIncomingMessages,
            was_reported_as_junk: var_wasReportedAsJunk,
        };
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<ConversationLink> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<ConversationLink>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<ConversationParticipant> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<ConversationParticipant>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<IDSUser> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<IDSUser>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<JoinedOSConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<JoinedOSConfig>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<NSArray<LPIconMetadata>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<NSArray<LPIconMetadata>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<NSArray<LPImageMetadata>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<NSArray<LPImageMetadata>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::Address> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::Address>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::Attachment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::Attachment>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::Balloon> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::Balloon>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::ConversationData> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::ConversationData>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::ExtensionApp> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::ExtensionApp>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::FTMode> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::FTMode>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::LinkMeta> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::LinkMeta>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::Location> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::Location>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::LoginState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::LoginState>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::LPIconMetadata> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::LPIconMetadata>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::LPImageMetadata> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::LPImageMetadata>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::MMCSFile> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::MMCSFile>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::NSURL> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::NSURL>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::PartExtension> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::PartExtension>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::PushMessage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::PushMessage>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<(String, u64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<(String, u64)>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::RichLinkImageAttachmentSubstitute> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::api::RichLinkImageAttachmentSubstitute>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::ScheduleMode> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::ScheduleMode>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::SupportAction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::SupportAction>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::SupportAlert> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::SupportAlert>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::api::MessageTarget>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::api::api::MessageTarget>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::api::PartExtension {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_msgWidth = <f64>::sse_decode(deserializer);
                let mut var_rotation = <f64>::sse_decode(deserializer);
                let mut var_sai = <u64>::sse_decode(deserializer);
                let mut var_scale = <f64>::sse_decode(deserializer);
                let mut var_update = <Option<bool>>::sse_decode(deserializer);
                let mut var_sli = <u64>::sse_decode(deserializer);
                let mut var_normalizedX = <f64>::sse_decode(deserializer);
                let mut var_normalizedY = <f64>::sse_decode(deserializer);
                let mut var_version = <u64>::sse_decode(deserializer);
                let mut var_hash = <String>::sse_decode(deserializer);
                let mut var_safi = <u64>::sse_decode(deserializer);
                let mut var_effectType = <i64>::sse_decode(deserializer);
                let mut var_stickerId = <String>::sse_decode(deserializer);
                return crate::api::api::PartExtension::Sticker {
                    msg_width: var_msgWidth,
                    rotation: var_rotation,
                    sai: var_sai,
                    scale: var_scale,
                    update: var_update,
                    sli: var_sli,
                    normalized_x: var_normalizedX,
                    normalized_y: var_normalizedY,
                    version: var_version,
                    hash: var_hash,
                    safi: var_safi,
                    effect_type: var_effectType,
                    sticker_id: var_stickerId,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::PermanentDeleteMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_target = <crate::api::api::DeleteTarget>::sse_decode(deserializer);
        let mut var_isScheduled = <bool>::sse_decode(deserializer);
        return crate::api::api::PermanentDeleteMessage {
            target: var_target,
            is_scheduled: var_isScheduled,
        };
    }
}

impl SseDecode for crate::api::api::PollResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::api::PollResult::Stop;
            }
            1 => {
                let mut var_field0 =
                    <Option<crate::api::api::PushMessage>>::sse_decode(deserializer);
                return crate::api::api::PollResult::Cont(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::PrivateDeviceInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_uuid = <Option<String>>::sse_decode(deserializer);
        let mut var_deviceName = <Option<String>>::sse_decode(deserializer);
        let mut var_token = <Vec<u8>>::sse_decode(deserializer);
        let mut var_isHsaTrusted = <bool>::sse_decode(deserializer);
        let mut var_identites = <Vec<String>>::sse_decode(deserializer);
        let mut var_subServices = <Vec<String>>::sse_decode(deserializer);
        return crate::api::api::PrivateDeviceInfo {
            uuid: var_uuid,
            device_name: var_deviceName,
            token: var_token,
            is_hsa_trusted: var_isHsaTrusted,
            identites: var_identites,
            sub_services: var_subServices,
        };
    }
}

impl SseDecode for crate::api::api::PushMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::api::MessageInst>::sse_decode(deserializer);
                return crate::api::api::PushMessage::IMessage(var_field0);
            }
            1 => {
                let mut var_uuid = <String>::sse_decode(deserializer);
                let mut var_error = <Option<String>>::sse_decode(deserializer);
                return crate::api::api::PushMessage::SendConfirm {
                    uuid: var_uuid,
                    error: var_error,
                };
            }
            2 => {
                let mut var_field0 = <crate::api::api::RegisterState>::sse_decode(deserializer);
                return crate::api::api::PushMessage::RegistrationState(var_field0);
            }
            3 => {
                let mut var_field0 = <crate::api::api::SharedAlbum>::sse_decode(deserializer);
                return crate::api::api::PushMessage::NewPhotostream(var_field0);
            }
            4 => {
                let mut var_field0 = <crate::api::api::FTMessage>::sse_decode(deserializer);
                return crate::api::api::PushMessage::FaceTime(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::ReactMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_toUuid = <String>::sse_decode(deserializer);
        let mut var_toPart = <Option<u64>>::sse_decode(deserializer);
        let mut var_reaction = <crate::api::api::ReactMessageType>::sse_decode(deserializer);
        let mut var_toText = <String>::sse_decode(deserializer);
        return crate::api::api::ReactMessage {
            to_uuid: var_toUuid,
            to_part: var_toPart,
            reaction: var_reaction,
            to_text: var_toText,
        };
    }
}

impl SseDecode for crate::api::api::ReactMessageType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_reaction = <crate::api::api::Reaction>::sse_decode(deserializer);
                let mut var_enable = <bool>::sse_decode(deserializer);
                return crate::api::api::ReactMessageType::React {
                    reaction: var_reaction,
                    enable: var_enable,
                };
            }
            1 => {
                let mut var_spec = <crate::api::api::ExtensionApp>::sse_decode(deserializer);
                let mut var_body = <crate::api::api::MessageParts>::sse_decode(deserializer);
                return crate::api::api::ReactMessageType::Extension {
                    spec: var_spec,
                    body: var_body,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::Reaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::api::Reaction::Heart;
            }
            1 => {
                return crate::api::api::Reaction::Like;
            }
            2 => {
                return crate::api::api::Reaction::Dislike;
            }
            3 => {
                return crate::api::api::Reaction::Laugh;
            }
            4 => {
                return crate::api::api::Reaction::Emphasize;
            }
            5 => {
                return crate::api::api::Reaction::Question;
            }
            6 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::api::Reaction::Emoji(var_field0);
            }
            7 => {
                let mut var_spec =
                    <Option<crate::api::api::ExtensionApp>>::sse_decode(deserializer);
                let mut var_body = <crate::api::api::MessageParts>::sse_decode(deserializer);
                return crate::api::api::Reaction::Sticker {
                    spec: var_spec,
                    body: var_body,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for (Vec<crate::api::api::SharedAlbum>, Vec<String>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Vec<crate::api::api::SharedAlbum>>::sse_decode(deserializer);
        let mut var_field1 = <Vec<String>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        Vec<crate::api::api::TrustedPhoneNumber>,
        Option<crate::api::api::LoginState>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Vec<crate::api::api::TrustedPhoneNumber>>::sse_decode(deserializer);
        let mut var_field1 = <Option<crate::api::api::LoginState>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (crate::api::api::LoginState, Option<IDSUser>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <crate::api::api::LoginState>::sse_decode(deserializer);
        let mut var_field1 = <Option<IDSUser>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        std::collections::HashMap<String, crate::api::api::SyncStatus>,
        Option<(String, u64)>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <std::collections::HashMap<String, crate::api::api::SyncStatus>>::sse_decode(
                deserializer,
            );
        let mut var_field1 = <Option<(String, u64)>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, bool) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <bool>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, crate::api::api::FTParticipant) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::api::FTParticipant>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, crate::api::api::SyncStatus) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::api::SyncStatus>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, u64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <u64>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::api::RegisterState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_nextS = <i64>::sse_decode(deserializer);
                return crate::api::api::RegisterState::Registered { next_s: var_nextS };
            }
            1 => {
                return crate::api::api::RegisterState::Registering;
            }
            2 => {
                let mut var_retryWait = <Option<u64>>::sse_decode(deserializer);
                let mut var_error = <String>::sse_decode(deserializer);
                return crate::api::api::RegisterState::Failed {
                    retry_wait: var_retryWait,
                    error: var_error,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::RegistrationPhase {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::api::RegistrationPhase::WantsOSConfig,
            1 => crate::api::api::RegistrationPhase::WantsRegister,
            2 => crate::api::api::RegistrationPhase::Registered,
            _ => unreachable!("Invalid variant for RegistrationPhase: {}", inner),
        };
    }
}

impl SseDecode for crate::api::api::RenameMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_newName = <String>::sse_decode(deserializer);
        return crate::api::api::RenameMessage {
            new_name: var_newName,
        };
    }
}

impl SseDecode for crate::api::api::RichLinkImageAttachmentSubstitute {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_mimeType = <String>::sse_decode(deserializer);
        let mut var_richLinkImageAttachmentSubstituteIndex = <u64>::sse_decode(deserializer);
        return crate::api::api::RichLinkImageAttachmentSubstitute {
            mime_type: var_mimeType,
            rich_link_image_attachment_substitute_index: var_richLinkImageAttachmentSubstituteIndex,
        };
    }
}

impl SseDecode for crate::api::api::ScheduleMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ms = <u64>::sse_decode(deserializer);
        let mut var_schedule = <bool>::sse_decode(deserializer);
        return crate::api::api::ScheduleMode {
            ms: var_ms,
            schedule: var_schedule,
        };
    }
}

impl SseDecode for crate::api::api::SharedAlbum {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <Option<String>>::sse_decode(deserializer);
        let mut var_fullname = <Option<String>>::sse_decode(deserializer);
        let mut var_email = <Option<String>>::sse_decode(deserializer);
        let mut var_albumguid = <String>::sse_decode(deserializer);
        let mut var_sharingtype = <String>::sse_decode(deserializer);
        let mut var_subscriptiondate = <Option<String>>::sse_decode(deserializer);
        let mut var_albumlocation = <Option<String>>::sse_decode(deserializer);
        let mut var_assets = <Vec<String>>::sse_decode(deserializer);
        let mut var_delete = <Option<String>>::sse_decode(deserializer);
        return crate::api::api::SharedAlbum {
            name: var_name,
            fullname: var_fullname,
            email: var_email,
            albumguid: var_albumguid,
            sharingtype: var_sharingtype,
            subscriptiondate: var_subscriptiondate,
            albumlocation: var_albumlocation,
            assets: var_assets,
            delete: var_delete,
        };
    }
}

impl SseDecode for crate::api::api::SupportAction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_button = <String>::sse_decode(deserializer);
        return crate::api::api::SupportAction {
            url: var_url,
            button: var_button,
        };
    }
}

impl SseDecode for crate::api::api::SupportAlert {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_body = <String>::sse_decode(deserializer);
        let mut var_action = <Option<crate::api::api::SupportAction>>::sse_decode(deserializer);
        return crate::api::api::SupportAlert {
            title: var_title,
            body: var_body,
            action: var_action,
        };
    }
}

impl SseDecode for crate::api::api::SyncStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::api::SyncStatus::Synced;
            }
            1 => {
                let mut var_progress = <usize>::sse_decode(deserializer);
                let mut var_total = <usize>::sse_decode(deserializer);
                return crate::api::api::SyncStatus::Downloading {
                    progress: var_progress,
                    total: var_total,
                };
            }
            2 => {
                let mut var_progress = <usize>::sse_decode(deserializer);
                let mut var_total = <usize>::sse_decode(deserializer);
                return crate::api::api::SyncStatus::Uploading {
                    progress: var_progress,
                    total: var_total,
                };
            }
            3 => {
                return crate::api::api::SyncStatus::Syncing;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::TextEffect {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::api::TextEffect::Big,
            1 => crate::api::api::TextEffect::Small,
            2 => crate::api::api::TextEffect::Shake,
            3 => crate::api::api::TextEffect::Nod,
            4 => crate::api::api::TextEffect::Explode,
            5 => crate::api::api::TextEffect::Ripple,
            6 => crate::api::api::TextEffect::Bloom,
            7 => crate::api::api::TextEffect::Jitter,
            _ => unreachable!("Invalid variant for TextEffect: {}", inner),
        };
    }
}

impl SseDecode for crate::api::api::TextFlags {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bold = <bool>::sse_decode(deserializer);
        let mut var_italic = <bool>::sse_decode(deserializer);
        let mut var_underline = <bool>::sse_decode(deserializer);
        let mut var_strikethrough = <bool>::sse_decode(deserializer);
        return crate::api::api::TextFlags {
            bold: var_bold,
            italic: var_italic,
            underline: var_underline,
            strikethrough: var_strikethrough,
        };
    }
}

impl SseDecode for crate::api::api::TextFormat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::api::TextFlags>::sse_decode(deserializer);
                return crate::api::api::TextFormat::Flags(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::api::TextEffect>::sse_decode(deserializer);
                return crate::api::api::TextFormat::Effect(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::TransferProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_prog = <usize>::sse_decode(deserializer);
        let mut var_total = <usize>::sse_decode(deserializer);
        let mut var_attachment = <Option<crate::api::api::Attachment>>::sse_decode(deserializer);
        return crate::api::api::TransferProgress {
            prog: var_prog,
            total: var_total,
            attachment: var_attachment,
        };
    }
}

impl SseDecode for crate::api::api::TrustedPhoneNumber {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_numberWithDialCode = <String>::sse_decode(deserializer);
        let mut var_lastTwoDigits = <String>::sse_decode(deserializer);
        let mut var_pushMode = <String>::sse_decode(deserializer);
        let mut var_id = <u32>::sse_decode(deserializer);
        return crate::api::api::TrustedPhoneNumber {
            number_with_dial_code: var_numberWithDialCode,
            last_two_digits: var_lastTwoDigits,
            push_mode: var_pushMode,
            id: var_id,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::api::api::UnsendMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tuuid = <String>::sse_decode(deserializer);
        let mut var_editPart = <u64>::sse_decode(deserializer);
        return crate::api::api::UnsendMessage {
            tuuid: var_tuuid,
            edit_part: var_editPart,
        };
    }
}

impl SseDecode for crate::api::api::UpdateExtensionMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_forUuid = <String>::sse_decode(deserializer);
        let mut var_ext = <crate::api::api::PartExtension>::sse_decode(deserializer);
        return crate::api::api::UpdateExtensionMessage {
            for_uuid: var_forUuid,
            ext: var_ext,
        };
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__api__add_album_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__api__api__answer_ft_request_impl(port, ptr, rust_vec_len, data_len),
        3 => wire__crate__api__api__attachment_get_size_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__api__api__auth_phone_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__api__can_find_my_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__api__cancel_facetime_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__crate__api__api__complete_msg_impl(port, ptr, rust_vec_len, data_len),
        8 => wire__crate__api__api__config_from_encoded_impl(port, ptr, rust_vec_len, data_len),
        9 => wire__crate__api__api__config_from_relay_impl(port, ptr, rust_vec_len, data_len),
        10 => wire__crate__api__api__config_from_validation_data_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        11 => wire__crate__api__api__configure_app_review_impl(port, ptr, rust_vec_len, data_len),
        12 => wire__crate__api__api__configure_macos_impl(port, ptr, rust_vec_len, data_len),
        13 => wire__crate__api__api__convert_token_to_uuid_impl(port, ptr, rust_vec_len, data_len),
        14 => wire__crate__api__api__create_facetime_impl(port, ptr, rust_vec_len, data_len),
        15 => wire__crate__api__api__create_icon_array_impl(port, ptr, rust_vec_len, data_len),
        16 => wire__crate__api__api__create_image_array_impl(port, ptr, rust_vec_len, data_len),
        17 => wire__crate__api__api__decline_facetime_impl(port, ptr, rust_vec_len, data_len),
        18 => wire__crate__api__api__do_reregister_impl(port, ptr, rust_vec_len, data_len),
        19 => wire__crate__api__api__download_attachment_impl(port, ptr, rust_vec_len, data_len),
        20 => wire__crate__api__api__download_mmcs_impl(port, ptr, rust_vec_len, data_len),
        21 => {
            wire__crate__api__api__ffi_file_packager_default_impl(port, ptr, rust_vec_len, data_len)
        }
        22 => wire__crate__api__api__ft_sessions_impl(port, ptr, rust_vec_len, data_len),
        23 => wire__crate__api__api__get_2fa_sms_opts_impl(port, ptr, rust_vec_len, data_len),
        24 => wire__crate__api__api__get_albums_impl(port, ptr, rust_vec_len, data_len),
        25 => wire__crate__api__api__get_anisette_headers_impl(port, ptr, rust_vec_len, data_len),
        26 => {
            wire__crate__api__api__get_background_following_impl(port, ptr, rust_vec_len, data_len)
        }
        27 => wire__crate__api__api__get_config_state_impl(port, ptr, rust_vec_len, data_len),
        28 => wire__crate__api__api__get_device_info_impl(port, ptr, rust_vec_len, data_len),
        29 => wire__crate__api__api__get_device_info_state_impl(port, ptr, rust_vec_len, data_len),
        30 => wire__crate__api__api__get_devices_impl(port, ptr, rust_vec_len, data_len),
        31 => wire__crate__api__api__get_following_impl(port, ptr, rust_vec_len, data_len),
        32 => wire__crate__api__api__get_ft_link_impl(port, ptr, rust_vec_len, data_len),
        33 => wire__crate__api__api__get_handles_impl(port, ptr, rust_vec_len, data_len),
        34 => wire__crate__api__api__get_phase_impl(port, ptr, rust_vec_len, data_len),
        35 => wire__crate__api__api__get_regstate_impl(port, ptr, rust_vec_len, data_len),
        36 => wire__crate__api__api__get_sms_targets_impl(port, ptr, rust_vec_len, data_len),
        37 => wire__crate__api__api__get_syncstatus_impl(port, ptr, rust_vec_len, data_len),
        38 => wire__crate__api__api__get_token_impl(port, ptr, rust_vec_len, data_len),
        39 => wire__crate__api__api__get_user_name_impl(port, ptr, rust_vec_len, data_len),
        40 => wire__crate__api__api__invalidate_id_cache_impl(port, ptr, rust_vec_len, data_len),
        41 => wire__crate__api__api__make_find_my_friends_impl(port, ptr, rust_vec_len, data_len),
        42 => wire__crate__api__api__make_find_my_phone_impl(port, ptr, rust_vec_len, data_len),
        43 => wire__crate__api__api__message_parts_raw_text_impl(port, ptr, rust_vec_len, data_len),
        44 => {
            wire__crate__api__api__my_async_runtime_default_impl(port, ptr, rust_vec_len, data_len)
        }
        45 => wire__crate__api__api__new_msg_impl(port, ptr, rust_vec_len, data_len),
        46 => wire__crate__api__api__new_push_state_impl(port, ptr, rust_vec_len, data_len),
        47 => wire__crate__api__api__ptr_to_dart_impl(port, ptr, rust_vec_len, data_len),
        48 => wire__crate__api__api__recv_wait_impl(port, ptr, rust_vec_len, data_len),
        49 => wire__crate__api__api__refresh_background_following_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        50 => wire__crate__api__api__refresh_devices_impl(port, ptr, rust_vec_len, data_len),
        51 => wire__crate__api__api__refresh_following_impl(port, ptr, rust_vec_len, data_len),
        52 => wire__crate__api__api__refresh_token_impl(port, ptr, rust_vec_len, data_len),
        53 => wire__crate__api__api__register_ids_impl(port, ptr, rust_vec_len, data_len),
        54 => wire__crate__api__api__remove_album_impl(port, ptr, rust_vec_len, data_len),
        55 => wire__crate__api__api__reset_state_impl(port, ptr, rust_vec_len, data_len),
        56 => wire__crate__api__api__restore_attachment_impl(port, ptr, rust_vec_len, data_len),
        57 => wire__crate__api__api__restore_user_impl(port, ptr, rust_vec_len, data_len),
        58 => wire__crate__api__api__retry_login_impl(port, ptr, rust_vec_len, data_len),
        59 => wire__crate__api__api__save_attachment_impl(port, ptr, rust_vec_len, data_len),
        60 => wire__crate__api__api__save_user_impl(port, ptr, rust_vec_len, data_len),
        61 => {
            wire__crate__api__api__select_background_friend_impl(port, ptr, rust_vec_len, data_len)
        }
        62 => wire__crate__api__api__select_friend_impl(port, ptr, rust_vec_len, data_len),
        63 => wire__crate__api__api__send_impl(port, ptr, rust_vec_len, data_len),
        64 => wire__crate__api__api__send_2fa_sms_impl(port, ptr, rust_vec_len, data_len),
        65 => wire__crate__api__api__send_2fa_to_devices_impl(port, ptr, rust_vec_len, data_len),
        66 => wire__crate__api__api__service_from_ptr_impl(port, ptr, rust_vec_len, data_len),
        67 => wire__crate__api__api__subscribe_impl(port, ptr, rust_vec_len, data_len),
        68 => wire__crate__api__api__subscribe_token_impl(port, ptr, rust_vec_len, data_len),
        69 => {
            wire__crate__api__api__supports_shared_streams_impl(port, ptr, rust_vec_len, data_len)
        }
        70 => wire__crate__api__api__sync_now_impl(port, ptr, rust_vec_len, data_len),
        71 => wire__crate__api__api__try_auth_impl(port, ptr, rust_vec_len, data_len),
        72 => wire__crate__api__api__unsubscribe_impl(port, ptr, rust_vec_len, data_len),
        73 => wire__crate__api__api__update_account_headers_impl(port, ptr, rust_vec_len, data_len),
        74 => wire__crate__api__api__upload_attachment_impl(port, ptr, rust_vec_len, data_len),
        75 => wire__crate__api__api__upload_mmcs_impl(port, ptr, rust_vec_len, data_len),
        76 => wire__crate__api__api__use_link_for_impl(port, ptr, rust_vec_len, data_len),
        77 => wire__crate__api__api__validate_cert_impl(port, ptr, rust_vec_len, data_len),
        78 => wire__crate__api__api__validate_relay_impl(port, ptr, rust_vec_len, data_len),
        79 => wire__crate__api__api__validate_targets_impl(port, ptr, rust_vec_len, data_len),
        80 => {
            wire__crate__api__api__validate_targets_facetime_impl(port, ptr, rust_vec_len, data_len)
        }
        81 => wire__crate__api__api__verify_2fa_impl(port, ptr, rust_vec_len, data_len),
        82 => wire__crate__api__api__verify_2fa_sms_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Arc<PushState>> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Arc<PushState>> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Arc<PushState>>> for Arc<PushState> {
    fn into_into_dart(self) -> FrbWrapper<Arc<PushState>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ConversationLink> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ConversationLink> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ConversationLink>> for ConversationLink {
    fn into_into_dart(self) -> FrbWrapper<ConversationLink> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ConversationParticipant> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<ConversationParticipant>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ConversationParticipant>>
    for ConversationParticipant
{
    fn into_into_dart(self) -> FrbWrapper<ConversationParticipant> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<FindMyFriendsClient<DefaultAnisetteProvider>> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<FindMyFriendsClient<DefaultAnisetteProvider>>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<FindMyFriendsClient<DefaultAnisetteProvider>>>
    for FindMyFriendsClient<DefaultAnisetteProvider>
{
    fn into_into_dart(self) -> FrbWrapper<FindMyFriendsClient<DefaultAnisetteProvider>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<FindMyPhoneClient<DefaultAnisetteProvider>> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<FindMyPhoneClient<DefaultAnisetteProvider>>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<FindMyPhoneClient<DefaultAnisetteProvider>>>
    for FindMyPhoneClient<DefaultAnisetteProvider>
{
    fn into_into_dart(self) -> FrbWrapper<FindMyPhoneClient<DefaultAnisetteProvider>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<IDSUser> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<IDSUser> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<IDSUser>> for IDSUser {
    fn into_into_dart(self) -> FrbWrapper<IDSUser> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<JoinedOSConfig> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<JoinedOSConfig> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<JoinedOSConfig>> for JoinedOSConfig {
    fn into_into_dart(self) -> FrbWrapper<JoinedOSConfig> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<NSArray<LPIconMetadata>> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<NSArray<LPIconMetadata>>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<NSArray<LPIconMetadata>>>
    for NSArray<LPIconMetadata>
{
    fn into_into_dart(self) -> FrbWrapper<NSArray<LPIconMetadata>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<NSArray<LPImageMetadata>> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<NSArray<LPImageMetadata>>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<NSArray<LPImageMetadata>>>
    for NSArray<LPImageMetadata>
{
    fn into_into_dart(self) -> FrbWrapper<NSArray<LPImageMetadata>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<VerifyBody> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<VerifyBody> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<VerifyBody>> for VerifyBody {
    fn into_into_dart(self) -> FrbWrapper<VerifyBody> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::Address> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.administrative_area.into_into_dart().into_dart(),
            self.0.country.into_into_dart().into_dart(),
            self.0.country_code.into_into_dart().into_dart(),
            self.0.formatted_address_lines.into_into_dart().into_dart(),
            self.0.locality.into_into_dart().into_dart(),
            self.0.state_code.into_into_dart().into_dart(),
            self.0.street_address.into_into_dart().into_dart(),
            self.0.street_name.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::Address>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::Address>>
    for crate::api::api::Address
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::Address> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::Attachment> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.a_type.into_into_dart().into_dart(),
            self.0.part.into_into_dart().into_dart(),
            self.0.uti_type.into_into_dart().into_dart(),
            self.0.mime.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.iris.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::Attachment>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::Attachment>>
    for crate::api::api::Attachment
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::Attachment> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::AttachmentType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::AttachmentType::Inline(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::AttachmentType::MMCS(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::AttachmentType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::AttachmentType>>
    for crate::api::api::AttachmentType
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::AttachmentType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::Balloon> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.url.into_into_dart().into_dart(),
            self.0.session.into_into_dart().into_dart(),
            self.0.layout.into_into_dart().into_dart(),
            self.0.ld_text.into_into_dart().into_dart(),
            self.0.is_live.into_into_dart().into_dart(),
            self.0.icon.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::Balloon>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::Balloon>>
    for crate::api::api::Balloon
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::Balloon> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::BalloonLayout> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::BalloonLayout::TemplateLayout {
                image_subtitle,
                image_title,
                caption,
                secondary_subcaption,
                tertiary_subcaption,
                subcaption,
                class,
            } => [
                0.into_dart(),
                image_subtitle.into_into_dart().into_dart(),
                image_title.into_into_dart().into_dart(),
                caption.into_into_dart().into_dart(),
                secondary_subcaption.into_into_dart().into_dart(),
                tertiary_subcaption.into_into_dart().into_dart(),
                subcaption.into_into_dart().into_dart(),
                class.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::BalloonLayout>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::BalloonLayout>>
    for crate::api::api::BalloonLayout
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::BalloonLayout> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::ChangeParticipantMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.new_participants.into_into_dart().into_dart(),
            self.0.group_version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::ChangeParticipantMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::ChangeParticipantMessage>>
    for crate::api::api::ChangeParticipantMessage
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::ChangeParticipantMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::ConversationData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.participants.into_into_dart().into_dart(),
            self.0.cv_name.into_into_dart().into_dart(),
            self.0.sender_guid.into_into_dart().into_dart(),
            self.0.after_guid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::ConversationData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::ConversationData>>
    for crate::api::api::ConversationData
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::ConversationData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::DeleteTarget> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::DeleteTarget::Chat(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DeleteTarget::Messages(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::DeleteTarget>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::DeleteTarget>>
    for crate::api::api::DeleteTarget
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::DeleteTarget> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DeviceInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.serial.into_into_dart().into_dart(),
            self.os_version.into_into_dart().into_dart(),
            self.encoded_data.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::api::DeviceInfo {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DeviceInfo>
    for crate::api::api::DeviceInfo
{
    fn into_into_dart(self) -> crate::api::api::DeviceInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::EditMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.tuuid.into_into_dart().into_dart(),
            self.0.edit_part.into_into_dart().into_dart(),
            self.0.new_parts.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::EditMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::EditMessage>>
    for crate::api::api::EditMessage
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::EditMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::ErrorMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.for_uuid.into_into_dart().into_dart(),
            self.0.status.into_into_dart().into_dart(),
            self.0.status_str.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::ErrorMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::ErrorMessage>>
    for crate::api::api::ErrorMessage
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::ErrorMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::ExtensionApp> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.name.into_into_dart().into_dart(),
            self.0.app_id.into_into_dart().into_dart(),
            self.0.bundle_id.into_into_dart().into_dart(),
            self.0.balloon.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::ExtensionApp>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::ExtensionApp>>
    for crate::api::api::ExtensionApp
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::ExtensionApp> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::FFIFilePackager {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::FFIFilePackager
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::FFIFilePackager>
    for crate::api::api::FFIFilePackager
{
    fn into_into_dart(self) -> crate::api::api::FFIFilePackager {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::Follow> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.create_timestamp.into_into_dart().into_dart(),
            self.0.expires.into_into_dart().into_dart(),
            self.0.id.into_into_dart().into_dart(),
            self.0
                .invitation_accepted_handles
                .into_into_dart()
                .into_dart(),
            self.0.invitation_from_handles.into_into_dart().into_dart(),
            self.0.is_from_messages.into_into_dart().into_dart(),
            self.0.offer_id.into_into_dart().into_dart(),
            self.0.only_in_event.into_into_dart().into_dart(),
            self.0.person_id_hash.into_into_dart().into_dart(),
            self.0.secure_locations_capable.into_into_dart().into_dart(),
            self.0
                .shallow_or_live_secure_locations_capable
                .into_into_dart()
                .into_dart(),
            self.0.source.into_into_dart().into_dart(),
            self.0.tk_permission.into_into_dart().into_dart(),
            self.0.update_timestamp.into_into_dart().into_dart(),
            self.0
                .fallback_to_legacy_allowed
                .into_into_dart()
                .into_dart(),
            self.0.opted_not_to_share.into_into_dart().into_dart(),
            self.0.last_location.into_into_dart().into_dart(),
            self.0.locate_in_progress.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::Follow>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::Follow>>
    for crate::api::api::Follow
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::Follow> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::FoundDevice> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.device_model.into_into_dart().into_dart(),
            self.0.low_power_mode.into_into_dart().into_dart(),
            self.0.passcode_length.into_into_dart().into_dart(),
            self.0.id.into_into_dart().into_dart(),
            self.0.battery_status.into_into_dart().into_dart(),
            self.0.lost_mode_capable.into_into_dart().into_dart(),
            self.0.battery_level.into_into_dart().into_dart(),
            self.0.location_enabled.into_into_dart().into_dart(),
            self.0.is_considered_accessory.into_into_dart().into_dart(),
            self.0.location.into_into_dart().into_dart(),
            self.0.model_display_name.into_into_dart().into_dart(),
            self.0.device_color.into_into_dart().into_dart(),
            self.0.activation_locked.into_into_dart().into_dart(),
            self.0.rm2_state.into_into_dart().into_dart(),
            self.0.loc_found_enabled.into_into_dart().into_dart(),
            self.0.nwd.into_into_dart().into_dart(),
            self.0.device_status.into_into_dart().into_dart(),
            self.0.fmly_share.into_into_dart().into_dart(),
            self.0.features.into_into_dart().into_dart(),
            self.0.this_device.into_into_dart().into_dart(),
            self.0.lost_mode_enabled.into_into_dart().into_dart(),
            self.0.device_display_name.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.can_wipe_after_lock.into_into_dart().into_dart(),
            self.0.is_mac.into_into_dart().into_dart(),
            self.0.raw_device_model.into_into_dart().into_dart(),
            self.0.ba_uuid.into_into_dart().into_dart(),
            self.0.device_discovery_id.into_into_dart().into_dart(),
            self.0.scd.into_into_dart().into_dart(),
            self.0.location_capable.into_into_dart().into_dart(),
            self.0.wipe_in_progress.into_into_dart().into_dart(),
            self.0.dark_wake.into_into_dart().into_dart(),
            self.0.device_with_you.into_into_dart().into_dart(),
            self.0.max_msg_char.into_into_dart().into_dart(),
            self.0.device_class.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::FoundDevice>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::FoundDevice>>
    for crate::api::api::FoundDevice
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::FoundDevice> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::FTMember> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.nickname.into_into_dart().into_dart(),
            self.0.handle.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::FTMember>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::FTMember>>
    for crate::api::api::FTMember
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::FTMember> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::FTMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::FTMessage::LetMeInRequest(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::FTMessage::LinkChanged { guid } => {
                [1.into_dart(), guid.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::FTMessage::JoinEvent {
                guid,
                participant,
                handle,
                ring,
            } => [
                2.into_dart(),
                guid.into_into_dart().into_dart(),
                participant.into_into_dart().into_dart(),
                handle.into_into_dart().into_dart(),
                ring.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::api::FTMessage::AddMembers {
                guid,
                members,
                ring,
            } => [
                3.into_dart(),
                guid.into_into_dart().into_dart(),
                members.into_into_dart().into_dart(),
                ring.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::api::FTMessage::RemoveMembers { guid, members } => [
                4.into_dart(),
                guid.into_into_dart().into_dart(),
                members.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::api::FTMessage::LeaveEvent {
                guid,
                participant,
                handle,
            } => [
                5.into_dart(),
                guid.into_into_dart().into_dart(),
                participant.into_into_dart().into_dart(),
                handle.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::api::FTMessage::Ring { guid } => {
                [6.into_dart(), guid.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::FTMessage::Decline { guid } => {
                [7.into_dart(), guid.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::FTMessage::RespondedElsewhere { guid } => {
                [8.into_dart(), guid.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::FTMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::FTMessage>>
    for crate::api::api::FTMessage
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::FTMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::FTMode> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::FTMode::Outgoing => 0.into_dart(),
            crate::api::api::FTMode::Incoming => 1.into_dart(),
            crate::api::api::FTMode::Missed => 2.into_dart(),
            crate::api::api::FTMode::MissedOutgoing => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::FTMode>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::FTMode>>
    for crate::api::api::FTMode
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::FTMode> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::FTParticipant> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.token.into_into_dart().into_dart(),
            self.0.handle.into_into_dart().into_dart(),
            self.0.participant_id.into_into_dart().into_dart(),
            self.0.last_join_date.into_into_dart().into_dart(),
            self.0.active.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::FTParticipant>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::FTParticipant>>
    for crate::api::api::FTParticipant
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::FTParticipant> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::FTSession> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.group_id.into_into_dart().into_dart(),
            self.0.my_handles.into_into_dart().into_dart(),
            self.0.participants.into_into_dart().into_dart(),
            self.0.link.into_into_dart().into_dart(),
            self.0.members.into_into_dart().into_dart(),
            self.0.report_id.into_into_dart().into_dart(),
            self.0.start_time.into_into_dart().into_dart(),
            self.0.last_rekey.into_into_dart().into_dart(),
            self.0.is_propped.into_into_dart().into_dart(),
            self.0.is_ringing_inaccurate.into_into_dart().into_dart(),
            self.0.mode.into_into_dart().into_dart(),
            self.0.recent_member_adds.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::FTSession>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::FTSession>>
    for crate::api::api::FTSession
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::FTSession> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::HwExtra {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.version.into_into_dart().into_dart(),
            self.protocol_version.into_into_dart().into_dart(),
            self.device_id.into_into_dart().into_dart(),
            self.icloud_ua.into_into_dart().into_dart(),
            self.aoskit_version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::api::HwExtra {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::HwExtra> for crate::api::api::HwExtra {
    fn into_into_dart(self) -> crate::api::api::HwExtra {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::IconChangeMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.file.into_into_dart().into_dart(),
            self.0.group_version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::IconChangeMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::IconChangeMessage>>
    for crate::api::api::IconChangeMessage
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::IconChangeMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::IndexedMessagePart> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.part.into_into_dart().into_dart(),
            self.0.idx.into_into_dart().into_dart(),
            self.0.ext.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::IndexedMessagePart>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::IndexedMessagePart>>
    for crate::api::api::IndexedMessagePart
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::IndexedMessagePart> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::LetMeInRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.shared_secret.into_into_dart().into_dart(),
            self.0.pseud.into_into_dart().into_dart(),
            self.0.requestor.into_into_dart().into_dart(),
            self.0.nickname.into_into_dart().into_dart(),
            self.0.token.into_into_dart().into_dart(),
            self.0.delegation_uuid.into_into_dart().into_dart(),
            self.0.usage.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::LetMeInRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::LetMeInRequest>>
    for crate::api::api::LetMeInRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::LetMeInRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::LinkMeta> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.data.into_into_dart().into_dart(),
            self.0.attachments.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::LinkMeta>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::LinkMeta>>
    for crate::api::api::LinkMeta
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::LinkMeta> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::Location> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.address.into_into_dart().into_dart(),
            self.0.altitude.into_into_dart().into_dart(),
            self.0.floor_level.into_into_dart().into_dart(),
            self.0.horizontal_accuracy.into_into_dart().into_dart(),
            self.0.is_inaccurate.into_into_dart().into_dart(),
            self.0.latitude.into_into_dart().into_dart(),
            self.0.location_id.into_into_dart().into_dart(),
            self.0.location_timestamp.into_into_dart().into_dart(),
            self.0.longitude.into_into_dart().into_dart(),
            self.0.secure_location_ts.into_into_dart().into_dart(),
            self.0.timestamp.into_into_dart().into_dart(),
            self.0.vertical_accuracy.into_into_dart().into_dart(),
            self.0.position_type.into_into_dart().into_dart(),
            self.0.is_old.into_into_dart().into_dart(),
            self.0.location_finished.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::Location>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::Location>>
    for crate::api::api::Location
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::Location> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::LoginState> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::LoginState::LoggedIn => [0.into_dart()].into_dart(),
            crate::api::api::LoginState::NeedsDevice2FA => [1.into_dart()].into_dart(),
            crate::api::api::LoginState::Needs2FAVerification => [2.into_dart()].into_dart(),
            crate::api::api::LoginState::NeedsSMS2FA => [3.into_dart()].into_dart(),
            crate::api::api::LoginState::NeedsSMS2FAVerification(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::LoginState::NeedsExtraStep(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::LoginState::NeedsLogin => [6.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::LoginState>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::LoginState>>
    for crate::api::api::LoginState
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::LoginState> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::LPIconMetadata> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.url.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::LPIconMetadata>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::LPIconMetadata>>
    for crate::api::api::LPIconMetadata
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::LPIconMetadata> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::LPImageMetadata> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.size.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::LPImageMetadata>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::LPImageMetadata>>
    for crate::api::api::LPImageMetadata
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::LPImageMetadata> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::LPLinkMetadata> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.image_metadata.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
            self.0.icon_metadata.into_into_dart().into_dart(),
            self.0.original_url.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.title.into_into_dart().into_dart(),
            self.0.summary.into_into_dart().into_dart(),
            self.0.image.into_into_dart().into_dart(),
            self.0.icon.into_into_dart().into_dart(),
            self.0.images.into_into_dart().into_dart(),
            self.0.icons.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::LPLinkMetadata>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::LPLinkMetadata>>
    for crate::api::api::LPLinkMetadata
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::LPLinkMetadata> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::Message> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::Message::Message(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::RenameMessage(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::ChangeParticipants(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::React(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::Delivered => [4.into_dart()].into_dart(),
            crate::api::api::Message::Read => [5.into_dart()].into_dart(),
            crate::api::api::Message::Typing => [6.into_dart()].into_dart(),
            crate::api::api::Message::Unsend(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::Edit(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::IconChange(field0) => {
                [9.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::StopTyping => [10.into_dart()].into_dart(),
            crate::api::api::Message::EnableSmsActivation(field0) => {
                [11.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::MessageReadOnDevice => [12.into_dart()].into_dart(),
            crate::api::api::Message::SmsConfirmSent(field0) => {
                [13.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::MarkUnread => [14.into_dart()].into_dart(),
            crate::api::api::Message::PeerCacheInvalidate => [15.into_dart()].into_dart(),
            crate::api::api::Message::UpdateExtension(field0) => {
                [16.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::Error(field0) => {
                [17.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::MoveToRecycleBin(field0) => {
                [18.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::RecoverChat(field0) => {
                [19.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::PermanentDelete(field0) => {
                [20.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Message::Unschedule => [21.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::Message>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::Message>>
    for crate::api::api::Message
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::Message> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::MessageInst> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.sender.into_into_dart().into_dart(),
            self.0.conversation.into_into_dart().into_dart(),
            self.0.message.into_into_dart().into_dart(),
            self.0.sent_timestamp.into_into_dart().into_dart(),
            self.0.target.into_into_dart().into_dart(),
            self.0.send_delivered.into_into_dart().into_dart(),
            self.0.verification_failed.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::MessageInst>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::MessageInst>>
    for crate::api::api::MessageInst
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::MessageInst> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::MessagePart> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::MessagePart::Text(field0, field1) => [
                0.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::api::MessagePart::Attachment(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::MessagePart::Mention(field0, field1) => [
                2.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::api::MessagePart::Object(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::MessagePart>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::MessagePart>>
    for crate::api::api::MessagePart
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::MessagePart> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::MessageParts> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::MessageParts>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::MessageParts>>
    for crate::api::api::MessageParts
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::MessageParts> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::MessageTarget> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::MessageTarget::Token(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::MessageTarget::Uuid(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::MessageTarget>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::MessageTarget>>
    for crate::api::api::MessageTarget
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::MessageTarget> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::MessageType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::MessageType::IMessage => [0.into_dart()].into_dart(),
            crate::api::api::MessageType::SMS {
                is_phone,
                using_number,
                from_handle,
            } => [
                1.into_dart(),
                is_phone.into_into_dart().into_dart(),
                using_number.into_into_dart().into_dart(),
                from_handle.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::MessageType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::MessageType>>
    for crate::api::api::MessageType
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::MessageType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::MMCSFile> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.signature.into_into_dart().into_dart(),
            self.0.object.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.key.into_into_dart().into_dart(),
            self.0.size.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::MMCSFile>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::MMCSFile>>
    for crate::api::api::MMCSFile
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::MMCSFile> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::MMCSTransferProgress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.prog.into_into_dart().into_dart(),
            self.total.into_into_dart().into_dart(),
            self.file.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::MMCSTransferProgress
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::MMCSTransferProgress>
    for crate::api::api::MMCSTransferProgress
{
    fn into_into_dart(self) -> crate::api::api::MMCSTransferProgress {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::MoveToRecycleBinMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.target.into_into_dart().into_dart(),
            self.0.recoverable_delete_date.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::MoveToRecycleBinMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::MoveToRecycleBinMessage>>
    for crate::api::api::MoveToRecycleBinMessage
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::MoveToRecycleBinMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::MyAsyncRuntime {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::MyAsyncRuntime
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::MyAsyncRuntime>
    for crate::api::api::MyAsyncRuntime
{
    fn into_into_dart(self) -> crate::api::api::MyAsyncRuntime {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::NormalMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.parts.into_into_dart().into_dart(),
            self.0.effect.into_into_dart().into_dart(),
            self.0.reply_guid.into_into_dart().into_dart(),
            self.0.reply_part.into_into_dart().into_dart(),
            self.0.service.into_into_dart().into_dart(),
            self.0.subject.into_into_dart().into_dart(),
            self.0.app.into_into_dart().into_dart(),
            self.0.link_meta.into_into_dart().into_dart(),
            self.0.voice.into_into_dart().into_dart(),
            self.0.scheduled.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::NormalMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::NormalMessage>>
    for crate::api::api::NormalMessage
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::NormalMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::NSDictionaryClass> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::NSDictionaryClass::NSDictionary => 0.into_dart(),
            crate::api::api::NSDictionaryClass::NSMutableDictionary => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::NSDictionaryClass>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::NSDictionaryClass>>
    for crate::api::api::NSDictionaryClass
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::NSDictionaryClass> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::NSURL> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.base.into_into_dart().into_dart(),
            self.0.relative.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::NSURL>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::NSURL>>
    for crate::api::api::NSURL
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::NSURL> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::OperatedChat> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.participants.into_into_dart().into_dart(),
            self.0.group_id.into_into_dart().into_dart(),
            self.0.guid.into_into_dart().into_dart(),
            self.0.delete_incoming_messages.into_into_dart().into_dart(),
            self.0.was_reported_as_junk.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::OperatedChat>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::OperatedChat>>
    for crate::api::api::OperatedChat
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::OperatedChat> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::PartExtension> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::PartExtension::Sticker {
                msg_width,
                rotation,
                sai,
                scale,
                update,
                sli,
                normalized_x,
                normalized_y,
                version,
                hash,
                safi,
                effect_type,
                sticker_id,
            } => [
                0.into_dart(),
                msg_width.into_into_dart().into_dart(),
                rotation.into_into_dart().into_dart(),
                sai.into_into_dart().into_dart(),
                scale.into_into_dart().into_dart(),
                update.into_into_dart().into_dart(),
                sli.into_into_dart().into_dart(),
                normalized_x.into_into_dart().into_dart(),
                normalized_y.into_into_dart().into_dart(),
                version.into_into_dart().into_dart(),
                hash.into_into_dart().into_dart(),
                safi.into_into_dart().into_dart(),
                effect_type.into_into_dart().into_dart(),
                sticker_id.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::PartExtension>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::PartExtension>>
    for crate::api::api::PartExtension
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::PartExtension> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::PermanentDeleteMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.target.into_into_dart().into_dart(),
            self.0.is_scheduled.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::PermanentDeleteMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::PermanentDeleteMessage>>
    for crate::api::api::PermanentDeleteMessage
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::PermanentDeleteMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::PollResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::PollResult::Stop => [0.into_dart()].into_dart(),
            crate::api::api::PollResult::Cont(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::api::PollResult {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::PollResult>
    for crate::api::api::PollResult
{
    fn into_into_dart(self) -> crate::api::api::PollResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::PrivateDeviceInfo> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.uuid.into_into_dart().into_dart(),
            self.0.device_name.into_into_dart().into_dart(),
            self.0.token.into_into_dart().into_dart(),
            self.0.is_hsa_trusted.into_into_dart().into_dart(),
            self.0.identites.into_into_dart().into_dart(),
            self.0.sub_services.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::PrivateDeviceInfo>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::PrivateDeviceInfo>>
    for crate::api::api::PrivateDeviceInfo
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::PrivateDeviceInfo> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::PushMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::PushMessage::IMessage(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::PushMessage::SendConfirm { uuid, error } => [
                1.into_dart(),
                uuid.into_into_dart().into_dart(),
                error.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::api::PushMessage::RegistrationState(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::PushMessage::NewPhotostream(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::PushMessage::FaceTime(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::api::PushMessage {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::PushMessage>
    for crate::api::api::PushMessage
{
    fn into_into_dart(self) -> crate::api::api::PushMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::ReactMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.to_uuid.into_into_dart().into_dart(),
            self.0.to_part.into_into_dart().into_dart(),
            self.0.reaction.into_into_dart().into_dart(),
            self.0.to_text.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::ReactMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::ReactMessage>>
    for crate::api::api::ReactMessage
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::ReactMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::ReactMessageType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::ReactMessageType::React { reaction, enable } => [
                0.into_dart(),
                reaction.into_into_dart().into_dart(),
                enable.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::api::ReactMessageType::Extension { spec, body } => [
                1.into_dart(),
                spec.into_into_dart().into_dart(),
                body.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::ReactMessageType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::ReactMessageType>>
    for crate::api::api::ReactMessageType
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::ReactMessageType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::Reaction> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::Reaction::Heart => [0.into_dart()].into_dart(),
            crate::api::api::Reaction::Like => [1.into_dart()].into_dart(),
            crate::api::api::Reaction::Dislike => [2.into_dart()].into_dart(),
            crate::api::api::Reaction::Laugh => [3.into_dart()].into_dart(),
            crate::api::api::Reaction::Emphasize => [4.into_dart()].into_dart(),
            crate::api::api::Reaction::Question => [5.into_dart()].into_dart(),
            crate::api::api::Reaction::Emoji(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::Reaction::Sticker { spec, body } => [
                7.into_dart(),
                spec.into_into_dart().into_dart(),
                body.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::Reaction>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::Reaction>>
    for crate::api::api::Reaction
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::Reaction> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::RegisterState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::RegisterState::Registered { next_s } => {
                [0.into_dart(), next_s.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::RegisterState::Registering => [1.into_dart()].into_dart(),
            crate::api::api::RegisterState::Failed { retry_wait, error } => [
                2.into_dart(),
                retry_wait.into_into_dart().into_dart(),
                error.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::RegisterState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::RegisterState>
    for crate::api::api::RegisterState
{
    fn into_into_dart(self) -> crate::api::api::RegisterState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::RegistrationPhase {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::WantsOSConfig => 0.into_dart(),
            Self::WantsRegister => 1.into_dart(),
            Self::Registered => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::RegistrationPhase
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::RegistrationPhase>
    for crate::api::api::RegistrationPhase
{
    fn into_into_dart(self) -> crate::api::api::RegistrationPhase {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::RenameMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.new_name.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::RenameMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::RenameMessage>>
    for crate::api::api::RenameMessage
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::RenameMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<crate::api::api::RichLinkImageAttachmentSubstitute>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.mime_type.into_into_dart().into_dart(),
            self.0
                .rich_link_image_attachment_substitute_index
                .into_into_dart()
                .into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::RichLinkImageAttachmentSubstitute>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<crate::api::api::RichLinkImageAttachmentSubstitute>,
    > for crate::api::api::RichLinkImageAttachmentSubstitute
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::RichLinkImageAttachmentSubstitute> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::ScheduleMode> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.ms.into_into_dart().into_dart(),
            self.0.schedule.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::ScheduleMode>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::ScheduleMode>>
    for crate::api::api::ScheduleMode
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::ScheduleMode> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::SharedAlbum> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.name.into_into_dart().into_dart(),
            self.0.fullname.into_into_dart().into_dart(),
            self.0.email.into_into_dart().into_dart(),
            self.0.albumguid.into_into_dart().into_dart(),
            self.0.sharingtype.into_into_dart().into_dart(),
            self.0.subscriptiondate.into_into_dart().into_dart(),
            self.0.albumlocation.into_into_dart().into_dart(),
            self.0.assets.into_into_dart().into_dart(),
            self.0.delete.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::SharedAlbum>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::SharedAlbum>>
    for crate::api::api::SharedAlbum
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::SharedAlbum> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::SupportAction> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.url.into_into_dart().into_dart(),
            self.0.button.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::SupportAction>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::SupportAction>>
    for crate::api::api::SupportAction
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::SupportAction> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::SupportAlert> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.title.into_into_dart().into_dart(),
            self.0.body.into_into_dart().into_dart(),
            self.0.action.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::SupportAlert>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::SupportAlert>>
    for crate::api::api::SupportAlert
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::SupportAlert> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::SyncStatus> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::SyncStatus::Synced => [0.into_dart()].into_dart(),
            crate::api::api::SyncStatus::Downloading { progress, total } => [
                1.into_dart(),
                progress.into_into_dart().into_dart(),
                total.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::api::SyncStatus::Uploading { progress, total } => [
                2.into_dart(),
                progress.into_into_dart().into_dart(),
                total.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::api::SyncStatus::Syncing => [3.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::SyncStatus>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::SyncStatus>>
    for crate::api::api::SyncStatus
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::SyncStatus> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::TextEffect> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::TextEffect::Big => 0.into_dart(),
            crate::api::api::TextEffect::Small => 1.into_dart(),
            crate::api::api::TextEffect::Shake => 2.into_dart(),
            crate::api::api::TextEffect::Nod => 3.into_dart(),
            crate::api::api::TextEffect::Explode => 4.into_dart(),
            crate::api::api::TextEffect::Ripple => 5.into_dart(),
            crate::api::api::TextEffect::Bloom => 6.into_dart(),
            crate::api::api::TextEffect::Jitter => 7.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::TextEffect>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::TextEffect>>
    for crate::api::api::TextEffect
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::TextEffect> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::TextFlags> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.bold.into_into_dart().into_dart(),
            self.0.italic.into_into_dart().into_dart(),
            self.0.underline.into_into_dart().into_dart(),
            self.0.strikethrough.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::TextFlags>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::TextFlags>>
    for crate::api::api::TextFlags
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::TextFlags> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::TextFormat> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::TextFormat::Flags(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::TextFormat::Effect(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::TextFormat>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::TextFormat>>
    for crate::api::api::TextFormat
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::TextFormat> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::TransferProgress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.prog.into_into_dart().into_dart(),
            self.total.into_into_dart().into_dart(),
            self.attachment.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::TransferProgress
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::TransferProgress>
    for crate::api::api::TransferProgress
{
    fn into_into_dart(self) -> crate::api::api::TransferProgress {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::TrustedPhoneNumber> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.number_with_dial_code.into_into_dart().into_dart(),
            self.0.last_two_digits.into_into_dart().into_dart(),
            self.0.push_mode.into_into_dart().into_dart(),
            self.0.id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::TrustedPhoneNumber>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::TrustedPhoneNumber>>
    for crate::api::api::TrustedPhoneNumber
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::TrustedPhoneNumber> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::UnsendMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.tuuid.into_into_dart().into_dart(),
            self.0.edit_part.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::UnsendMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::UnsendMessage>>
    for crate::api::api::UnsendMessage
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::UnsendMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::UpdateExtensionMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.for_uuid.into_into_dart().into_dart(),
            self.0.ext.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::UpdateExtensionMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::UpdateExtensionMessage>>
    for crate::api::api::UpdateExtensionMessage
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::UpdateExtensionMessage> {
        self.into()
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for Arc<PushState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for ConversationLink {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationLink>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for ConversationParticipant {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationParticipant>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for FindMyFriendsClient<DefaultAnisetteProvider> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                FindMyFriendsClient<DefaultAnisetteProvider>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for FindMyPhoneClient<DefaultAnisetteProvider> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                FindMyPhoneClient<DefaultAnisetteProvider>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for IDSUser {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IDSUser>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for JoinedOSConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<JoinedOSConfig>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for NSArray<LPIconMetadata> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray<LPIconMetadata>>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NSArray<LPImageMetadata> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray<LPImageMetadata>>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for VerifyBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, u64)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, bool)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, crate::api::api::FTParticipant> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, crate::api::api::FTParticipant)>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode for std::collections::HashMap<String, crate::api::api::SyncStatus> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, crate::api::api::SyncStatus)>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationLink>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationParticipant>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            FindMyFriendsClient<DefaultAnisetteProvider>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            FindMyPhoneClient<DefaultAnisetteProvider>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IDSUser>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<JoinedOSConfig>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray<LPIconMetadata>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray<LPImageMetadata>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for std::collections::HashSet<crate::api::api::FTMember> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::api::FTMember>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for StreamSink<
        crate::api::api::MMCSTransferProgress,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<crate::api::api::TransferProgress, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::api::Address {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.administrative_area, serializer);
        <String>::sse_encode(self.country, serializer);
        <String>::sse_encode(self.country_code, serializer);
        <Option<Vec<String>>>::sse_encode(self.formatted_address_lines, serializer);
        <Option<String>>::sse_encode(self.locality, serializer);
        <Option<String>>::sse_encode(self.state_code, serializer);
        <Option<String>>::sse_encode(self.street_address, serializer);
        <Option<String>>::sse_encode(self.street_name, serializer);
    }
}

impl SseEncode for crate::api::api::Attachment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::api::AttachmentType>::sse_encode(self.a_type, serializer);
        <u64>::sse_encode(self.part, serializer);
        <String>::sse_encode(self.uti_type, serializer);
        <String>::sse_encode(self.mime, serializer);
        <String>::sse_encode(self.name, serializer);
        <bool>::sse_encode(self.iris, serializer);
    }
}

impl SseEncode for crate::api::api::AttachmentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::AttachmentType::Inline(field0) => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::api::AttachmentType::MMCS(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::api::MMCSFile>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::Balloon {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.url, serializer);
        <Option<String>>::sse_encode(self.session, serializer);
        <crate::api::api::BalloonLayout>::sse_encode(self.layout, serializer);
        <Option<String>>::sse_encode(self.ld_text, serializer);
        <bool>::sse_encode(self.is_live, serializer);
        <Vec<u8>>::sse_encode(self.icon, serializer);
    }
}

impl SseEncode for crate::api::api::BalloonLayout {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::BalloonLayout::TemplateLayout {
                image_subtitle,
                image_title,
                caption,
                secondary_subcaption,
                tertiary_subcaption,
                subcaption,
                class,
            } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(image_subtitle, serializer);
                <String>::sse_encode(image_title, serializer);
                <String>::sse_encode(caption, serializer);
                <String>::sse_encode(secondary_subcaption, serializer);
                <String>::sse_encode(tertiary_subcaption, serializer);
                <String>::sse_encode(subcaption, serializer);
                <crate::api::api::NSDictionaryClass>::sse_encode(class, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::api::ChangeParticipantMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.new_participants, serializer);
        <u64>::sse_encode(self.group_version, serializer);
    }
}

impl SseEncode for crate::api::api::ConversationData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.participants, serializer);
        <Option<String>>::sse_encode(self.cv_name, serializer);
        <Option<String>>::sse_encode(self.sender_guid, serializer);
        <Option<String>>::sse_encode(self.after_guid, serializer);
    }
}

impl SseEncode for crate::api::api::DeleteTarget {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::DeleteTarget::Chat(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::api::OperatedChat>::sse_encode(field0, serializer);
            }
            crate::api::api::DeleteTarget::Messages(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<String>>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::DeviceInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.serial, serializer);
        <String>::sse_encode(self.os_version, serializer);
        <Option<Vec<u8>>>::sse_encode(self.encoded_data, serializer);
    }
}

impl SseEncode for crate::api::api::EditMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.tuuid, serializer);
        <u64>::sse_encode(self.edit_part, serializer);
        <crate::api::api::MessageParts>::sse_encode(self.new_parts, serializer);
    }
}

impl SseEncode for crate::api::api::ErrorMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.for_uuid, serializer);
        <u64>::sse_encode(self.status, serializer);
        <String>::sse_encode(self.status_str, serializer);
    }
}

impl SseEncode for crate::api::api::ExtensionApp {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Option<u64>>::sse_encode(self.app_id, serializer);
        <String>::sse_encode(self.bundle_id, serializer);
        <Option<crate::api::api::Balloon>>::sse_encode(self.balloon, serializer);
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::api::FFIFilePackager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::api::Follow {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.create_timestamp, serializer);
        <i64>::sse_encode(self.expires, serializer);
        <String>::sse_encode(self.id, serializer);
        <Vec<String>>::sse_encode(self.invitation_accepted_handles, serializer);
        <Vec<String>>::sse_encode(self.invitation_from_handles, serializer);
        <bool>::sse_encode(self.is_from_messages, serializer);
        <Option<String>>::sse_encode(self.offer_id, serializer);
        <bool>::sse_encode(self.only_in_event, serializer);
        <String>::sse_encode(self.person_id_hash, serializer);
        <bool>::sse_encode(self.secure_locations_capable, serializer);
        <bool>::sse_encode(self.shallow_or_live_secure_locations_capable, serializer);
        <String>::sse_encode(self.source, serializer);
        <bool>::sse_encode(self.tk_permission, serializer);
        <i64>::sse_encode(self.update_timestamp, serializer);
        <Option<bool>>::sse_encode(self.fallback_to_legacy_allowed, serializer);
        <Option<bool>>::sse_encode(self.opted_not_to_share, serializer);
        <Option<crate::api::api::Location>>::sse_encode(self.last_location, serializer);
        <bool>::sse_encode(self.locate_in_progress, serializer);
    }
}

impl SseEncode for crate::api::api::FoundDevice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.device_model, serializer);
        <Option<bool>>::sse_encode(self.low_power_mode, serializer);
        <Option<i64>>::sse_encode(self.passcode_length, serializer);
        <Option<String>>::sse_encode(self.id, serializer);
        <Option<String>>::sse_encode(self.battery_status, serializer);
        <Option<bool>>::sse_encode(self.lost_mode_capable, serializer);
        <Option<f64>>::sse_encode(self.battery_level, serializer);
        <Option<bool>>::sse_encode(self.location_enabled, serializer);
        <Option<bool>>::sse_encode(self.is_considered_accessory, serializer);
        <Option<crate::api::api::Location>>::sse_encode(self.location, serializer);
        <Option<String>>::sse_encode(self.model_display_name, serializer);
        <Option<String>>::sse_encode(self.device_color, serializer);
        <Option<bool>>::sse_encode(self.activation_locked, serializer);
        <Option<i64>>::sse_encode(self.rm2_state, serializer);
        <Option<bool>>::sse_encode(self.loc_found_enabled, serializer);
        <Option<bool>>::sse_encode(self.nwd, serializer);
        <Option<String>>::sse_encode(self.device_status, serializer);
        <Option<bool>>::sse_encode(self.fmly_share, serializer);
        <std::collections::HashMap<String, bool>>::sse_encode(self.features, serializer);
        <Option<bool>>::sse_encode(self.this_device, serializer);
        <Option<bool>>::sse_encode(self.lost_mode_enabled, serializer);
        <Option<String>>::sse_encode(self.device_display_name, serializer);
        <Option<String>>::sse_encode(self.name, serializer);
        <Option<bool>>::sse_encode(self.can_wipe_after_lock, serializer);
        <Option<bool>>::sse_encode(self.is_mac, serializer);
        <Option<String>>::sse_encode(self.raw_device_model, serializer);
        <Option<String>>::sse_encode(self.ba_uuid, serializer);
        <Option<String>>::sse_encode(self.device_discovery_id, serializer);
        <Option<bool>>::sse_encode(self.scd, serializer);
        <Option<bool>>::sse_encode(self.location_capable, serializer);
        <Option<bool>>::sse_encode(self.wipe_in_progress, serializer);
        <Option<bool>>::sse_encode(self.dark_wake, serializer);
        <Option<bool>>::sse_encode(self.device_with_you, serializer);
        <Option<i64>>::sse_encode(self.max_msg_char, serializer);
        <Option<String>>::sse_encode(self.device_class, serializer);
    }
}

impl SseEncode for crate::api::api::FTMember {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.nickname, serializer);
        <String>::sse_encode(self.handle, serializer);
    }
}

impl SseEncode for crate::api::api::FTMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::FTMessage::LetMeInRequest(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::api::LetMeInRequest>::sse_encode(field0, serializer);
            }
            crate::api::api::FTMessage::LinkChanged { guid } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(guid, serializer);
            }
            crate::api::api::FTMessage::JoinEvent {
                guid,
                participant,
                handle,
                ring,
            } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(guid, serializer);
                <u64>::sse_encode(participant, serializer);
                <String>::sse_encode(handle, serializer);
                <bool>::sse_encode(ring, serializer);
            }
            crate::api::api::FTMessage::AddMembers {
                guid,
                members,
                ring,
            } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(guid, serializer);
                <std::collections::HashSet<crate::api::api::FTMember>>::sse_encode(
                    members, serializer,
                );
                <bool>::sse_encode(ring, serializer);
            }
            crate::api::api::FTMessage::RemoveMembers { guid, members } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(guid, serializer);
                <std::collections::HashSet<crate::api::api::FTMember>>::sse_encode(
                    members, serializer,
                );
            }
            crate::api::api::FTMessage::LeaveEvent {
                guid,
                participant,
                handle,
            } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(guid, serializer);
                <u64>::sse_encode(participant, serializer);
                <String>::sse_encode(handle, serializer);
            }
            crate::api::api::FTMessage::Ring { guid } => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(guid, serializer);
            }
            crate::api::api::FTMessage::Decline { guid } => {
                <i32>::sse_encode(7, serializer);
                <String>::sse_encode(guid, serializer);
            }
            crate::api::api::FTMessage::RespondedElsewhere { guid } => {
                <i32>::sse_encode(8, serializer);
                <String>::sse_encode(guid, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::FTMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::api::FTMode::Outgoing => 0,
                crate::api::api::FTMode::Incoming => 1,
                crate::api::api::FTMode::Missed => 2,
                crate::api::api::FTMode::MissedOutgoing => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::api::FTParticipant {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.token, serializer);
        <String>::sse_encode(self.handle, serializer);
        <u64>::sse_encode(self.participant_id, serializer);
        <Option<u64>>::sse_encode(self.last_join_date, serializer);
        <Option<ConversationParticipant>>::sse_encode(self.active, serializer);
    }
}

impl SseEncode for crate::api::api::FTSession {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.group_id, serializer);
        <Vec<String>>::sse_encode(self.my_handles, serializer);
        <std::collections::HashMap<String, crate::api::api::FTParticipant>>::sse_encode(
            self.participants,
            serializer,
        );
        <Option<ConversationLink>>::sse_encode(self.link, serializer);
        <std::collections::HashSet<crate::api::api::FTMember>>::sse_encode(
            self.members,
            serializer,
        );
        <String>::sse_encode(self.report_id, serializer);
        <Option<u64>>::sse_encode(self.start_time, serializer);
        <Option<u64>>::sse_encode(self.last_rekey, serializer);
        <bool>::sse_encode(self.is_propped, serializer);
        <bool>::sse_encode(self.is_ringing_inaccurate, serializer);
        <Option<crate::api::api::FTMode>>::sse_encode(self.mode, serializer);
        <std::collections::HashMap<String, u64>>::sse_encode(self.recent_member_adds, serializer);
    }
}

impl SseEncode for crate::api::api::HwExtra {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.version, serializer);
        <u32>::sse_encode(self.protocol_version, serializer);
        <String>::sse_encode(self.device_id, serializer);
        <String>::sse_encode(self.icloud_ua, serializer);
        <String>::sse_encode(self.aoskit_version, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::api::IconChangeMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<crate::api::api::MMCSFile>>::sse_encode(self.file, serializer);
        <u64>::sse_encode(self.group_version, serializer);
    }
}

impl SseEncode for crate::api::api::IndexedMessagePart {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::api::MessagePart>::sse_encode(self.part, serializer);
        <Option<usize>>::sse_encode(self.idx, serializer);
        <Option<crate::api::api::PartExtension>>::sse_encode(self.ext, serializer);
    }
}

impl SseEncode for crate::api::api::LetMeInRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.shared_secret, serializer);
        <String>::sse_encode(self.pseud, serializer);
        <String>::sse_encode(self.requestor, serializer);
        <Option<String>>::sse_encode(self.nickname, serializer);
        <Vec<u8>>::sse_encode(self.token, serializer);
        <Option<String>>::sse_encode(self.delegation_uuid, serializer);
        <Option<String>>::sse_encode(self.usage, serializer);
    }
}

impl SseEncode for crate::api::api::LinkMeta {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::api::LPLinkMetadata>::sse_encode(self.data, serializer);
        <Vec<Vec<u8>>>::sse_encode(self.attachments, serializer);
    }
}

impl SseEncode for Vec<IDSUser> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <IDSUser>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::Follow> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::Follow>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::FoundDevice> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::FoundDevice>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::FTMember> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::FTMember>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::FTSession> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::FTSession>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::IndexedMessagePart> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::IndexedMessagePart>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Vec<u8>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::MessageTarget> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::MessageTarget>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::PrivateDeviceInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::PrivateDeviceInfo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, bool)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, bool)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, u64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, u64)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, crate::api::api::FTParticipant)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, crate::api::api::FTParticipant)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, crate::api::api::SyncStatus)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, crate::api::api::SyncStatus)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::SharedAlbum> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::SharedAlbum>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::TrustedPhoneNumber> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::TrustedPhoneNumber>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::api::Location {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<crate::api::api::Address>>::sse_encode(self.address, serializer);
        <f64>::sse_encode(self.altitude, serializer);
        <i64>::sse_encode(self.floor_level, serializer);
        <f64>::sse_encode(self.horizontal_accuracy, serializer);
        <bool>::sse_encode(self.is_inaccurate, serializer);
        <f64>::sse_encode(self.latitude, serializer);
        <Option<String>>::sse_encode(self.location_id, serializer);
        <Option<i64>>::sse_encode(self.location_timestamp, serializer);
        <f64>::sse_encode(self.longitude, serializer);
        <i64>::sse_encode(self.secure_location_ts, serializer);
        <i64>::sse_encode(self.timestamp, serializer);
        <f64>::sse_encode(self.vertical_accuracy, serializer);
        <Option<String>>::sse_encode(self.position_type, serializer);
        <Option<bool>>::sse_encode(self.is_old, serializer);
        <Option<bool>>::sse_encode(self.location_finished, serializer);
    }
}

impl SseEncode for crate::api::api::LoginState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::LoginState::LoggedIn => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::api::LoginState::NeedsDevice2FA => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::api::LoginState::Needs2FAVerification => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::api::LoginState::NeedsSMS2FA => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::api::LoginState::NeedsSMS2FAVerification(field0) => {
                <i32>::sse_encode(4, serializer);
                <VerifyBody>::sse_encode(field0, serializer);
            }
            crate::api::api::LoginState::NeedsExtraStep(field0) => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::api::LoginState::NeedsLogin => {
                <i32>::sse_encode(6, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::LPIconMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::api::NSURL>::sse_encode(self.url, serializer);
        <u8>::sse_encode(self.version, serializer);
    }
}

impl SseEncode for crate::api::api::LPImageMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.size, serializer);
        <crate::api::api::NSURL>::sse_encode(self.url, serializer);
        <u8>::sse_encode(self.version, serializer);
    }
}

impl SseEncode for crate::api::api::LPLinkMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<crate::api::api::LPImageMetadata>>::sse_encode(self.image_metadata, serializer);
        <u8>::sse_encode(self.version, serializer);
        <Option<crate::api::api::LPIconMetadata>>::sse_encode(self.icon_metadata, serializer);
        <crate::api::api::NSURL>::sse_encode(self.original_url, serializer);
        <Option<crate::api::api::NSURL>>::sse_encode(self.url, serializer);
        <Option<String>>::sse_encode(self.title, serializer);
        <Option<String>>::sse_encode(self.summary, serializer);
        <Option<crate::api::api::RichLinkImageAttachmentSubstitute>>::sse_encode(
            self.image, serializer,
        );
        <Option<crate::api::api::RichLinkImageAttachmentSubstitute>>::sse_encode(
            self.icon, serializer,
        );
        <Option<NSArray<LPImageMetadata>>>::sse_encode(self.images, serializer);
        <Option<NSArray<LPIconMetadata>>>::sse_encode(self.icons, serializer);
    }
}

impl SseEncode for crate::api::api::Message {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::Message::Message(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::api::NormalMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::RenameMessage(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::api::RenameMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::ChangeParticipants(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::api::ChangeParticipantMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::React(field0) => {
                <i32>::sse_encode(3, serializer);
                <crate::api::api::ReactMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::Delivered => {
                <i32>::sse_encode(4, serializer);
            }
            crate::api::api::Message::Read => {
                <i32>::sse_encode(5, serializer);
            }
            crate::api::api::Message::Typing => {
                <i32>::sse_encode(6, serializer);
            }
            crate::api::api::Message::Unsend(field0) => {
                <i32>::sse_encode(7, serializer);
                <crate::api::api::UnsendMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::Edit(field0) => {
                <i32>::sse_encode(8, serializer);
                <crate::api::api::EditMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::IconChange(field0) => {
                <i32>::sse_encode(9, serializer);
                <crate::api::api::IconChangeMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::StopTyping => {
                <i32>::sse_encode(10, serializer);
            }
            crate::api::api::Message::EnableSmsActivation(field0) => {
                <i32>::sse_encode(11, serializer);
                <bool>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::MessageReadOnDevice => {
                <i32>::sse_encode(12, serializer);
            }
            crate::api::api::Message::SmsConfirmSent(field0) => {
                <i32>::sse_encode(13, serializer);
                <bool>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::MarkUnread => {
                <i32>::sse_encode(14, serializer);
            }
            crate::api::api::Message::PeerCacheInvalidate => {
                <i32>::sse_encode(15, serializer);
            }
            crate::api::api::Message::UpdateExtension(field0) => {
                <i32>::sse_encode(16, serializer);
                <crate::api::api::UpdateExtensionMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::Error(field0) => {
                <i32>::sse_encode(17, serializer);
                <crate::api::api::ErrorMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::MoveToRecycleBin(field0) => {
                <i32>::sse_encode(18, serializer);
                <crate::api::api::MoveToRecycleBinMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::RecoverChat(field0) => {
                <i32>::sse_encode(19, serializer);
                <crate::api::api::OperatedChat>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::PermanentDelete(field0) => {
                <i32>::sse_encode(20, serializer);
                <crate::api::api::PermanentDeleteMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::Message::Unschedule => {
                <i32>::sse_encode(21, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::MessageInst {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <Option<String>>::sse_encode(self.sender, serializer);
        <Option<crate::api::api::ConversationData>>::sse_encode(self.conversation, serializer);
        <crate::api::api::Message>::sse_encode(self.message, serializer);
        <u64>::sse_encode(self.sent_timestamp, serializer);
        <Option<Vec<crate::api::api::MessageTarget>>>::sse_encode(self.target, serializer);
        <bool>::sse_encode(self.send_delivered, serializer);
        <bool>::sse_encode(self.verification_failed, serializer);
    }
}

impl SseEncode for crate::api::api::MessagePart {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::MessagePart::Text(field0, field1) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
                <crate::api::api::TextFormat>::sse_encode(field1, serializer);
            }
            crate::api::api::MessagePart::Attachment(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::api::Attachment>::sse_encode(field0, serializer);
            }
            crate::api::api::MessagePart::Mention(field0, field1) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
                <String>::sse_encode(field1, serializer);
            }
            crate::api::api::MessagePart::Object(field0) => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::MessageParts {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::api::IndexedMessagePart>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::api::MessageTarget {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::MessageTarget::Token(field0) => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::api::MessageTarget::Uuid(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::MessageType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::MessageType::IMessage => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::api::MessageType::SMS {
                is_phone,
                using_number,
                from_handle,
            } => {
                <i32>::sse_encode(1, serializer);
                <bool>::sse_encode(is_phone, serializer);
                <String>::sse_encode(using_number, serializer);
                <Option<String>>::sse_encode(from_handle, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::MMCSFile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.signature, serializer);
        <String>::sse_encode(self.object, serializer);
        <String>::sse_encode(self.url, serializer);
        <Vec<u8>>::sse_encode(self.key, serializer);
        <usize>::sse_encode(self.size, serializer);
    }
}

impl SseEncode for crate::api::api::MMCSTransferProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.prog, serializer);
        <usize>::sse_encode(self.total, serializer);
        <Option<crate::api::api::MMCSFile>>::sse_encode(self.file, serializer);
    }
}

impl SseEncode for crate::api::api::MoveToRecycleBinMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::api::DeleteTarget>::sse_encode(self.target, serializer);
        <u64>::sse_encode(self.recoverable_delete_date, serializer);
    }
}

impl SseEncode for crate::api::api::MyAsyncRuntime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::api::NormalMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::api::MessageParts>::sse_encode(self.parts, serializer);
        <Option<String>>::sse_encode(self.effect, serializer);
        <Option<String>>::sse_encode(self.reply_guid, serializer);
        <Option<String>>::sse_encode(self.reply_part, serializer);
        <crate::api::api::MessageType>::sse_encode(self.service, serializer);
        <Option<String>>::sse_encode(self.subject, serializer);
        <Option<crate::api::api::ExtensionApp>>::sse_encode(self.app, serializer);
        <Option<crate::api::api::LinkMeta>>::sse_encode(self.link_meta, serializer);
        <bool>::sse_encode(self.voice, serializer);
        <Option<crate::api::api::ScheduleMode>>::sse_encode(self.scheduled, serializer);
    }
}

impl SseEncode for crate::api::api::NSDictionaryClass {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::api::NSDictionaryClass::NSDictionary => 0,
                crate::api::api::NSDictionaryClass::NSMutableDictionary => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::api::NSURL {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.base, serializer);
        <String>::sse_encode(self.relative, serializer);
    }
}

impl SseEncode for crate::api::api::OperatedChat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.participants, serializer);
        <String>::sse_encode(self.group_id, serializer);
        <String>::sse_encode(self.guid, serializer);
        <Option<bool>>::sse_encode(self.delete_incoming_messages, serializer);
        <Option<bool>>::sse_encode(self.was_reported_as_junk, serializer);
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<ConversationLink> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <ConversationLink>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<ConversationParticipant> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <ConversationParticipant>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<IDSUser> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <IDSUser>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<JoinedOSConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <JoinedOSConfig>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<NSArray<LPIconMetadata>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <NSArray<LPIconMetadata>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<NSArray<LPImageMetadata>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <NSArray<LPImageMetadata>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::Address> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::Address>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::Attachment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::Attachment>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::Balloon> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::Balloon>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::ConversationData> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::ConversationData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::ExtensionApp> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::ExtensionApp>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::FTMode> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::FTMode>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::LinkMeta> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::LinkMeta>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::Location> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::Location>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::LoginState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::LoginState>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::LPIconMetadata> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::LPIconMetadata>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::LPImageMetadata> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::LPImageMetadata>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::MMCSFile> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::MMCSFile>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::NSURL> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::NSURL>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::PartExtension> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::PartExtension>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::PushMessage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::PushMessage>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<(String, u64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <(String, u64)>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::RichLinkImageAttachmentSubstitute> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::RichLinkImageAttachmentSubstitute>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::ScheduleMode> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::ScheduleMode>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::SupportAction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::SupportAction>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::SupportAlert> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::SupportAlert>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::api::MessageTarget>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::api::MessageTarget>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::api::PartExtension {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::PartExtension::Sticker {
                msg_width,
                rotation,
                sai,
                scale,
                update,
                sli,
                normalized_x,
                normalized_y,
                version,
                hash,
                safi,
                effect_type,
                sticker_id,
            } => {
                <i32>::sse_encode(0, serializer);
                <f64>::sse_encode(msg_width, serializer);
                <f64>::sse_encode(rotation, serializer);
                <u64>::sse_encode(sai, serializer);
                <f64>::sse_encode(scale, serializer);
                <Option<bool>>::sse_encode(update, serializer);
                <u64>::sse_encode(sli, serializer);
                <f64>::sse_encode(normalized_x, serializer);
                <f64>::sse_encode(normalized_y, serializer);
                <u64>::sse_encode(version, serializer);
                <String>::sse_encode(hash, serializer);
                <u64>::sse_encode(safi, serializer);
                <i64>::sse_encode(effect_type, serializer);
                <String>::sse_encode(sticker_id, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::PermanentDeleteMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::api::DeleteTarget>::sse_encode(self.target, serializer);
        <bool>::sse_encode(self.is_scheduled, serializer);
    }
}

impl SseEncode for crate::api::api::PollResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::PollResult::Stop => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::api::PollResult::Cont(field0) => {
                <i32>::sse_encode(1, serializer);
                <Option<crate::api::api::PushMessage>>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::PrivateDeviceInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.uuid, serializer);
        <Option<String>>::sse_encode(self.device_name, serializer);
        <Vec<u8>>::sse_encode(self.token, serializer);
        <bool>::sse_encode(self.is_hsa_trusted, serializer);
        <Vec<String>>::sse_encode(self.identites, serializer);
        <Vec<String>>::sse_encode(self.sub_services, serializer);
    }
}

impl SseEncode for crate::api::api::PushMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::PushMessage::IMessage(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::api::MessageInst>::sse_encode(field0, serializer);
            }
            crate::api::api::PushMessage::SendConfirm { uuid, error } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(uuid, serializer);
                <Option<String>>::sse_encode(error, serializer);
            }
            crate::api::api::PushMessage::RegistrationState(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::api::RegisterState>::sse_encode(field0, serializer);
            }
            crate::api::api::PushMessage::NewPhotostream(field0) => {
                <i32>::sse_encode(3, serializer);
                <crate::api::api::SharedAlbum>::sse_encode(field0, serializer);
            }
            crate::api::api::PushMessage::FaceTime(field0) => {
                <i32>::sse_encode(4, serializer);
                <crate::api::api::FTMessage>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::ReactMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.to_uuid, serializer);
        <Option<u64>>::sse_encode(self.to_part, serializer);
        <crate::api::api::ReactMessageType>::sse_encode(self.reaction, serializer);
        <String>::sse_encode(self.to_text, serializer);
    }
}

impl SseEncode for crate::api::api::ReactMessageType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::ReactMessageType::React { reaction, enable } => {
                <i32>::sse_encode(0, serializer);
                <crate::api::api::Reaction>::sse_encode(reaction, serializer);
                <bool>::sse_encode(enable, serializer);
            }
            crate::api::api::ReactMessageType::Extension { spec, body } => {
                <i32>::sse_encode(1, serializer);
                <crate::api::api::ExtensionApp>::sse_encode(spec, serializer);
                <crate::api::api::MessageParts>::sse_encode(body, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::Reaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::Reaction::Heart => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::api::Reaction::Like => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::api::Reaction::Dislike => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::api::Reaction::Laugh => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::api::Reaction::Emphasize => {
                <i32>::sse_encode(4, serializer);
            }
            crate::api::api::Reaction::Question => {
                <i32>::sse_encode(5, serializer);
            }
            crate::api::api::Reaction::Emoji(field0) => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::api::Reaction::Sticker { spec, body } => {
                <i32>::sse_encode(7, serializer);
                <Option<crate::api::api::ExtensionApp>>::sse_encode(spec, serializer);
                <crate::api::api::MessageParts>::sse_encode(body, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for (Vec<crate::api::api::SharedAlbum>, Vec<String>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::api::SharedAlbum>>::sse_encode(self.0, serializer);
        <Vec<String>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        Vec<crate::api::api::TrustedPhoneNumber>,
        Option<crate::api::api::LoginState>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::api::TrustedPhoneNumber>>::sse_encode(self.0, serializer);
        <Option<crate::api::api::LoginState>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (crate::api::api::LoginState, Option<IDSUser>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::api::LoginState>::sse_encode(self.0, serializer);
        <Option<IDSUser>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        std::collections::HashMap<String, crate::api::api::SyncStatus>,
        Option<(String, u64)>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <std::collections::HashMap<String, crate::api::api::SyncStatus>>::sse_encode(
            self.0, serializer,
        );
        <Option<(String, u64)>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, bool) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <bool>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, crate::api::api::FTParticipant) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::api::FTParticipant>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, crate::api::api::SyncStatus) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::api::SyncStatus>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, u64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <u64>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::api::RegisterState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::RegisterState::Registered { next_s } => {
                <i32>::sse_encode(0, serializer);
                <i64>::sse_encode(next_s, serializer);
            }
            crate::api::api::RegisterState::Registering => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::api::RegisterState::Failed { retry_wait, error } => {
                <i32>::sse_encode(2, serializer);
                <Option<u64>>::sse_encode(retry_wait, serializer);
                <String>::sse_encode(error, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::RegistrationPhase {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::api::RegistrationPhase::WantsOSConfig => 0,
                crate::api::api::RegistrationPhase::WantsRegister => 1,
                crate::api::api::RegistrationPhase::Registered => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::api::RenameMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.new_name, serializer);
    }
}

impl SseEncode for crate::api::api::RichLinkImageAttachmentSubstitute {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.mime_type, serializer);
        <u64>::sse_encode(self.rich_link_image_attachment_substitute_index, serializer);
    }
}

impl SseEncode for crate::api::api::ScheduleMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.ms, serializer);
        <bool>::sse_encode(self.schedule, serializer);
    }
}

impl SseEncode for crate::api::api::SharedAlbum {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.fullname, serializer);
        <Option<String>>::sse_encode(self.email, serializer);
        <String>::sse_encode(self.albumguid, serializer);
        <String>::sse_encode(self.sharingtype, serializer);
        <Option<String>>::sse_encode(self.subscriptiondate, serializer);
        <Option<String>>::sse_encode(self.albumlocation, serializer);
        <Vec<String>>::sse_encode(self.assets, serializer);
        <Option<String>>::sse_encode(self.delete, serializer);
    }
}

impl SseEncode for crate::api::api::SupportAction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.url, serializer);
        <String>::sse_encode(self.button, serializer);
    }
}

impl SseEncode for crate::api::api::SupportAlert {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.title, serializer);
        <String>::sse_encode(self.body, serializer);
        <Option<crate::api::api::SupportAction>>::sse_encode(self.action, serializer);
    }
}

impl SseEncode for crate::api::api::SyncStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::SyncStatus::Synced => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::api::SyncStatus::Downloading { progress, total } => {
                <i32>::sse_encode(1, serializer);
                <usize>::sse_encode(progress, serializer);
                <usize>::sse_encode(total, serializer);
            }
            crate::api::api::SyncStatus::Uploading { progress, total } => {
                <i32>::sse_encode(2, serializer);
                <usize>::sse_encode(progress, serializer);
                <usize>::sse_encode(total, serializer);
            }
            crate::api::api::SyncStatus::Syncing => {
                <i32>::sse_encode(3, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::TextEffect {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::api::TextEffect::Big => 0,
                crate::api::api::TextEffect::Small => 1,
                crate::api::api::TextEffect::Shake => 2,
                crate::api::api::TextEffect::Nod => 3,
                crate::api::api::TextEffect::Explode => 4,
                crate::api::api::TextEffect::Ripple => 5,
                crate::api::api::TextEffect::Bloom => 6,
                crate::api::api::TextEffect::Jitter => 7,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::api::TextFlags {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.bold, serializer);
        <bool>::sse_encode(self.italic, serializer);
        <bool>::sse_encode(self.underline, serializer);
        <bool>::sse_encode(self.strikethrough, serializer);
    }
}

impl SseEncode for crate::api::api::TextFormat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::TextFormat::Flags(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::api::TextFlags>::sse_encode(field0, serializer);
            }
            crate::api::api::TextFormat::Effect(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::api::TextEffect>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::api::TransferProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.prog, serializer);
        <usize>::sse_encode(self.total, serializer);
        <Option<crate::api::api::Attachment>>::sse_encode(self.attachment, serializer);
    }
}

impl SseEncode for crate::api::api::TrustedPhoneNumber {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.number_with_dial_code, serializer);
        <String>::sse_encode(self.last_two_digits, serializer);
        <String>::sse_encode(self.push_mode, serializer);
        <u32>::sse_encode(self.id, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::api::UnsendMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.tuuid, serializer);
        <u64>::sse_encode(self.edit_part, serializer);
    }
}

impl SseEncode for crate::api::api::UpdateExtensionMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.for_uuid, serializer);
        <crate::api::api::PartExtension>::sse_encode(self.ext, serializer);
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.3.0.

    // Section: imports

    use super::*;
    use crate::api::api::*;
    use crate::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationLink>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationLink>>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationParticipant>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationParticipant>>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                FindMyFriendsClient<DefaultAnisetteProvider>,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                FindMyFriendsClient<DefaultAnisetteProvider>,
            >,
        >::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                FindMyPhoneClient<DefaultAnisetteProvider>,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                FindMyPhoneClient<DefaultAnisetteProvider>,
            >,
        >::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IDSUser>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IDSUser>>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<JoinedOSConfig>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<JoinedOSConfig>>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray < LPIconMetadata >>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray < LPIconMetadata >>>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray < LPImageMetadata >>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NSArray < LPImageMetadata >>>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_bluebubbles_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
