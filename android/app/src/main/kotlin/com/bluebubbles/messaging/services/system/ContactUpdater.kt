package com.bluebubbles.messaging.services.system

// generated by ChatGPT, AI slop

import android.content.ContentProviderOperation
import android.content.ContentResolver
import android.content.Context
import android.database.Cursor
import android.os.RemoteException
import android.provider.ContactsContract
import android.content.OperationApplicationException

object ContactUpdater {

    fun updateContact(context: Context, contactId: Long, newDisplayName: String, newPhoto: ByteArray?) {
        val ops = ArrayList<ContentProviderOperation>()
        val resolver = context.contentResolver

        // Update or Insert Display Name
        if (hasDataRow(resolver, contactId, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)) {
            ops.add(
                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)
                    .withSelection(
                        "${ContactsContract.Data.CONTACT_ID}=? AND ${ContactsContract.Data.MIMETYPE}=?",
                        arrayOf(contactId.toString(), ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
                    )
                    .withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, newDisplayName)
                    .build()
            )
        } else {
            getRawContactId(resolver, contactId)?.let { rawContactId ->
                ops.add(
                    ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                        .withValue(ContactsContract.Data.RAW_CONTACT_ID, rawContactId)
                        .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
                        .withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, newDisplayName)
                        .build()
                )
            }
        }

        // Handle Photo (insert, update, or delete)
        if (newPhoto != null) {
            // If new photo is provided, insert or update
            if (hasDataRow(resolver, contactId, ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE)) {
                ops.add(
                    ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)
                        .withSelection(
                            "${ContactsContract.Data.CONTACT_ID}=? AND ${ContactsContract.Data.MIMETYPE}=?",
                            arrayOf(contactId.toString(), ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE)
                        )
                        .withValue(ContactsContract.CommonDataKinds.Photo.PHOTO, newPhoto)
                        .build()
                )
            } else {
                getRawContactId(resolver, contactId)?.let { rawContactId ->
                    ops.add(
                        ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                            .withValue(ContactsContract.Data.RAW_CONTACT_ID, rawContactId)
                            .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE)
                            .withValue(ContactsContract.CommonDataKinds.Photo.PHOTO, newPhoto)
                            .build()
                    )
                }
            }
        } else {
            // If new photo is null, delete any existing photo
            ops.add(
                ContentProviderOperation.newDelete(ContactsContract.Data.CONTENT_URI)
                    .withSelection(
                        "${ContactsContract.Data.CONTACT_ID}=? AND ${ContactsContract.Data.MIMETYPE}=?",
                        arrayOf(contactId.toString(), ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE)
                    )
                    .build()
            )
        }

        // Apply the operations batch
        try {
            resolver.applyBatch(ContactsContract.AUTHORITY, ops)
        } catch (e: RemoteException) {
            e.printStackTrace()
        } catch (e: OperationApplicationException) {
            e.printStackTrace()
        }
    }

    private fun hasDataRow(resolver: ContentResolver, contactId: Long, mimeType: String): Boolean {
        resolver.query(
            ContactsContract.Data.CONTENT_URI,
            arrayOf(ContactsContract.Data._ID),
            "${ContactsContract.Data.CONTACT_ID}=? AND ${ContactsContract.Data.MIMETYPE}=?",
            arrayOf(contactId.toString(), mimeType),
            null
        )?.use { cursor ->
            return cursor.moveToFirst()
        }
        return false
    }

    private fun getRawContactId(resolver: ContentResolver, contactId: Long): Long? {
        resolver.query(
            ContactsContract.RawContacts.CONTENT_URI,
            arrayOf(ContactsContract.RawContacts._ID),
            "${ContactsContract.RawContacts.CONTACT_ID}=?",
            arrayOf(contactId.toString()),
            null
        )?.use { cursor ->
            if (cursor.moveToFirst()) {
                return cursor.getLong(0)
            }
        }
        return null
    }
}