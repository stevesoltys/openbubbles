// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.3.0';

  @override
  int get rustContentHash => -2130978743;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_bluebubbles',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<List<SharedAlbum>> crateApiApiAddAlbum(
      {required ArcPushState state,
      required String guid,
      required String folder});

  Future<void> crateApiApiAnswerFtRequest(
      {required ArcPushState state,
      required LetMeInRequest request,
      String? approvedGroup});

  Future<int> crateApiApiAttachmentGetSize({required Attachment that});

  Future<IdsUser> crateApiApiAuthPhone(
      {required ArcPushState state,
      required String number,
      required List<int> sig});

  Future<bool> crateApiApiCanFindMy({required ArcPushState state});

  Future<void> crateApiApiCancelFacetime(
      {required ArcPushState state, required String guid});

  Future<void> crateApiApiCompleteMsg({required String ptr});

  Future<JoinedOsConfig> crateApiApiConfigFromEncoded(
      {required List<int> encoded});

  Future<JoinedOsConfig> crateApiApiConfigFromRelay(
      {required String code, required String host, String? token});

  Future<JoinedOsConfig> crateApiApiConfigFromValidationData(
      {required List<int> data, required HwExtra extra});

  Future<void> crateApiApiConfigureAppReview({required ArcPushState state});

  Future<void> crateApiApiConfigureMacos(
      {required ArcPushState state, required JoinedOsConfig config});

  Future<String> crateApiApiConvertTokenToUuid(
      {required ArcPushState state,
      required String handle,
      required List<int> token});

  Future<void> crateApiApiCreateFacetime(
      {required ArcPushState state,
      required String uuid,
      required String handle,
      required List<String> participants});

  Future<NsArrayLpIconMetadata> crateApiApiCreateIconArray(
      {required LPIconMetadata img});

  Future<NsArrayLpImageMetadata> crateApiApiCreateImageArray(
      {required LPImageMetadata img});

  Future<void> crateApiApiDeclineFacetime(
      {required ArcPushState state, required String guid});

  Future<void> crateApiApiDoReregister({required ArcPushState state});

  Stream<TransferProgress> crateApiApiDownloadAttachment(
      {required ArcPushState state,
      required Attachment attachment,
      required String path});

  Stream<TransferProgress> crateApiApiDownloadMmcs(
      {required ArcPushState state,
      required MMCSFile attachment,
      required String path});

  Future<FFIFilePackager> crateApiApiFfiFilePackagerDefault();

  Future<List<FTSession>> crateApiApiFtSessions({required ArcPushState state});

  Future<(List<TrustedPhoneNumber>, LoginState?)> crateApiApiGet2FaSmsOpts(
      {required ArcPushState state});

  Future<(List<SharedAlbum>, List<String>)> crateApiApiGetAlbums(
      {required ArcPushState state, required bool refresh});

  Future<Map<String, String>> crateApiApiGetAnisetteHeaders(
      {required ArcPushState state});

  Future<List<Follow>> crateApiApiGetBackgroundFollowing(
      {required ArcPushState state});

  Future<JoinedOsConfig?> crateApiApiGetConfigState(
      {required ArcPushState state});

  Future<DeviceInfo> crateApiApiGetDeviceInfo({required JoinedOsConfig config});

  Future<DeviceInfo> crateApiApiGetDeviceInfoState(
      {required ArcPushState state});

  Future<List<FoundDevice>> crateApiApiGetDevices(
      {required FindMyPhoneClientDefaultAnisetteProvider client});

  Future<List<Follow>> crateApiApiGetFollowing(
      {required FindMyFriendsClientDefaultAnisetteProvider client});

  Future<String> crateApiApiGetFtLink(
      {required ArcPushState state, required String usage});

  Future<List<String>> crateApiApiGetHandles({required ArcPushState state});

  Future<RegistrationPhase> crateApiApiGetPhase({required ArcPushState state});

  Future<RegisterState> crateApiApiGetRegstate({required ArcPushState state});

  Future<List<PrivateDeviceInfo>> crateApiApiGetSmsTargets(
      {required ArcPushState state,
      required String handle,
      required bool refresh});

  Future<(Map<String, SyncStatus>, (String, BigInt)?)> crateApiApiGetSyncstatus(
      {required ArcPushState state});

  Future<Uint8List> crateApiApiGetToken({required ArcPushState state});

  Future<String> crateApiApiGetUserName({required ArcPushState state});

  Future<void> crateApiApiInvalidateIdCache({required ArcPushState state});

  Future<FindMyFriendsClientDefaultAnisetteProvider>
      crateApiApiMakeFindMyFriends({required ArcPushState state});

  Future<FindMyPhoneClientDefaultAnisetteProvider> crateApiApiMakeFindMyPhone(
      {required ArcPushState state});

  Future<String> crateApiApiMessagePartsRawText({required MessageParts that});

  Future<MyAsyncRuntime> crateApiApiMyAsyncRuntimeDefault();

  Future<MessageInst> crateApiApiNewMsg(
      {required ArcPushState state,
      required ConversationData conversation,
      required String sender,
      required Message message});

  Future<ArcPushState> crateApiApiNewPushState({required String dir});

  Future<PushMessage?> crateApiApiPtrToDart({required String ptr});

  Future<PollResult> crateApiApiRecvWait({required ArcPushState state});

  Future<List<Follow>> crateApiApiRefreshBackgroundFollowing(
      {required ArcPushState state});

  Future<List<FoundDevice>> crateApiApiRefreshDevices(
      {required ArcPushState state,
      required FindMyPhoneClientDefaultAnisetteProvider client});

  Future<List<Follow>> crateApiApiRefreshFollowing(
      {required ArcPushState state,
      required FindMyFriendsClientDefaultAnisetteProvider client});

  Future<void> crateApiApiRefreshToken({required ArcPushState state});

  Future<SupportAlert?> crateApiApiRegisterIds(
      {required ArcPushState state, required List<IdsUser> users});

  Future<List<SharedAlbum>> crateApiApiRemoveAlbum(
      {required ArcPushState state, required String guid});

  Future<void> crateApiApiResetState(
      {required ArcPushState state, required bool resetHw});

  Future<Attachment> crateApiApiRestoreAttachment({required String data});

  Future<IdsUser> crateApiApiRestoreUser({required String user});

  Future<IdsUser> crateApiApiRetryLogin({required ArcPushState state});

  Future<String> crateApiApiSaveAttachment({required Attachment att});

  Future<String> crateApiApiSaveUser({required IdsUser user});

  Future<List<Follow>> crateApiApiSelectBackgroundFriend(
      {required ArcPushState state, String? friend});

  Future<List<Follow>> crateApiApiSelectFriend(
      {required ArcPushState state,
      required FindMyFriendsClientDefaultAnisetteProvider client,
      String? friend});

  Future<bool> crateApiApiSend(
      {required ArcPushState state, required MessageInst msg});

  Future<LoginState> crateApiApiSend2FaSms(
      {required ArcPushState state, required int phoneId});

  Future<LoginState> crateApiApiSend2FaToDevices({required ArcPushState state});

  Future<ArcPushState> crateApiApiServiceFromPtr({required String ptr});

  Future<List<SharedAlbum>> crateApiApiSubscribe(
      {required ArcPushState state, required String guid});

  Future<List<SharedAlbum>> crateApiApiSubscribeToken(
      {required ArcPushState state, required String token});

  Future<bool> crateApiApiSupportsSharedStreams({required ArcPushState state});

  Future<void> crateApiApiSyncNow({required ArcPushState state});

  Future<(LoginState, IdsUser?)> crateApiApiTryAuth(
      {required ArcPushState state,
      required String username,
      required String password});

  Future<List<SharedAlbum>> crateApiApiUnsubscribe(
      {required ArcPushState state, required String guid});

  Future<String> crateApiApiUpdateAccountHeaders({required ArcPushState state});

  Stream<TransferProgress> crateApiApiUploadAttachment(
      {required ArcPushState state,
      required String path,
      required String mime,
      required String uti,
      required String name});

  Stream<MMCSTransferProgress> crateApiApiUploadMmcs(
      {required ArcPushState state, required String path});

  Future<void> crateApiApiUseLinkFor(
      {required ArcPushState state,
      required String oldUsage,
      required String usage});

  Future<List<String>> crateApiApiValidateCert(
      {required ArcPushState state, required IdsUser user});

  Future<String?> crateApiApiValidateRelay({required ArcPushState state});

  Future<List<String>> crateApiApiValidateTargets(
      {required ArcPushState state,
      required List<String> targets,
      required String sender});

  Future<List<String>> crateApiApiValidateTargetsFacetime(
      {required ArcPushState state,
      required List<String> targets,
      required String sender});

  Future<(LoginState, IdsUser?)> crateApiApiVerify2Fa(
      {required ArcPushState state, required String code});

  Future<(LoginState, IdsUser?)> crateApiApiVerify2FaSms(
      {required ArcPushState state,
      required VerifyBody body,
      required String code});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPushState;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPushState;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArcPushStatePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConversationLink;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConversationLink;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ConversationLinkPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConversationParticipant;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConversationParticipant;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ConversationParticipantPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FindMyFriendsClientDefaultAnisetteProvider;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FindMyFriendsClientDefaultAnisetteProvider;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FindMyFriendsClientDefaultAnisetteProviderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FindMyPhoneClientDefaultAnisetteProvider;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FindMyPhoneClientDefaultAnisetteProvider;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FindMyPhoneClientDefaultAnisetteProviderPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_IdsUser;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_IdsUser;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IdsUserPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JoinedOsConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JoinedOsConfig;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_JoinedOsConfigPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NsArrayLpIconMetadata;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NsArrayLpIconMetadata;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NsArrayLpIconMetadataPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NsArrayLpImageMetadata;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NsArrayLpImageMetadata;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NsArrayLpImageMetadataPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VerifyBody;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VerifyBody;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VerifyBodyPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<List<SharedAlbum>> crateApiApiAddAlbum(
      {required ArcPushState state,
      required String guid,
      required String folder}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(guid, serializer);
        sse_encode_String(folder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_shared_album,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiAddAlbumConstMeta,
      argValues: [state, guid, folder],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiAddAlbumConstMeta => const TaskConstMeta(
        debugName: "add_album",
        argNames: ["state", "guid", "folder"],
      );

  @override
  Future<void> crateApiApiAnswerFtRequest(
      {required ArcPushState state,
      required LetMeInRequest request,
      String? approvedGroup}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_box_autoadd_let_me_in_request(request, serializer);
        sse_encode_opt_String(approvedGroup, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiAnswerFtRequestConstMeta,
      argValues: [state, request, approvedGroup],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiAnswerFtRequestConstMeta => const TaskConstMeta(
        debugName: "answer_ft_request",
        argNames: ["state", "request", "approvedGroup"],
      );

  @override
  Future<int> crateApiApiAttachmentGetSize({required Attachment that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_attachment(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiAttachmentGetSizeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiAttachmentGetSizeConstMeta =>
      const TaskConstMeta(
        debugName: "attachment_get_size",
        argNames: ["that"],
      );

  @override
  Future<IdsUser> crateApiApiAuthPhone(
      {required ArcPushState state,
      required String number,
      required List<int> sig}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(number, serializer);
        sse_encode_list_prim_u_8_loose(sig, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiAuthPhoneConstMeta,
      argValues: [state, number, sig],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiAuthPhoneConstMeta => const TaskConstMeta(
        debugName: "auth_phone",
        argNames: ["state", "number", "sig"],
      );

  @override
  Future<bool> crateApiApiCanFindMy({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiCanFindMyConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCanFindMyConstMeta => const TaskConstMeta(
        debugName: "can_find_my",
        argNames: ["state"],
      );

  @override
  Future<void> crateApiApiCancelFacetime(
      {required ArcPushState state, required String guid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(guid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiCancelFacetimeConstMeta,
      argValues: [state, guid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCancelFacetimeConstMeta => const TaskConstMeta(
        debugName: "cancel_facetime",
        argNames: ["state", "guid"],
      );

  @override
  Future<void> crateApiApiCompleteMsg({required String ptr}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(ptr, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiCompleteMsgConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCompleteMsgConstMeta => const TaskConstMeta(
        debugName: "complete_msg",
        argNames: ["ptr"],
      );

  @override
  Future<JoinedOsConfig> crateApiApiConfigFromEncoded(
      {required List<int> encoded}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(encoded, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiConfigFromEncodedConstMeta,
      argValues: [encoded],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiConfigFromEncodedConstMeta =>
      const TaskConstMeta(
        debugName: "config_from_encoded",
        argNames: ["encoded"],
      );

  @override
  Future<JoinedOsConfig> crateApiApiConfigFromRelay(
      {required String code, required String host, String? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(code, serializer);
        sse_encode_String(host, serializer);
        sse_encode_opt_String(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiConfigFromRelayConstMeta,
      argValues: [code, host, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiConfigFromRelayConstMeta => const TaskConstMeta(
        debugName: "config_from_relay",
        argNames: ["code", "host", "token"],
      );

  @override
  Future<JoinedOsConfig> crateApiApiConfigFromValidationData(
      {required List<int> data, required HwExtra extra}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(data, serializer);
        sse_encode_box_autoadd_hw_extra(extra, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiConfigFromValidationDataConstMeta,
      argValues: [data, extra],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiConfigFromValidationDataConstMeta =>
      const TaskConstMeta(
        debugName: "config_from_validation_data",
        argNames: ["data", "extra"],
      );

  @override
  Future<void> crateApiApiConfigureAppReview({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiConfigureAppReviewConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiConfigureAppReviewConstMeta =>
      const TaskConstMeta(
        debugName: "configure_app_review",
        argNames: ["state"],
      );

  @override
  Future<void> crateApiApiConfigureMacos(
      {required ArcPushState state, required JoinedOsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiConfigureMacosConstMeta,
      argValues: [state, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiConfigureMacosConstMeta => const TaskConstMeta(
        debugName: "configure_macos",
        argNames: ["state", "config"],
      );

  @override
  Future<String> crateApiApiConvertTokenToUuid(
      {required ArcPushState state,
      required String handle,
      required List<int> token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(handle, serializer);
        sse_encode_list_prim_u_8_loose(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiConvertTokenToUuidConstMeta,
      argValues: [state, handle, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiConvertTokenToUuidConstMeta =>
      const TaskConstMeta(
        debugName: "convert_token_to_uuid",
        argNames: ["state", "handle", "token"],
      );

  @override
  Future<void> crateApiApiCreateFacetime(
      {required ArcPushState state,
      required String uuid,
      required String handle,
      required List<String> participants}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(uuid, serializer);
        sse_encode_String(handle, serializer);
        sse_encode_list_String(participants, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiCreateFacetimeConstMeta,
      argValues: [state, uuid, handle, participants],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCreateFacetimeConstMeta => const TaskConstMeta(
        debugName: "create_facetime",
        argNames: ["state", "uuid", "handle", "participants"],
      );

  @override
  Future<NsArrayLpIconMetadata> crateApiApiCreateIconArray(
      {required LPIconMetadata img}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_lp_icon_metadata(img, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiCreateIconArrayConstMeta,
      argValues: [img],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCreateIconArrayConstMeta => const TaskConstMeta(
        debugName: "create_icon_array",
        argNames: ["img"],
      );

  @override
  Future<NsArrayLpImageMetadata> crateApiApiCreateImageArray(
      {required LPImageMetadata img}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_lp_image_metadata(img, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiCreateImageArrayConstMeta,
      argValues: [img],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCreateImageArrayConstMeta =>
      const TaskConstMeta(
        debugName: "create_image_array",
        argNames: ["img"],
      );

  @override
  Future<void> crateApiApiDeclineFacetime(
      {required ArcPushState state, required String guid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(guid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDeclineFacetimeConstMeta,
      argValues: [state, guid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDeclineFacetimeConstMeta => const TaskConstMeta(
        debugName: "decline_facetime",
        argNames: ["state", "guid"],
      );

  @override
  Future<void> crateApiApiDoReregister({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDoReregisterConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDoReregisterConstMeta => const TaskConstMeta(
        debugName: "do_reregister",
        argNames: ["state"],
      );

  @override
  Stream<TransferProgress> crateApiApiDownloadAttachment(
      {required ArcPushState state,
      required Attachment attachment,
      required String path}) {
    final sink = RustStreamSink<TransferProgress>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_transfer_progress_Sse(sink, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_box_autoadd_attachment(attachment, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiDownloadAttachmentConstMeta,
      argValues: [sink, state, attachment, path],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiApiDownloadAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "download_attachment",
        argNames: ["sink", "state", "attachment", "path"],
      );

  @override
  Stream<TransferProgress> crateApiApiDownloadMmcs(
      {required ArcPushState state,
      required MMCSFile attachment,
      required String path}) {
    final sink = RustStreamSink<TransferProgress>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_transfer_progress_Sse(sink, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_box_autoadd_mmcs_file(attachment, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiDownloadMmcsConstMeta,
      argValues: [sink, state, attachment, path],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiApiDownloadMmcsConstMeta => const TaskConstMeta(
        debugName: "download_mmcs",
        argNames: ["sink", "state", "attachment", "path"],
      );

  @override
  Future<FFIFilePackager> crateApiApiFfiFilePackagerDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ffi_file_packager,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiFfiFilePackagerDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiFfiFilePackagerDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_file_packager_default",
        argNames: [],
      );

  @override
  Future<List<FTSession>> crateApiApiFtSessions({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_ft_session,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiFtSessionsConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiFtSessionsConstMeta => const TaskConstMeta(
        debugName: "ft_sessions",
        argNames: ["state"],
      );

  @override
  Future<(List<TrustedPhoneNumber>, LoginState?)> crateApiApiGet2FaSmsOpts(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_list_trusted_phone_number_opt_box_autoadd_login_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGet2FaSmsOptsConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGet2FaSmsOptsConstMeta => const TaskConstMeta(
        debugName: "get_2fa_sms_opts",
        argNames: ["state"],
      );

  @override
  Future<(List<SharedAlbum>, List<String>)> crateApiApiGetAlbums(
      {required ArcPushState state, required bool refresh}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_bool(refresh, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_list_shared_album_list_string,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetAlbumsConstMeta,
      argValues: [state, refresh],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetAlbumsConstMeta => const TaskConstMeta(
        debugName: "get_albums",
        argNames: ["state", "refresh"],
      );

  @override
  Future<Map<String, String>> crateApiApiGetAnisetteHeaders(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetAnisetteHeadersConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetAnisetteHeadersConstMeta =>
      const TaskConstMeta(
        debugName: "get_anisette_headers",
        argNames: ["state"],
      );

  @override
  Future<List<Follow>> crateApiApiGetBackgroundFollowing(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_follow,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiGetBackgroundFollowingConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetBackgroundFollowingConstMeta =>
      const TaskConstMeta(
        debugName: "get_background_following",
        argNames: ["state"],
      );

  @override
  Future<JoinedOsConfig?> crateApiApiGetConfigState(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiGetConfigStateConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetConfigStateConstMeta => const TaskConstMeta(
        debugName: "get_config_state",
        argNames: ["state"],
      );

  @override
  Future<DeviceInfo> crateApiApiGetDeviceInfo(
      {required JoinedOsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_device_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetDeviceInfoConstMeta,
      argValues: [config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetDeviceInfoConstMeta => const TaskConstMeta(
        debugName: "get_device_info",
        argNames: ["config"],
      );

  @override
  Future<DeviceInfo> crateApiApiGetDeviceInfoState(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_device_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetDeviceInfoStateConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetDeviceInfoStateConstMeta =>
      const TaskConstMeta(
        debugName: "get_device_info_state",
        argNames: ["state"],
      );

  @override
  Future<List<FoundDevice>> crateApiApiGetDevices(
      {required FindMyPhoneClientDefaultAnisetteProvider client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_found_device,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiGetDevicesConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetDevicesConstMeta => const TaskConstMeta(
        debugName: "get_devices",
        argNames: ["client"],
      );

  @override
  Future<List<Follow>> crateApiApiGetFollowing(
      {required FindMyFriendsClientDefaultAnisetteProvider client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_follow,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiGetFollowingConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetFollowingConstMeta => const TaskConstMeta(
        debugName: "get_following",
        argNames: ["client"],
      );

  @override
  Future<String> crateApiApiGetFtLink(
      {required ArcPushState state, required String usage}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(usage, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetFtLinkConstMeta,
      argValues: [state, usage],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetFtLinkConstMeta => const TaskConstMeta(
        debugName: "get_ft_link",
        argNames: ["state", "usage"],
      );

  @override
  Future<List<String>> crateApiApiGetHandles({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetHandlesConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetHandlesConstMeta => const TaskConstMeta(
        debugName: "get_handles",
        argNames: ["state"],
      );

  @override
  Future<RegistrationPhase> crateApiApiGetPhase({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_registration_phase,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiGetPhaseConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetPhaseConstMeta => const TaskConstMeta(
        debugName: "get_phase",
        argNames: ["state"],
      );

  @override
  Future<RegisterState> crateApiApiGetRegstate({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_register_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetRegstateConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetRegstateConstMeta => const TaskConstMeta(
        debugName: "get_regstate",
        argNames: ["state"],
      );

  @override
  Future<List<PrivateDeviceInfo>> crateApiApiGetSmsTargets(
      {required ArcPushState state,
      required String handle,
      required bool refresh}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(handle, serializer);
        sse_encode_bool(refresh, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_private_device_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetSmsTargetsConstMeta,
      argValues: [state, handle, refresh],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetSmsTargetsConstMeta => const TaskConstMeta(
        debugName: "get_sms_targets",
        argNames: ["state", "handle", "refresh"],
      );

  @override
  Future<(Map<String, SyncStatus>, (String, BigInt)?)> crateApiApiGetSyncstatus(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_map_string_sync_status_opt_box_autoadd_record_string_u_64,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetSyncstatusConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetSyncstatusConstMeta => const TaskConstMeta(
        debugName: "get_syncstatus",
        argNames: ["state"],
      );

  @override
  Future<Uint8List> crateApiApiGetToken({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiGetTokenConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetTokenConstMeta => const TaskConstMeta(
        debugName: "get_token",
        argNames: ["state"],
      );

  @override
  Future<String> crateApiApiGetUserName({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetUserNameConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetUserNameConstMeta => const TaskConstMeta(
        debugName: "get_user_name",
        argNames: ["state"],
      );

  @override
  Future<void> crateApiApiInvalidateIdCache({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiInvalidateIdCacheConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiInvalidateIdCacheConstMeta =>
      const TaskConstMeta(
        debugName: "invalidate_id_cache",
        argNames: ["state"],
      );

  @override
  Future<FindMyFriendsClientDefaultAnisetteProvider>
      crateApiApiMakeFindMyFriends({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiMakeFindMyFriendsConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiMakeFindMyFriendsConstMeta =>
      const TaskConstMeta(
        debugName: "make_find_my_friends",
        argNames: ["state"],
      );

  @override
  Future<FindMyPhoneClientDefaultAnisetteProvider> crateApiApiMakeFindMyPhone(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiMakeFindMyPhoneConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiMakeFindMyPhoneConstMeta => const TaskConstMeta(
        debugName: "make_find_my_phone",
        argNames: ["state"],
      );

  @override
  Future<String> crateApiApiMessagePartsRawText({required MessageParts that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_message_parts(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiMessagePartsRawTextConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiMessagePartsRawTextConstMeta =>
      const TaskConstMeta(
        debugName: "message_parts_raw_text",
        argNames: ["that"],
      );

  @override
  Future<MyAsyncRuntime> crateApiApiMyAsyncRuntimeDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_async_runtime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiMyAsyncRuntimeDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiMyAsyncRuntimeDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "my_async_runtime_default",
        argNames: [],
      );

  @override
  Future<MessageInst> crateApiApiNewMsg(
      {required ArcPushState state,
      required ConversationData conversation,
      required String sender,
      required Message message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_box_autoadd_conversation_data(conversation, serializer);
        sse_encode_String(sender, serializer);
        sse_encode_box_autoadd_message(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_inst,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiNewMsgConstMeta,
      argValues: [state, conversation, sender, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiNewMsgConstMeta => const TaskConstMeta(
        debugName: "new_msg",
        argNames: ["state", "conversation", "sender", "message"],
      );

  @override
  Future<ArcPushState> crateApiApiNewPushState({required String dir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiNewPushStateConstMeta,
      argValues: [dir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiNewPushStateConstMeta => const TaskConstMeta(
        debugName: "new_push_state",
        argNames: ["dir"],
      );

  @override
  Future<PushMessage?> crateApiApiPtrToDart({required String ptr}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(ptr, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_push_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiPtrToDartConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiPtrToDartConstMeta => const TaskConstMeta(
        debugName: "ptr_to_dart",
        argNames: ["ptr"],
      );

  @override
  Future<PollResult> crateApiApiRecvWait({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_poll_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiRecvWaitConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRecvWaitConstMeta => const TaskConstMeta(
        debugName: "recv_wait",
        argNames: ["state"],
      );

  @override
  Future<List<Follow>> crateApiApiRefreshBackgroundFollowing(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 49, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_follow,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRefreshBackgroundFollowingConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRefreshBackgroundFollowingConstMeta =>
      const TaskConstMeta(
        debugName: "refresh_background_following",
        argNames: ["state"],
      );

  @override
  Future<List<FoundDevice>> crateApiApiRefreshDevices(
      {required ArcPushState state,
      required FindMyPhoneClientDefaultAnisetteProvider client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 50, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_found_device,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRefreshDevicesConstMeta,
      argValues: [state, client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRefreshDevicesConstMeta => const TaskConstMeta(
        debugName: "refresh_devices",
        argNames: ["state", "client"],
      );

  @override
  Future<List<Follow>> crateApiApiRefreshFollowing(
      {required ArcPushState state,
      required FindMyFriendsClientDefaultAnisetteProvider client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_follow,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRefreshFollowingConstMeta,
      argValues: [state, client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRefreshFollowingConstMeta =>
      const TaskConstMeta(
        debugName: "refresh_following",
        argNames: ["state", "client"],
      );

  @override
  Future<void> crateApiApiRefreshToken({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRefreshTokenConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRefreshTokenConstMeta => const TaskConstMeta(
        debugName: "refresh_token",
        argNames: ["state"],
      );

  @override
  Future<SupportAlert?> crateApiApiRegisterIds(
      {required ArcPushState state, required List<IdsUser> users}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
            users, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 53, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_support_alert,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRegisterIdsConstMeta,
      argValues: [state, users],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRegisterIdsConstMeta => const TaskConstMeta(
        debugName: "register_ids",
        argNames: ["state", "users"],
      );

  @override
  Future<List<SharedAlbum>> crateApiApiRemoveAlbum(
      {required ArcPushState state, required String guid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(guid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 54, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_shared_album,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRemoveAlbumConstMeta,
      argValues: [state, guid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRemoveAlbumConstMeta => const TaskConstMeta(
        debugName: "remove_album",
        argNames: ["state", "guid"],
      );

  @override
  Future<void> crateApiApiResetState(
      {required ArcPushState state, required bool resetHw}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_bool(resetHw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 55, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiResetStateConstMeta,
      argValues: [state, resetHw],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiResetStateConstMeta => const TaskConstMeta(
        debugName: "reset_state",
        argNames: ["state", "resetHw"],
      );

  @override
  Future<Attachment> crateApiApiRestoreAttachment({required String data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 56, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_attachment,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiRestoreAttachmentConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRestoreAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "restore_attachment",
        argNames: ["data"],
      );

  @override
  Future<IdsUser> crateApiApiRestoreUser({required String user}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(user, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 57, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRestoreUserConstMeta,
      argValues: [user],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRestoreUserConstMeta => const TaskConstMeta(
        debugName: "restore_user",
        argNames: ["user"],
      );

  @override
  Future<IdsUser> crateApiApiRetryLogin({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 58, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRetryLoginConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRetryLoginConstMeta => const TaskConstMeta(
        debugName: "retry_login",
        argNames: ["state"],
      );

  @override
  Future<String> crateApiApiSaveAttachment({required Attachment att}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_attachment(att, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 59, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiSaveAttachmentConstMeta,
      argValues: [att],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSaveAttachmentConstMeta => const TaskConstMeta(
        debugName: "save_attachment",
        argNames: ["att"],
      );

  @override
  Future<String> crateApiApiSaveUser({required IdsUser user}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
            user, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 60, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSaveUserConstMeta,
      argValues: [user],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSaveUserConstMeta => const TaskConstMeta(
        debugName: "save_user",
        argNames: ["user"],
      );

  @override
  Future<List<Follow>> crateApiApiSelectBackgroundFriend(
      {required ArcPushState state, String? friend}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_opt_String(friend, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 61, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_follow,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSelectBackgroundFriendConstMeta,
      argValues: [state, friend],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSelectBackgroundFriendConstMeta =>
      const TaskConstMeta(
        debugName: "select_background_friend",
        argNames: ["state", "friend"],
      );

  @override
  Future<List<Follow>> crateApiApiSelectFriend(
      {required ArcPushState state,
      required FindMyFriendsClientDefaultAnisetteProvider client,
      String? friend}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
            client, serializer);
        sse_encode_opt_String(friend, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 62, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_follow,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSelectFriendConstMeta,
      argValues: [state, client, friend],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSelectFriendConstMeta => const TaskConstMeta(
        debugName: "select_friend",
        argNames: ["state", "client", "friend"],
      );

  @override
  Future<bool> crateApiApiSend(
      {required ArcPushState state, required MessageInst msg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_box_autoadd_message_inst(msg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 63, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSendConstMeta,
      argValues: [state, msg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSendConstMeta => const TaskConstMeta(
        debugName: "send",
        argNames: ["state", "msg"],
      );

  @override
  Future<LoginState> crateApiApiSend2FaSms(
      {required ArcPushState state, required int phoneId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_u_32(phoneId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 64, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_login_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSend2FaSmsConstMeta,
      argValues: [state, phoneId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSend2FaSmsConstMeta => const TaskConstMeta(
        debugName: "send_2fa_sms",
        argNames: ["state", "phoneId"],
      );

  @override
  Future<LoginState> crateApiApiSend2FaToDevices(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 65, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_login_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSend2FaToDevicesConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSend2FaToDevicesConstMeta =>
      const TaskConstMeta(
        debugName: "send_2fa_to_devices",
        argNames: ["state"],
      );

  @override
  Future<ArcPushState> crateApiApiServiceFromPtr({required String ptr}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(ptr, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 66, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiServiceFromPtrConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiServiceFromPtrConstMeta => const TaskConstMeta(
        debugName: "service_from_ptr",
        argNames: ["ptr"],
      );

  @override
  Future<List<SharedAlbum>> crateApiApiSubscribe(
      {required ArcPushState state, required String guid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(guid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 67, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_shared_album,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSubscribeConstMeta,
      argValues: [state, guid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSubscribeConstMeta => const TaskConstMeta(
        debugName: "subscribe",
        argNames: ["state", "guid"],
      );

  @override
  Future<List<SharedAlbum>> crateApiApiSubscribeToken(
      {required ArcPushState state, required String token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 68, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_shared_album,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSubscribeTokenConstMeta,
      argValues: [state, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSubscribeTokenConstMeta => const TaskConstMeta(
        debugName: "subscribe_token",
        argNames: ["state", "token"],
      );

  @override
  Future<bool> crateApiApiSupportsSharedStreams({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 69, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSupportsSharedStreamsConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSupportsSharedStreamsConstMeta =>
      const TaskConstMeta(
        debugName: "supports_shared_streams",
        argNames: ["state"],
      );

  @override
  Future<void> crateApiApiSyncNow({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 70, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSyncNowConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSyncNowConstMeta => const TaskConstMeta(
        debugName: "sync_now",
        argNames: ["state"],
      );

  @override
  Future<(LoginState, IdsUser?)> crateApiApiTryAuth(
      {required ArcPushState state,
      required String username,
      required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 71, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_login_state_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_ids_user,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiTryAuthConstMeta,
      argValues: [state, username, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiTryAuthConstMeta => const TaskConstMeta(
        debugName: "try_auth",
        argNames: ["state", "username", "password"],
      );

  @override
  Future<List<SharedAlbum>> crateApiApiUnsubscribe(
      {required ArcPushState state, required String guid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(guid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 72, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_shared_album,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiUnsubscribeConstMeta,
      argValues: [state, guid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiUnsubscribeConstMeta => const TaskConstMeta(
        debugName: "unsubscribe",
        argNames: ["state", "guid"],
      );

  @override
  Future<String> crateApiApiUpdateAccountHeaders(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 73, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiUpdateAccountHeadersConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiUpdateAccountHeadersConstMeta =>
      const TaskConstMeta(
        debugName: "update_account_headers",
        argNames: ["state"],
      );

  @override
  Stream<TransferProgress> crateApiApiUploadAttachment(
      {required ArcPushState state,
      required String path,
      required String mime,
      required String uti,
      required String name}) {
    final sink = RustStreamSink<TransferProgress>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_transfer_progress_Sse(sink, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(path, serializer);
        sse_encode_String(mime, serializer);
        sse_encode_String(uti, serializer);
        sse_encode_String(name, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 74, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiUploadAttachmentConstMeta,
      argValues: [sink, state, path, mime, uti, name],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiApiUploadAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "upload_attachment",
        argNames: ["sink", "state", "path", "mime", "uti", "name"],
      );

  @override
  Stream<MMCSTransferProgress> crateApiApiUploadMmcs(
      {required ArcPushState state, required String path}) {
    final sink = RustStreamSink<MMCSTransferProgress>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_mmcs_transfer_progress_Sse(sink, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 75, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiUploadMmcsConstMeta,
      argValues: [sink, state, path],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiApiUploadMmcsConstMeta => const TaskConstMeta(
        debugName: "upload_mmcs",
        argNames: ["sink", "state", "path"],
      );

  @override
  Future<void> crateApiApiUseLinkFor(
      {required ArcPushState state,
      required String oldUsage,
      required String usage}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(oldUsage, serializer);
        sse_encode_String(usage, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 76, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiUseLinkForConstMeta,
      argValues: [state, oldUsage, usage],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiUseLinkForConstMeta => const TaskConstMeta(
        debugName: "use_link_for",
        argNames: ["state", "oldUsage", "usage"],
      );

  @override
  Future<List<String>> crateApiApiValidateCert(
      {required ArcPushState state, required IdsUser user}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
            user, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 77, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiValidateCertConstMeta,
      argValues: [state, user],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiValidateCertConstMeta => const TaskConstMeta(
        debugName: "validate_cert",
        argNames: ["state", "user"],
      );

  @override
  Future<String?> crateApiApiValidateRelay({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 78, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiValidateRelayConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiValidateRelayConstMeta => const TaskConstMeta(
        debugName: "validate_relay",
        argNames: ["state"],
      );

  @override
  Future<List<String>> crateApiApiValidateTargets(
      {required ArcPushState state,
      required List<String> targets,
      required String sender}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_list_String(targets, serializer);
        sse_encode_String(sender, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 79, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiValidateTargetsConstMeta,
      argValues: [state, targets, sender],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiValidateTargetsConstMeta => const TaskConstMeta(
        debugName: "validate_targets",
        argNames: ["state", "targets", "sender"],
      );

  @override
  Future<List<String>> crateApiApiValidateTargetsFacetime(
      {required ArcPushState state,
      required List<String> targets,
      required String sender}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_list_String(targets, serializer);
        sse_encode_String(sender, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 80, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiValidateTargetsFacetimeConstMeta,
      argValues: [state, targets, sender],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiValidateTargetsFacetimeConstMeta =>
      const TaskConstMeta(
        debugName: "validate_targets_facetime",
        argNames: ["state", "targets", "sender"],
      );

  @override
  Future<(LoginState, IdsUser?)> crateApiApiVerify2Fa(
      {required ArcPushState state, required String code}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(code, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 81, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_login_state_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_ids_user,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiVerify2FaConstMeta,
      argValues: [state, code],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiVerify2FaConstMeta => const TaskConstMeta(
        debugName: "verify_2fa",
        argNames: ["state", "code"],
      );

  @override
  Future<(LoginState, IdsUser?)> crateApiApiVerify2FaSms(
      {required ArcPushState state,
      required VerifyBody body,
      required String code}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
            body, serializer);
        sse_encode_String(code, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 82, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_login_state_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_ids_user,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiVerify2FaSmsConstMeta,
      argValues: [state, body, code],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiVerify2FaSmsConstMeta => const TaskConstMeta(
        debugName: "verify_2fa_sms",
        argNames: ["state", "body", "code"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPushState => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPushState => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConversationLink => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConversationLink => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConversationParticipant => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConversationParticipant => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FindMyFriendsClientDefaultAnisetteProvider =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FindMyFriendsClientDefaultAnisetteProvider =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FindMyPhoneClientDefaultAnisetteProvider =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FindMyPhoneClientDefaultAnisetteProvider =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_IdsUser => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_IdsUser => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JoinedOsConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JoinedOsConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NsArrayLpIconMetadata => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NsArrayLpIconMetadata => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NsArrayLpImageMetadata => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NsArrayLpImageMetadata => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VerifyBody => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VerifyBody => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcPushState
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPushStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConversationLink
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConversationLinkImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConversationParticipant
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConversationParticipantImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  FindMyFriendsClientDefaultAnisetteProvider
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FindMyFriendsClientDefaultAnisetteProviderImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  FindMyPhoneClientDefaultAnisetteProvider
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FindMyPhoneClientDefaultAnisetteProviderImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  IdsUser
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IdsUserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinedOsConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinedOsConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NsArrayLpIconMetadata
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NsArrayLpIconMetadataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NsArrayLpImageMetadata
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NsArrayLpImageMetadataImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VerifyBody
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyBodyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FindMyFriendsClientDefaultAnisetteProvider
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FindMyFriendsClientDefaultAnisetteProviderImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  FindMyPhoneClientDefaultAnisetteProvider
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FindMyPhoneClientDefaultAnisetteProviderImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcPushState
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPushStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IdsUser
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IdsUserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinedOsConfig
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinedOsConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VerifyBody
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyBodyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  int dco_decode_CastedPrimitive_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  int dco_decode_CastedPrimitive_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  Map<String, int> dco_decode_Map_String_CastedPrimitive_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_casted_primitive_u_64(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, bool> dco_decode_Map_String_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_bool(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, FTParticipant> dco_decode_Map_String_ft_participant(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_ft_participant(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, SyncStatus> dco_decode_Map_String_sync_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_sync_status(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcPushState
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPushStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConversationLink
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConversationLinkImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConversationParticipant
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConversationParticipantImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  FindMyFriendsClientDefaultAnisetteProvider
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FindMyFriendsClientDefaultAnisetteProviderImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  FindMyPhoneClientDefaultAnisetteProvider
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FindMyPhoneClientDefaultAnisetteProviderImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  IdsUser
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IdsUserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinedOsConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinedOsConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NsArrayLpIconMetadata
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NsArrayLpIconMetadataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NsArrayLpImageMetadata
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NsArrayLpImageMetadataImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VerifyBody
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyBodyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Set<FTMember> dco_decode_Set_ft_member(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_ft_member(raw));
  }

  @protected
  RustStreamSink<MMCSTransferProgress>
      dco_decode_StreamSink_mmcs_transfer_progress_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<TransferProgress> dco_decode_StreamSink_transfer_progress_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Address dco_decode_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Address(
      administrativeArea: dco_decode_opt_String(arr[0]),
      country: dco_decode_String(arr[1]),
      countryCode: dco_decode_String(arr[2]),
      formattedAddressLines: dco_decode_opt_list_String(arr[3]),
      locality: dco_decode_opt_String(arr[4]),
      stateCode: dco_decode_opt_String(arr[5]),
      streetAddress: dco_decode_opt_String(arr[6]),
      streetName: dco_decode_opt_String(arr[7]),
    );
  }

  @protected
  Attachment dco_decode_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Attachment(
      aType: dco_decode_attachment_type(arr[0]),
      part_: dco_decode_CastedPrimitive_u_64(arr[1]),
      utiType: dco_decode_String(arr[2]),
      mime: dco_decode_String(arr[3]),
      name: dco_decode_String(arr[4]),
      iris: dco_decode_bool(arr[5]),
    );
  }

  @protected
  AttachmentType dco_decode_attachment_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return AttachmentType_Inline(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return AttachmentType_MMCS(
          dco_decode_box_autoadd_mmcs_file(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Balloon dco_decode_balloon(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Balloon(
      url: dco_decode_String(arr[0]),
      session: dco_decode_opt_String(arr[1]),
      layout: dco_decode_balloon_layout(arr[2]),
      ldText: dco_decode_opt_String(arr[3]),
      isLive: dco_decode_bool(arr[4]),
      icon: dco_decode_list_prim_u_8_strict(arr[5]),
    );
  }

  @protected
  BalloonLayout dco_decode_balloon_layout(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BalloonLayout_TemplateLayout(
          imageSubtitle: dco_decode_String(raw[1]),
          imageTitle: dco_decode_String(raw[2]),
          caption: dco_decode_String(raw[3]),
          secondarySubcaption: dco_decode_String(raw[4]),
          tertiarySubcaption: dco_decode_String(raw[5]),
          subcaption: dco_decode_String(raw[6]),
          class_: dco_decode_ns_dictionary_class(raw[7]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ConversationLink
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
        raw);
  }

  @protected
  ConversationParticipant
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
        raw);
  }

  @protected
  IdsUser
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
        raw);
  }

  @protected
  JoinedOsConfig
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
        raw);
  }

  @protected
  NsArrayLpIconMetadata
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
        raw);
  }

  @protected
  NsArrayLpImageMetadata
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
        raw);
  }

  @protected
  Address dco_decode_box_autoadd_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_address(raw);
  }

  @protected
  Attachment dco_decode_box_autoadd_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_attachment(raw);
  }

  @protected
  Balloon dco_decode_box_autoadd_balloon(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_balloon(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ChangeParticipantMessage dco_decode_box_autoadd_change_participant_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_change_participant_message(raw);
  }

  @protected
  ConversationData dco_decode_box_autoadd_conversation_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_conversation_data(raw);
  }

  @protected
  EditMessage dco_decode_box_autoadd_edit_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_edit_message(raw);
  }

  @protected
  ErrorMessage dco_decode_box_autoadd_error_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_error_message(raw);
  }

  @protected
  ExtensionApp dco_decode_box_autoadd_extension_app(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_extension_app(raw);
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FTMessage dco_decode_box_autoadd_ft_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ft_message(raw);
  }

  @protected
  FTMode dco_decode_box_autoadd_ft_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ft_mode(raw);
  }

  @protected
  HwExtra dco_decode_box_autoadd_hw_extra(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_hw_extra(raw);
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  IconChangeMessage dco_decode_box_autoadd_icon_change_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_icon_change_message(raw);
  }

  @protected
  LetMeInRequest dco_decode_box_autoadd_let_me_in_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_let_me_in_request(raw);
  }

  @protected
  LinkMeta dco_decode_box_autoadd_link_meta(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_link_meta(raw);
  }

  @protected
  Location dco_decode_box_autoadd_location(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_location(raw);
  }

  @protected
  LoginState dco_decode_box_autoadd_login_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_login_state(raw);
  }

  @protected
  LPIconMetadata dco_decode_box_autoadd_lp_icon_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_lp_icon_metadata(raw);
  }

  @protected
  LPImageMetadata dco_decode_box_autoadd_lp_image_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_lp_image_metadata(raw);
  }

  @protected
  Message dco_decode_box_autoadd_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_message(raw);
  }

  @protected
  MessageInst dco_decode_box_autoadd_message_inst(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_message_inst(raw);
  }

  @protected
  MessageParts dco_decode_box_autoadd_message_parts(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_message_parts(raw);
  }

  @protected
  MMCSFile dco_decode_box_autoadd_mmcs_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_mmcs_file(raw);
  }

  @protected
  MoveToRecycleBinMessage dco_decode_box_autoadd_move_to_recycle_bin_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_move_to_recycle_bin_message(raw);
  }

  @protected
  NormalMessage dco_decode_box_autoadd_normal_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_normal_message(raw);
  }

  @protected
  NSURL dco_decode_box_autoadd_nsurl(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_nsurl(raw);
  }

  @protected
  OperatedChat dco_decode_box_autoadd_operated_chat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_operated_chat(raw);
  }

  @protected
  PartExtension dco_decode_box_autoadd_part_extension(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_part_extension(raw);
  }

  @protected
  PermanentDeleteMessage dco_decode_box_autoadd_permanent_delete_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_permanent_delete_message(raw);
  }

  @protected
  PushMessage dco_decode_box_autoadd_push_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_push_message(raw);
  }

  @protected
  ReactMessage dco_decode_box_autoadd_react_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_react_message(raw);
  }

  @protected
  Reaction dco_decode_box_autoadd_reaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_reaction(raw);
  }

  @protected
  (String, BigInt) dco_decode_box_autoadd_record_string_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as (String, BigInt);
  }

  @protected
  RegisterState dco_decode_box_autoadd_register_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_register_state(raw);
  }

  @protected
  RenameMessage dco_decode_box_autoadd_rename_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_rename_message(raw);
  }

  @protected
  RichLinkImageAttachmentSubstitute
      dco_decode_box_autoadd_rich_link_image_attachment_substitute(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_rich_link_image_attachment_substitute(raw);
  }

  @protected
  ScheduleMode dco_decode_box_autoadd_schedule_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_schedule_mode(raw);
  }

  @protected
  SharedAlbum dco_decode_box_autoadd_shared_album(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_shared_album(raw);
  }

  @protected
  SupportAction dco_decode_box_autoadd_support_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_support_action(raw);
  }

  @protected
  SupportAlert dco_decode_box_autoadd_support_alert(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_support_alert(raw);
  }

  @protected
  TextFlags dco_decode_box_autoadd_text_flags(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_text_flags(raw);
  }

  @protected
  TextFormat dco_decode_box_autoadd_text_format(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_text_format(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  UnsendMessage dco_decode_box_autoadd_unsend_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_unsend_message(raw);
  }

  @protected
  UpdateExtensionMessage dco_decode_box_autoadd_update_extension_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_update_extension_message(raw);
  }

  @protected
  ChangeParticipantMessage dco_decode_change_participant_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ChangeParticipantMessage(
      newParticipants: dco_decode_list_String(arr[0]),
      groupVersion: dco_decode_CastedPrimitive_u_64(arr[1]),
    );
  }

  @protected
  ConversationData dco_decode_conversation_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ConversationData(
      participants: dco_decode_list_String(arr[0]),
      cvName: dco_decode_opt_String(arr[1]),
      senderGuid: dco_decode_opt_String(arr[2]),
      afterGuid: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  DeleteTarget dco_decode_delete_target(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DeleteTarget_Chat(
          dco_decode_box_autoadd_operated_chat(raw[1]),
        );
      case 1:
        return DeleteTarget_Messages(
          dco_decode_list_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DeviceInfo dco_decode_device_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DeviceInfo(
      name: dco_decode_String(arr[0]),
      serial: dco_decode_String(arr[1]),
      osVersion: dco_decode_String(arr[2]),
      encodedData: dco_decode_opt_list_prim_u_8_strict(arr[3]),
    );
  }

  @protected
  EditMessage dco_decode_edit_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return EditMessage(
      tuuid: dco_decode_String(arr[0]),
      editPart: dco_decode_CastedPrimitive_u_64(arr[1]),
      newParts: dco_decode_message_parts(arr[2]),
    );
  }

  @protected
  ErrorMessage dco_decode_error_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ErrorMessage(
      forUuid: dco_decode_String(arr[0]),
      status: dco_decode_u_64(arr[1]),
      statusStr: dco_decode_String(arr[2]),
    );
  }

  @protected
  ExtensionApp dco_decode_extension_app(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ExtensionApp(
      name: dco_decode_String(arr[0]),
      appId: dco_decode_opt_CastedPrimitive_u_64(arr[1]),
      bundleId: dco_decode_String(arr[2]),
      balloon: dco_decode_opt_box_autoadd_balloon(arr[3]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FFIFilePackager dco_decode_ffi_file_packager(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return FFIFilePackager();
  }

  @protected
  Follow dco_decode_follow(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 18)
      throw Exception('unexpected arr length: expect 18 but see ${arr.length}');
    return Follow(
      createTimestamp: dco_decode_i_64(arr[0]),
      expires: dco_decode_i_64(arr[1]),
      id: dco_decode_String(arr[2]),
      invitationAcceptedHandles: dco_decode_list_String(arr[3]),
      invitationFromHandles: dco_decode_list_String(arr[4]),
      isFromMessages: dco_decode_bool(arr[5]),
      offerId: dco_decode_opt_String(arr[6]),
      onlyInEvent: dco_decode_bool(arr[7]),
      personIdHash: dco_decode_String(arr[8]),
      secureLocationsCapable: dco_decode_bool(arr[9]),
      shallowOrLiveSecureLocationsCapable: dco_decode_bool(arr[10]),
      source: dco_decode_String(arr[11]),
      tkPermission: dco_decode_bool(arr[12]),
      updateTimestamp: dco_decode_i_64(arr[13]),
      fallbackToLegacyAllowed: dco_decode_opt_box_autoadd_bool(arr[14]),
      optedNotToShare: dco_decode_opt_box_autoadd_bool(arr[15]),
      lastLocation: dco_decode_opt_box_autoadd_location(arr[16]),
      locateInProgress: dco_decode_bool(arr[17]),
    );
  }

  @protected
  FoundDevice dco_decode_found_device(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 35)
      throw Exception('unexpected arr length: expect 35 but see ${arr.length}');
    return FoundDevice(
      deviceModel: dco_decode_opt_String(arr[0]),
      lowPowerMode: dco_decode_opt_box_autoadd_bool(arr[1]),
      passcodeLength: dco_decode_opt_box_autoadd_i_64(arr[2]),
      id: dco_decode_opt_String(arr[3]),
      batteryStatus: dco_decode_opt_String(arr[4]),
      lostModeCapable: dco_decode_opt_box_autoadd_bool(arr[5]),
      batteryLevel: dco_decode_opt_box_autoadd_f_64(arr[6]),
      locationEnabled: dco_decode_opt_box_autoadd_bool(arr[7]),
      isConsideredAccessory: dco_decode_opt_box_autoadd_bool(arr[8]),
      location: dco_decode_opt_box_autoadd_location(arr[9]),
      modelDisplayName: dco_decode_opt_String(arr[10]),
      deviceColor: dco_decode_opt_String(arr[11]),
      activationLocked: dco_decode_opt_box_autoadd_bool(arr[12]),
      rm2State: dco_decode_opt_box_autoadd_i_64(arr[13]),
      locFoundEnabled: dco_decode_opt_box_autoadd_bool(arr[14]),
      nwd: dco_decode_opt_box_autoadd_bool(arr[15]),
      deviceStatus: dco_decode_opt_String(arr[16]),
      fmlyShare: dco_decode_opt_box_autoadd_bool(arr[17]),
      features: dco_decode_Map_String_bool(arr[18]),
      thisDevice: dco_decode_opt_box_autoadd_bool(arr[19]),
      lostModeEnabled: dco_decode_opt_box_autoadd_bool(arr[20]),
      deviceDisplayName: dco_decode_opt_String(arr[21]),
      name: dco_decode_opt_String(arr[22]),
      canWipeAfterLock: dco_decode_opt_box_autoadd_bool(arr[23]),
      isMac: dco_decode_opt_box_autoadd_bool(arr[24]),
      rawDeviceModel: dco_decode_opt_String(arr[25]),
      baUuid: dco_decode_opt_String(arr[26]),
      deviceDiscoveryId: dco_decode_opt_String(arr[27]),
      scd: dco_decode_opt_box_autoadd_bool(arr[28]),
      locationCapable: dco_decode_opt_box_autoadd_bool(arr[29]),
      wipeInProgress: dco_decode_opt_box_autoadd_bool(arr[30]),
      darkWake: dco_decode_opt_box_autoadd_bool(arr[31]),
      deviceWithYou: dco_decode_opt_box_autoadd_bool(arr[32]),
      maxMsgChar: dco_decode_opt_box_autoadd_i_64(arr[33]),
      deviceClass: dco_decode_opt_String(arr[34]),
    );
  }

  @protected
  FTMember dco_decode_ft_member(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FTMember(
      nickname: dco_decode_opt_String(arr[0]),
      handle: dco_decode_String(arr[1]),
    );
  }

  @protected
  FTMessage dco_decode_ft_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return FTMessage_LetMeInRequest(
          dco_decode_box_autoadd_let_me_in_request(raw[1]),
        );
      case 1:
        return FTMessage_LinkChanged(
          guid: dco_decode_String(raw[1]),
        );
      case 2:
        return FTMessage_JoinEvent(
          guid: dco_decode_String(raw[1]),
          participant: dco_decode_u_64(raw[2]),
          handle: dco_decode_String(raw[3]),
          ring: dco_decode_bool(raw[4]),
        );
      case 3:
        return FTMessage_AddMembers(
          guid: dco_decode_String(raw[1]),
          members: dco_decode_Set_ft_member(raw[2]),
          ring: dco_decode_bool(raw[3]),
        );
      case 4:
        return FTMessage_RemoveMembers(
          guid: dco_decode_String(raw[1]),
          members: dco_decode_Set_ft_member(raw[2]),
        );
      case 5:
        return FTMessage_LeaveEvent(
          guid: dco_decode_String(raw[1]),
          participant: dco_decode_u_64(raw[2]),
          handle: dco_decode_String(raw[3]),
        );
      case 6:
        return FTMessage_Ring(
          guid: dco_decode_String(raw[1]),
        );
      case 7:
        return FTMessage_Decline(
          guid: dco_decode_String(raw[1]),
        );
      case 8:
        return FTMessage_RespondedElsewhere(
          guid: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  FTMode dco_decode_ft_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FTMode.values[raw as int];
  }

  @protected
  FTParticipant dco_decode_ft_participant(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return FTParticipant(
      token: dco_decode_opt_String(arr[0]),
      handle: dco_decode_String(arr[1]),
      participantId: dco_decode_CastedPrimitive_u_64(arr[2]),
      lastJoinDate: dco_decode_opt_CastedPrimitive_u_64(arr[3]),
      active:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
              arr[4]),
    );
  }

  @protected
  FTSession dco_decode_ft_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return FTSession(
      groupId: dco_decode_String(arr[0]),
      myHandles: dco_decode_list_String(arr[1]),
      participants: dco_decode_Map_String_ft_participant(arr[2]),
      link:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
              arr[3]),
      members: dco_decode_Set_ft_member(arr[4]),
      reportId: dco_decode_String(arr[5]),
      startTime: dco_decode_opt_CastedPrimitive_u_64(arr[6]),
      lastRekey: dco_decode_opt_CastedPrimitive_u_64(arr[7]),
      isPropped: dco_decode_bool(arr[8]),
      isRingingInaccurate: dco_decode_bool(arr[9]),
      mode: dco_decode_opt_box_autoadd_ft_mode(arr[10]),
      recentMemberAdds: dco_decode_Map_String_CastedPrimitive_u_64(arr[11]),
    );
  }

  @protected
  HwExtra dco_decode_hw_extra(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return HwExtra(
      version: dco_decode_String(arr[0]),
      protocolVersion: dco_decode_u_32(arr[1]),
      deviceId: dco_decode_String(arr[2]),
      icloudUa: dco_decode_String(arr[3]),
      aoskitVersion: dco_decode_String(arr[4]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  IconChangeMessage dco_decode_icon_change_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return IconChangeMessage(
      file: dco_decode_opt_box_autoadd_mmcs_file(arr[0]),
      groupVersion: dco_decode_CastedPrimitive_u_64(arr[1]),
    );
  }

  @protected
  IndexedMessagePart dco_decode_indexed_message_part(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return IndexedMessagePart(
      part_: dco_decode_message_part(arr[0]),
      idx: dco_decode_opt_CastedPrimitive_usize(arr[1]),
      ext: dco_decode_opt_box_autoadd_part_extension(arr[2]),
    );
  }

  @protected
  LetMeInRequest dco_decode_let_me_in_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return LetMeInRequest(
      sharedSecret: dco_decode_list_prim_u_8_strict(arr[0]),
      pseud: dco_decode_String(arr[1]),
      requestor: dco_decode_String(arr[2]),
      nickname: dco_decode_opt_String(arr[3]),
      token: dco_decode_list_prim_u_8_strict(arr[4]),
      delegationUuid: dco_decode_opt_String(arr[5]),
      usage: dco_decode_opt_String(arr[6]),
    );
  }

  @protected
  LinkMeta dco_decode_link_meta(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LinkMeta(
      data: dco_decode_lp_link_metadata(arr[0]),
      attachments: dco_decode_list_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  List<IdsUser>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Follow> dco_decode_list_follow(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_follow).toList();
  }

  @protected
  List<FoundDevice> dco_decode_list_found_device(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_found_device).toList();
  }

  @protected
  List<FTMember> dco_decode_list_ft_member(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ft_member).toList();
  }

  @protected
  List<FTSession> dco_decode_list_ft_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ft_session).toList();
  }

  @protected
  List<IndexedMessagePart> dco_decode_list_indexed_message_part(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_indexed_message_part).toList();
  }

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_prim_u_8_strict).toList();
  }

  @protected
  List<MessageTarget> dco_decode_list_message_target(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_message_target).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<PrivateDeviceInfo> dco_decode_list_private_device_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_private_device_info).toList();
  }

  @protected
  List<(String, bool)> dco_decode_list_record_string_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_bool).toList();
  }

  @protected
  List<(String, int)> dco_decode_list_record_string_casted_primitive_u_64(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_casted_primitive_u_64)
        .toList();
  }

  @protected
  List<(String, FTParticipant)> dco_decode_list_record_string_ft_participant(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_ft_participant)
        .toList();
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<(String, SyncStatus)> dco_decode_list_record_string_sync_status(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_sync_status)
        .toList();
  }

  @protected
  List<SharedAlbum> dco_decode_list_shared_album(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_shared_album).toList();
  }

  @protected
  List<TrustedPhoneNumber> dco_decode_list_trusted_phone_number(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_trusted_phone_number).toList();
  }

  @protected
  Location dco_decode_location(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 15)
      throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
    return Location(
      address: dco_decode_opt_box_autoadd_address(arr[0]),
      altitude: dco_decode_f_64(arr[1]),
      floorLevel: dco_decode_i_64(arr[2]),
      horizontalAccuracy: dco_decode_f_64(arr[3]),
      isInaccurate: dco_decode_bool(arr[4]),
      latitude: dco_decode_f_64(arr[5]),
      locationId: dco_decode_opt_String(arr[6]),
      locationTimestamp: dco_decode_opt_box_autoadd_i_64(arr[7]),
      longitude: dco_decode_f_64(arr[8]),
      secureLocationTs: dco_decode_i_64(arr[9]),
      timestamp: dco_decode_i_64(arr[10]),
      verticalAccuracy: dco_decode_f_64(arr[11]),
      positionType: dco_decode_opt_String(arr[12]),
      isOld: dco_decode_opt_box_autoadd_bool(arr[13]),
      locationFinished: dco_decode_opt_box_autoadd_bool(arr[14]),
    );
  }

  @protected
  LoginState dco_decode_login_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LoginState_LoggedIn();
      case 1:
        return LoginState_NeedsDevice2FA();
      case 2:
        return LoginState_Needs2FAVerification();
      case 3:
        return LoginState_NeedsSMS2FA();
      case 4:
        return LoginState_NeedsSMS2FAVerification(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
              raw[1]),
        );
      case 5:
        return LoginState_NeedsExtraStep(
          dco_decode_String(raw[1]),
        );
      case 6:
        return LoginState_NeedsLogin();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  LPIconMetadata dco_decode_lp_icon_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LPIconMetadata(
      url: dco_decode_nsurl(arr[0]),
      version: dco_decode_u_8(arr[1]),
    );
  }

  @protected
  LPImageMetadata dco_decode_lp_image_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LPImageMetadata(
      size: dco_decode_String(arr[0]),
      url: dco_decode_nsurl(arr[1]),
      version: dco_decode_u_8(arr[2]),
    );
  }

  @protected
  LPLinkMetadata dco_decode_lp_link_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return LPLinkMetadata(
      imageMetadata: dco_decode_opt_box_autoadd_lp_image_metadata(arr[0]),
      version: dco_decode_u_8(arr[1]),
      iconMetadata: dco_decode_opt_box_autoadd_lp_icon_metadata(arr[2]),
      originalUrl: dco_decode_nsurl(arr[3]),
      url: dco_decode_opt_box_autoadd_nsurl(arr[4]),
      title: dco_decode_opt_String(arr[5]),
      summary: dco_decode_opt_String(arr[6]),
      image: dco_decode_opt_box_autoadd_rich_link_image_attachment_substitute(
          arr[7]),
      icon: dco_decode_opt_box_autoadd_rich_link_image_attachment_substitute(
          arr[8]),
      images:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
              arr[9]),
      icons:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
              arr[10]),
    );
  }

  @protected
  Message dco_decode_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Message_Message(
          dco_decode_box_autoadd_normal_message(raw[1]),
        );
      case 1:
        return Message_RenameMessage(
          dco_decode_box_autoadd_rename_message(raw[1]),
        );
      case 2:
        return Message_ChangeParticipants(
          dco_decode_box_autoadd_change_participant_message(raw[1]),
        );
      case 3:
        return Message_React(
          dco_decode_box_autoadd_react_message(raw[1]),
        );
      case 4:
        return Message_Delivered();
      case 5:
        return Message_Read();
      case 6:
        return Message_Typing();
      case 7:
        return Message_Unsend(
          dco_decode_box_autoadd_unsend_message(raw[1]),
        );
      case 8:
        return Message_Edit(
          dco_decode_box_autoadd_edit_message(raw[1]),
        );
      case 9:
        return Message_IconChange(
          dco_decode_box_autoadd_icon_change_message(raw[1]),
        );
      case 10:
        return Message_StopTyping();
      case 11:
        return Message_EnableSmsActivation(
          dco_decode_bool(raw[1]),
        );
      case 12:
        return Message_MessageReadOnDevice();
      case 13:
        return Message_SmsConfirmSent(
          dco_decode_bool(raw[1]),
        );
      case 14:
        return Message_MarkUnread();
      case 15:
        return Message_PeerCacheInvalidate();
      case 16:
        return Message_UpdateExtension(
          dco_decode_box_autoadd_update_extension_message(raw[1]),
        );
      case 17:
        return Message_Error(
          dco_decode_box_autoadd_error_message(raw[1]),
        );
      case 18:
        return Message_MoveToRecycleBin(
          dco_decode_box_autoadd_move_to_recycle_bin_message(raw[1]),
        );
      case 19:
        return Message_RecoverChat(
          dco_decode_box_autoadd_operated_chat(raw[1]),
        );
      case 20:
        return Message_PermanentDelete(
          dco_decode_box_autoadd_permanent_delete_message(raw[1]),
        );
      case 21:
        return Message_Unschedule();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MessageInst dco_decode_message_inst(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return MessageInst(
      id: dco_decode_String(arr[0]),
      sender: dco_decode_opt_String(arr[1]),
      conversation: dco_decode_opt_box_autoadd_conversation_data(arr[2]),
      message: dco_decode_message(arr[3]),
      sentTimestamp: dco_decode_CastedPrimitive_u_64(arr[4]),
      target: dco_decode_opt_list_message_target(arr[5]),
      sendDelivered: dco_decode_bool(arr[6]),
      verificationFailed: dco_decode_bool(arr[7]),
    );
  }

  @protected
  MessagePart dco_decode_message_part(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MessagePart_Text(
          dco_decode_String(raw[1]),
          dco_decode_box_autoadd_text_format(raw[2]),
        );
      case 1:
        return MessagePart_Attachment(
          dco_decode_box_autoadd_attachment(raw[1]),
        );
      case 2:
        return MessagePart_Mention(
          dco_decode_String(raw[1]),
          dco_decode_String(raw[2]),
        );
      case 3:
        return MessagePart_Object(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MessageParts dco_decode_message_parts(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageParts(
      field0: dco_decode_list_indexed_message_part(arr[0]),
    );
  }

  @protected
  MessageTarget dco_decode_message_target(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MessageTarget_Token(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return MessageTarget_Uuid(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MessageType dco_decode_message_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MessageType_IMessage();
      case 1:
        return MessageType_SMS(
          isPhone: dco_decode_bool(raw[1]),
          usingNumber: dco_decode_String(raw[2]),
          fromHandle: dco_decode_opt_String(raw[3]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MMCSFile dco_decode_mmcs_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return MMCSFile(
      signature: dco_decode_list_prim_u_8_strict(arr[0]),
      object: dco_decode_String(arr[1]),
      url: dco_decode_String(arr[2]),
      key: dco_decode_list_prim_u_8_strict(arr[3]),
      size: dco_decode_CastedPrimitive_usize(arr[4]),
    );
  }

  @protected
  MMCSTransferProgress dco_decode_mmcs_transfer_progress(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return MMCSTransferProgress(
      prog: dco_decode_CastedPrimitive_usize(arr[0]),
      total: dco_decode_CastedPrimitive_usize(arr[1]),
      file: dco_decode_opt_box_autoadd_mmcs_file(arr[2]),
    );
  }

  @protected
  MoveToRecycleBinMessage dco_decode_move_to_recycle_bin_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MoveToRecycleBinMessage(
      target: dco_decode_delete_target(arr[0]),
      recoverableDeleteDate: dco_decode_CastedPrimitive_u_64(arr[1]),
    );
  }

  @protected
  MyAsyncRuntime dco_decode_my_async_runtime(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return MyAsyncRuntime();
  }

  @protected
  NormalMessage dco_decode_normal_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return NormalMessage(
      parts: dco_decode_message_parts(arr[0]),
      effect: dco_decode_opt_String(arr[1]),
      replyGuid: dco_decode_opt_String(arr[2]),
      replyPart: dco_decode_opt_String(arr[3]),
      service: dco_decode_message_type(arr[4]),
      subject: dco_decode_opt_String(arr[5]),
      app: dco_decode_opt_box_autoadd_extension_app(arr[6]),
      linkMeta: dco_decode_opt_box_autoadd_link_meta(arr[7]),
      voice: dco_decode_bool(arr[8]),
      scheduled: dco_decode_opt_box_autoadd_schedule_mode(arr[9]),
    );
  }

  @protected
  NSDictionaryClass dco_decode_ns_dictionary_class(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NSDictionaryClass.values[raw as int];
  }

  @protected
  NSURL dco_decode_nsurl(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return NSURL(
      base: dco_decode_String(arr[0]),
      relative: dco_decode_String(arr[1]),
    );
  }

  @protected
  OperatedChat dco_decode_operated_chat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return OperatedChat(
      participants: dco_decode_list_String(arr[0]),
      groupId: dco_decode_String(arr[1]),
      guid: dco_decode_String(arr[2]),
      deleteIncomingMessages: dco_decode_opt_box_autoadd_bool(arr[3]),
      wasReportedAsJunk: dco_decode_opt_box_autoadd_bool(arr[4]),
    );
  }

  @protected
  int? dco_decode_opt_CastedPrimitive_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_CastedPrimitive_u_64(raw);
  }

  @protected
  int? dco_decode_opt_CastedPrimitive_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_CastedPrimitive_usize(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  ConversationLink?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
            raw);
  }

  @protected
  ConversationParticipant?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
            raw);
  }

  @protected
  IdsUser?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
            raw);
  }

  @protected
  JoinedOsConfig?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
            raw);
  }

  @protected
  NsArrayLpIconMetadata?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
            raw);
  }

  @protected
  NsArrayLpImageMetadata?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
            raw);
  }

  @protected
  Address? dco_decode_opt_box_autoadd_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_address(raw);
  }

  @protected
  Attachment? dco_decode_opt_box_autoadd_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_attachment(raw);
  }

  @protected
  Balloon? dco_decode_opt_box_autoadd_balloon(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_balloon(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  ConversationData? dco_decode_opt_box_autoadd_conversation_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_conversation_data(raw);
  }

  @protected
  ExtensionApp? dco_decode_opt_box_autoadd_extension_app(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_extension_app(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  FTMode? dco_decode_opt_box_autoadd_ft_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_ft_mode(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  LinkMeta? dco_decode_opt_box_autoadd_link_meta(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_link_meta(raw);
  }

  @protected
  Location? dco_decode_opt_box_autoadd_location(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_location(raw);
  }

  @protected
  LoginState? dco_decode_opt_box_autoadd_login_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_login_state(raw);
  }

  @protected
  LPIconMetadata? dco_decode_opt_box_autoadd_lp_icon_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_lp_icon_metadata(raw);
  }

  @protected
  LPImageMetadata? dco_decode_opt_box_autoadd_lp_image_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_lp_image_metadata(raw);
  }

  @protected
  MMCSFile? dco_decode_opt_box_autoadd_mmcs_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_mmcs_file(raw);
  }

  @protected
  NSURL? dco_decode_opt_box_autoadd_nsurl(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_nsurl(raw);
  }

  @protected
  PartExtension? dco_decode_opt_box_autoadd_part_extension(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_part_extension(raw);
  }

  @protected
  PushMessage? dco_decode_opt_box_autoadd_push_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_push_message(raw);
  }

  @protected
  (String, BigInt)? dco_decode_opt_box_autoadd_record_string_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_record_string_u_64(raw);
  }

  @protected
  RichLinkImageAttachmentSubstitute?
      dco_decode_opt_box_autoadd_rich_link_image_attachment_substitute(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_rich_link_image_attachment_substitute(raw);
  }

  @protected
  ScheduleMode? dco_decode_opt_box_autoadd_schedule_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_schedule_mode(raw);
  }

  @protected
  SupportAction? dco_decode_opt_box_autoadd_support_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_support_action(raw);
  }

  @protected
  SupportAlert? dco_decode_opt_box_autoadd_support_alert(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_support_alert(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  List<MessageTarget>? dco_decode_opt_list_message_target(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_message_target(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  PartExtension dco_decode_part_extension(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PartExtension_Sticker(
          msgWidth: dco_decode_f_64(raw[1]),
          rotation: dco_decode_f_64(raw[2]),
          sai: dco_decode_u_64(raw[3]),
          scale: dco_decode_f_64(raw[4]),
          update: dco_decode_opt_box_autoadd_bool(raw[5]),
          sli: dco_decode_u_64(raw[6]),
          normalizedX: dco_decode_f_64(raw[7]),
          normalizedY: dco_decode_f_64(raw[8]),
          version: dco_decode_u_64(raw[9]),
          hash: dco_decode_String(raw[10]),
          safi: dco_decode_u_64(raw[11]),
          effectType: dco_decode_i_64(raw[12]),
          stickerId: dco_decode_String(raw[13]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  PermanentDeleteMessage dco_decode_permanent_delete_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PermanentDeleteMessage(
      target: dco_decode_delete_target(arr[0]),
      isScheduled: dco_decode_bool(arr[1]),
    );
  }

  @protected
  PollResult dco_decode_poll_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PollResult_Stop();
      case 1:
        return PollResult_Cont(
          dco_decode_opt_box_autoadd_push_message(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  PrivateDeviceInfo dco_decode_private_device_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return PrivateDeviceInfo(
      uuid: dco_decode_opt_String(arr[0]),
      deviceName: dco_decode_opt_String(arr[1]),
      token: dco_decode_list_prim_u_8_strict(arr[2]),
      isHsaTrusted: dco_decode_bool(arr[3]),
      identites: dco_decode_list_String(arr[4]),
      subServices: dco_decode_list_String(arr[5]),
    );
  }

  @protected
  PushMessage dco_decode_push_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PushMessage_IMessage(
          dco_decode_box_autoadd_message_inst(raw[1]),
        );
      case 1:
        return PushMessage_SendConfirm(
          uuid: dco_decode_String(raw[1]),
          error: dco_decode_opt_String(raw[2]),
        );
      case 2:
        return PushMessage_RegistrationState(
          dco_decode_box_autoadd_register_state(raw[1]),
        );
      case 3:
        return PushMessage_NewPhotostream(
          dco_decode_box_autoadd_shared_album(raw[1]),
        );
      case 4:
        return PushMessage_FaceTime(
          dco_decode_box_autoadd_ft_message(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ReactMessage dco_decode_react_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ReactMessage(
      toUuid: dco_decode_String(arr[0]),
      toPart: dco_decode_opt_CastedPrimitive_u_64(arr[1]),
      reaction: dco_decode_react_message_type(arr[2]),
      toText: dco_decode_String(arr[3]),
    );
  }

  @protected
  ReactMessageType dco_decode_react_message_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ReactMessageType_React(
          reaction: dco_decode_box_autoadd_reaction(raw[1]),
          enable: dco_decode_bool(raw[2]),
        );
      case 1:
        return ReactMessageType_Extension(
          spec: dco_decode_box_autoadd_extension_app(raw[1]),
          body: dco_decode_box_autoadd_message_parts(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Reaction dco_decode_reaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Reaction_Heart();
      case 1:
        return Reaction_Like();
      case 2:
        return Reaction_Dislike();
      case 3:
        return Reaction_Laugh();
      case 4:
        return Reaction_Emphasize();
      case 5:
        return Reaction_Question();
      case 6:
        return Reaction_Emoji(
          dco_decode_String(raw[1]),
        );
      case 7:
        return Reaction_Sticker(
          spec: dco_decode_opt_box_autoadd_extension_app(raw[1]),
          body: dco_decode_box_autoadd_message_parts(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  (List<SharedAlbum>, List<String>)
      dco_decode_record_list_shared_album_list_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_shared_album(arr[0]),
      dco_decode_list_String(arr[1]),
    );
  }

  @protected
  (List<TrustedPhoneNumber>, LoginState?)
      dco_decode_record_list_trusted_phone_number_opt_box_autoadd_login_state(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_trusted_phone_number(arr[0]),
      dco_decode_opt_box_autoadd_login_state(arr[1]),
    );
  }

  @protected
  (
    LoginState,
    IdsUser?
  ) dco_decode_record_login_state_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_ids_user(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_login_state(arr[0]),
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          arr[1]),
    );
  }

  @protected
  (
    Map<String, SyncStatus>,
    (String, BigInt)?
  ) dco_decode_record_map_string_sync_status_opt_box_autoadd_record_string_u_64(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Map_String_sync_status(arr[0]),
      dco_decode_opt_box_autoadd_record_string_u_64(arr[1]),
    );
  }

  @protected
  (String, bool) dco_decode_record_string_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_bool(arr[1]),
    );
  }

  @protected
  (String, int) dco_decode_record_string_casted_primitive_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_CastedPrimitive_u_64(arr[1]),
    );
  }

  @protected
  (String, FTParticipant) dco_decode_record_string_ft_participant(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_ft_participant(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (String, SyncStatus) dco_decode_record_string_sync_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_sync_status(arr[1]),
    );
  }

  @protected
  (String, BigInt) dco_decode_record_string_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_u_64(arr[1]),
    );
  }

  @protected
  RegisterState dco_decode_register_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return RegisterState_Registered(
          nextS: dco_decode_i_64(raw[1]),
        );
      case 1:
        return RegisterState_Registering();
      case 2:
        return RegisterState_Failed(
          retryWait: dco_decode_opt_box_autoadd_u_64(raw[1]),
          error: dco_decode_String(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  RegistrationPhase dco_decode_registration_phase(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RegistrationPhase.values[raw as int];
  }

  @protected
  RenameMessage dco_decode_rename_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RenameMessage(
      newName: dco_decode_String(arr[0]),
    );
  }

  @protected
  RichLinkImageAttachmentSubstitute
      dco_decode_rich_link_image_attachment_substitute(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RichLinkImageAttachmentSubstitute(
      mimeType: dco_decode_String(arr[0]),
      richLinkImageAttachmentSubstituteIndex: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  ScheduleMode dco_decode_schedule_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ScheduleMode(
      ms: dco_decode_CastedPrimitive_u_64(arr[0]),
      schedule: dco_decode_bool(arr[1]),
    );
  }

  @protected
  SharedAlbum dco_decode_shared_album(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return SharedAlbum(
      name: dco_decode_opt_String(arr[0]),
      fullname: dco_decode_opt_String(arr[1]),
      email: dco_decode_opt_String(arr[2]),
      albumguid: dco_decode_String(arr[3]),
      sharingtype: dco_decode_String(arr[4]),
      subscriptiondate: dco_decode_opt_String(arr[5]),
      albumlocation: dco_decode_opt_String(arr[6]),
      assets: dco_decode_list_String(arr[7]),
      delete: dco_decode_opt_String(arr[8]),
    );
  }

  @protected
  SupportAction dco_decode_support_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SupportAction(
      url: dco_decode_String(arr[0]),
      button: dco_decode_String(arr[1]),
    );
  }

  @protected
  SupportAlert dco_decode_support_alert(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SupportAlert(
      title: dco_decode_String(arr[0]),
      body: dco_decode_String(arr[1]),
      action: dco_decode_opt_box_autoadd_support_action(arr[2]),
    );
  }

  @protected
  SyncStatus dco_decode_sync_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SyncStatus_Synced();
      case 1:
        return SyncStatus_Downloading(
          progress: dco_decode_usize(raw[1]),
          total: dco_decode_usize(raw[2]),
        );
      case 2:
        return SyncStatus_Uploading(
          progress: dco_decode_usize(raw[1]),
          total: dco_decode_usize(raw[2]),
        );
      case 3:
        return SyncStatus_Syncing();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TextEffect dco_decode_text_effect(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TextEffect.values[raw as int];
  }

  @protected
  TextFlags dco_decode_text_flags(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TextFlags(
      bold: dco_decode_bool(arr[0]),
      italic: dco_decode_bool(arr[1]),
      underline: dco_decode_bool(arr[2]),
      strikethrough: dco_decode_bool(arr[3]),
    );
  }

  @protected
  TextFormat dco_decode_text_format(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TextFormat_Flags(
          dco_decode_box_autoadd_text_flags(raw[1]),
        );
      case 1:
        return TextFormat_Effect(
          dco_decode_text_effect(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TransferProgress dco_decode_transfer_progress(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TransferProgress(
      prog: dco_decode_CastedPrimitive_usize(arr[0]),
      total: dco_decode_CastedPrimitive_usize(arr[1]),
      attachment: dco_decode_opt_box_autoadd_attachment(arr[2]),
    );
  }

  @protected
  TrustedPhoneNumber dco_decode_trusted_phone_number(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TrustedPhoneNumber(
      numberWithDialCode: dco_decode_String(arr[0]),
      lastTwoDigits: dco_decode_String(arr[1]),
      pushMode: dco_decode_String(arr[2]),
      id: dco_decode_u_32(arr[3]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UnsendMessage dco_decode_unsend_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UnsendMessage(
      tuuid: dco_decode_String(arr[0]),
      editPart: dco_decode_CastedPrimitive_u_64(arr[1]),
    );
  }

  @protected
  UpdateExtensionMessage dco_decode_update_extension_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UpdateExtensionMessage(
      forUuid: dco_decode_String(arr[0]),
      ext: dco_decode_part_extension(arr[1]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcPushState
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPushStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConversationLink
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConversationLinkImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConversationParticipant
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConversationParticipantImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FindMyFriendsClientDefaultAnisetteProvider
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FindMyFriendsClientDefaultAnisetteProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FindMyPhoneClientDefaultAnisetteProvider
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FindMyPhoneClientDefaultAnisetteProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IdsUser
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IdsUserImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JoinedOsConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinedOsConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NsArrayLpIconMetadata
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NsArrayLpIconMetadataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NsArrayLpImageMetadata
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NsArrayLpImageMetadataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VerifyBody
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyBodyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FindMyFriendsClientDefaultAnisetteProvider
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FindMyFriendsClientDefaultAnisetteProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FindMyPhoneClientDefaultAnisetteProvider
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FindMyPhoneClientDefaultAnisetteProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPushState
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPushStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IdsUser
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IdsUserImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JoinedOsConfig
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinedOsConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VerifyBody
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyBodyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  int sse_decode_CastedPrimitive_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_u_64(deserializer);
    return inner.toInt();
  }

  @protected
  int sse_decode_CastedPrimitive_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return inner.toInt();
  }

  @protected
  Map<String, int> sse_decode_Map_String_CastedPrimitive_u_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_casted_primitive_u_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, bool> sse_decode_Map_String_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_bool(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, FTParticipant> sse_decode_Map_String_ft_participant(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_ft_participant(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, SyncStatus> sse_decode_Map_String_sync_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_sync_status(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcPushState
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPushStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConversationLink
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConversationLinkImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConversationParticipant
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConversationParticipantImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FindMyFriendsClientDefaultAnisetteProvider
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FindMyFriendsClientDefaultAnisetteProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FindMyPhoneClientDefaultAnisetteProvider
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FindMyPhoneClientDefaultAnisetteProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IdsUser
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IdsUserImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JoinedOsConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinedOsConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NsArrayLpIconMetadata
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NsArrayLpIconMetadataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NsArrayLpImageMetadata
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NsArrayLpImageMetadataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VerifyBody
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyBodyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Set<FTMember> sse_decode_Set_ft_member(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_ft_member(deserializer);
    return Set.from(inner);
  }

  @protected
  RustStreamSink<MMCSTransferProgress>
      sse_decode_StreamSink_mmcs_transfer_progress_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<TransferProgress> sse_decode_StreamSink_transfer_progress_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Address sse_decode_address(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_administrativeArea = sse_decode_opt_String(deserializer);
    var var_country = sse_decode_String(deserializer);
    var var_countryCode = sse_decode_String(deserializer);
    var var_formattedAddressLines = sse_decode_opt_list_String(deserializer);
    var var_locality = sse_decode_opt_String(deserializer);
    var var_stateCode = sse_decode_opt_String(deserializer);
    var var_streetAddress = sse_decode_opt_String(deserializer);
    var var_streetName = sse_decode_opt_String(deserializer);
    return Address(
        administrativeArea: var_administrativeArea,
        country: var_country,
        countryCode: var_countryCode,
        formattedAddressLines: var_formattedAddressLines,
        locality: var_locality,
        stateCode: var_stateCode,
        streetAddress: var_streetAddress,
        streetName: var_streetName);
  }

  @protected
  Attachment sse_decode_attachment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_aType = sse_decode_attachment_type(deserializer);
    var var_part_ = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_utiType = sse_decode_String(deserializer);
    var var_mime = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_iris = sse_decode_bool(deserializer);
    return Attachment(
        aType: var_aType,
        part_: var_part_,
        utiType: var_utiType,
        mime: var_mime,
        name: var_name,
        iris: var_iris);
  }

  @protected
  AttachmentType sse_decode_attachment_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return AttachmentType_Inline(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_mmcs_file(deserializer);
        return AttachmentType_MMCS(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Balloon sse_decode_balloon(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_String(deserializer);
    var var_session = sse_decode_opt_String(deserializer);
    var var_layout = sse_decode_balloon_layout(deserializer);
    var var_ldText = sse_decode_opt_String(deserializer);
    var var_isLive = sse_decode_bool(deserializer);
    var var_icon = sse_decode_list_prim_u_8_strict(deserializer);
    return Balloon(
        url: var_url,
        session: var_session,
        layout: var_layout,
        ldText: var_ldText,
        isLive: var_isLive,
        icon: var_icon);
  }

  @protected
  BalloonLayout sse_decode_balloon_layout(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_imageSubtitle = sse_decode_String(deserializer);
        var var_imageTitle = sse_decode_String(deserializer);
        var var_caption = sse_decode_String(deserializer);
        var var_secondarySubcaption = sse_decode_String(deserializer);
        var var_tertiarySubcaption = sse_decode_String(deserializer);
        var var_subcaption = sse_decode_String(deserializer);
        var var_class_ = sse_decode_ns_dictionary_class(deserializer);
        return BalloonLayout_TemplateLayout(
            imageSubtitle: var_imageSubtitle,
            imageTitle: var_imageTitle,
            caption: var_caption,
            secondarySubcaption: var_secondarySubcaption,
            tertiarySubcaption: var_tertiarySubcaption,
            subcaption: var_subcaption,
            class_: var_class_);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ConversationLink
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
        deserializer));
  }

  @protected
  ConversationParticipant
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
        deserializer));
  }

  @protected
  IdsUser
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
        deserializer));
  }

  @protected
  JoinedOsConfig
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
        deserializer));
  }

  @protected
  NsArrayLpIconMetadata
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
        deserializer));
  }

  @protected
  NsArrayLpImageMetadata
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
        deserializer));
  }

  @protected
  Address sse_decode_box_autoadd_address(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_address(deserializer));
  }

  @protected
  Attachment sse_decode_box_autoadd_attachment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_attachment(deserializer));
  }

  @protected
  Balloon sse_decode_box_autoadd_balloon(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_balloon(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  ChangeParticipantMessage sse_decode_box_autoadd_change_participant_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_change_participant_message(deserializer));
  }

  @protected
  ConversationData sse_decode_box_autoadd_conversation_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_conversation_data(deserializer));
  }

  @protected
  EditMessage sse_decode_box_autoadd_edit_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_edit_message(deserializer));
  }

  @protected
  ErrorMessage sse_decode_box_autoadd_error_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_error_message(deserializer));
  }

  @protected
  ExtensionApp sse_decode_box_autoadd_extension_app(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_extension_app(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  FTMessage sse_decode_box_autoadd_ft_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ft_message(deserializer));
  }

  @protected
  FTMode sse_decode_box_autoadd_ft_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ft_mode(deserializer));
  }

  @protected
  HwExtra sse_decode_box_autoadd_hw_extra(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_hw_extra(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  IconChangeMessage sse_decode_box_autoadd_icon_change_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_icon_change_message(deserializer));
  }

  @protected
  LetMeInRequest sse_decode_box_autoadd_let_me_in_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_let_me_in_request(deserializer));
  }

  @protected
  LinkMeta sse_decode_box_autoadd_link_meta(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_link_meta(deserializer));
  }

  @protected
  Location sse_decode_box_autoadd_location(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_location(deserializer));
  }

  @protected
  LoginState sse_decode_box_autoadd_login_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_login_state(deserializer));
  }

  @protected
  LPIconMetadata sse_decode_box_autoadd_lp_icon_metadata(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_lp_icon_metadata(deserializer));
  }

  @protected
  LPImageMetadata sse_decode_box_autoadd_lp_image_metadata(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_lp_image_metadata(deserializer));
  }

  @protected
  Message sse_decode_box_autoadd_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_message(deserializer));
  }

  @protected
  MessageInst sse_decode_box_autoadd_message_inst(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_message_inst(deserializer));
  }

  @protected
  MessageParts sse_decode_box_autoadd_message_parts(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_message_parts(deserializer));
  }

  @protected
  MMCSFile sse_decode_box_autoadd_mmcs_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_mmcs_file(deserializer));
  }

  @protected
  MoveToRecycleBinMessage sse_decode_box_autoadd_move_to_recycle_bin_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_move_to_recycle_bin_message(deserializer));
  }

  @protected
  NormalMessage sse_decode_box_autoadd_normal_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_normal_message(deserializer));
  }

  @protected
  NSURL sse_decode_box_autoadd_nsurl(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_nsurl(deserializer));
  }

  @protected
  OperatedChat sse_decode_box_autoadd_operated_chat(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_operated_chat(deserializer));
  }

  @protected
  PartExtension sse_decode_box_autoadd_part_extension(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_part_extension(deserializer));
  }

  @protected
  PermanentDeleteMessage sse_decode_box_autoadd_permanent_delete_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_permanent_delete_message(deserializer));
  }

  @protected
  PushMessage sse_decode_box_autoadd_push_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_push_message(deserializer));
  }

  @protected
  ReactMessage sse_decode_box_autoadd_react_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_react_message(deserializer));
  }

  @protected
  Reaction sse_decode_box_autoadd_reaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_reaction(deserializer));
  }

  @protected
  (String, BigInt) sse_decode_box_autoadd_record_string_u_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_record_string_u_64(deserializer));
  }

  @protected
  RegisterState sse_decode_box_autoadd_register_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_register_state(deserializer));
  }

  @protected
  RenameMessage sse_decode_box_autoadd_rename_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_rename_message(deserializer));
  }

  @protected
  RichLinkImageAttachmentSubstitute
      sse_decode_box_autoadd_rich_link_image_attachment_substitute(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_rich_link_image_attachment_substitute(deserializer));
  }

  @protected
  ScheduleMode sse_decode_box_autoadd_schedule_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_schedule_mode(deserializer));
  }

  @protected
  SharedAlbum sse_decode_box_autoadd_shared_album(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_shared_album(deserializer));
  }

  @protected
  SupportAction sse_decode_box_autoadd_support_action(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_support_action(deserializer));
  }

  @protected
  SupportAlert sse_decode_box_autoadd_support_alert(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_support_alert(deserializer));
  }

  @protected
  TextFlags sse_decode_box_autoadd_text_flags(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_text_flags(deserializer));
  }

  @protected
  TextFormat sse_decode_box_autoadd_text_format(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_text_format(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  UnsendMessage sse_decode_box_autoadd_unsend_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_unsend_message(deserializer));
  }

  @protected
  UpdateExtensionMessage sse_decode_box_autoadd_update_extension_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_update_extension_message(deserializer));
  }

  @protected
  ChangeParticipantMessage sse_decode_change_participant_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_newParticipants = sse_decode_list_String(deserializer);
    var var_groupVersion = sse_decode_CastedPrimitive_u_64(deserializer);
    return ChangeParticipantMessage(
        newParticipants: var_newParticipants, groupVersion: var_groupVersion);
  }

  @protected
  ConversationData sse_decode_conversation_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_participants = sse_decode_list_String(deserializer);
    var var_cvName = sse_decode_opt_String(deserializer);
    var var_senderGuid = sse_decode_opt_String(deserializer);
    var var_afterGuid = sse_decode_opt_String(deserializer);
    return ConversationData(
        participants: var_participants,
        cvName: var_cvName,
        senderGuid: var_senderGuid,
        afterGuid: var_afterGuid);
  }

  @protected
  DeleteTarget sse_decode_delete_target(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_operated_chat(deserializer);
        return DeleteTarget_Chat(var_field0);
      case 1:
        var var_field0 = sse_decode_list_String(deserializer);
        return DeleteTarget_Messages(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DeviceInfo sse_decode_device_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_serial = sse_decode_String(deserializer);
    var var_osVersion = sse_decode_String(deserializer);
    var var_encodedData = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return DeviceInfo(
        name: var_name,
        serial: var_serial,
        osVersion: var_osVersion,
        encodedData: var_encodedData);
  }

  @protected
  EditMessage sse_decode_edit_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tuuid = sse_decode_String(deserializer);
    var var_editPart = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_newParts = sse_decode_message_parts(deserializer);
    return EditMessage(
        tuuid: var_tuuid, editPart: var_editPart, newParts: var_newParts);
  }

  @protected
  ErrorMessage sse_decode_error_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_forUuid = sse_decode_String(deserializer);
    var var_status = sse_decode_u_64(deserializer);
    var var_statusStr = sse_decode_String(deserializer);
    return ErrorMessage(
        forUuid: var_forUuid, status: var_status, statusStr: var_statusStr);
  }

  @protected
  ExtensionApp sse_decode_extension_app(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_appId = sse_decode_opt_CastedPrimitive_u_64(deserializer);
    var var_bundleId = sse_decode_String(deserializer);
    var var_balloon = sse_decode_opt_box_autoadd_balloon(deserializer);
    return ExtensionApp(
        name: var_name,
        appId: var_appId,
        bundleId: var_bundleId,
        balloon: var_balloon);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FFIFilePackager sse_decode_ffi_file_packager(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FFIFilePackager();
  }

  @protected
  Follow sse_decode_follow(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_createTimestamp = sse_decode_i_64(deserializer);
    var var_expires = sse_decode_i_64(deserializer);
    var var_id = sse_decode_String(deserializer);
    var var_invitationAcceptedHandles = sse_decode_list_String(deserializer);
    var var_invitationFromHandles = sse_decode_list_String(deserializer);
    var var_isFromMessages = sse_decode_bool(deserializer);
    var var_offerId = sse_decode_opt_String(deserializer);
    var var_onlyInEvent = sse_decode_bool(deserializer);
    var var_personIdHash = sse_decode_String(deserializer);
    var var_secureLocationsCapable = sse_decode_bool(deserializer);
    var var_shallowOrLiveSecureLocationsCapable = sse_decode_bool(deserializer);
    var var_source = sse_decode_String(deserializer);
    var var_tkPermission = sse_decode_bool(deserializer);
    var var_updateTimestamp = sse_decode_i_64(deserializer);
    var var_fallbackToLegacyAllowed =
        sse_decode_opt_box_autoadd_bool(deserializer);
    var var_optedNotToShare = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_lastLocation = sse_decode_opt_box_autoadd_location(deserializer);
    var var_locateInProgress = sse_decode_bool(deserializer);
    return Follow(
        createTimestamp: var_createTimestamp,
        expires: var_expires,
        id: var_id,
        invitationAcceptedHandles: var_invitationAcceptedHandles,
        invitationFromHandles: var_invitationFromHandles,
        isFromMessages: var_isFromMessages,
        offerId: var_offerId,
        onlyInEvent: var_onlyInEvent,
        personIdHash: var_personIdHash,
        secureLocationsCapable: var_secureLocationsCapable,
        shallowOrLiveSecureLocationsCapable:
            var_shallowOrLiveSecureLocationsCapable,
        source: var_source,
        tkPermission: var_tkPermission,
        updateTimestamp: var_updateTimestamp,
        fallbackToLegacyAllowed: var_fallbackToLegacyAllowed,
        optedNotToShare: var_optedNotToShare,
        lastLocation: var_lastLocation,
        locateInProgress: var_locateInProgress);
  }

  @protected
  FoundDevice sse_decode_found_device(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_deviceModel = sse_decode_opt_String(deserializer);
    var var_lowPowerMode = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_passcodeLength = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_id = sse_decode_opt_String(deserializer);
    var var_batteryStatus = sse_decode_opt_String(deserializer);
    var var_lostModeCapable = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_batteryLevel = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_locationEnabled = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_isConsideredAccessory =
        sse_decode_opt_box_autoadd_bool(deserializer);
    var var_location = sse_decode_opt_box_autoadd_location(deserializer);
    var var_modelDisplayName = sse_decode_opt_String(deserializer);
    var var_deviceColor = sse_decode_opt_String(deserializer);
    var var_activationLocked = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_rm2State = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_locFoundEnabled = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_nwd = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_deviceStatus = sse_decode_opt_String(deserializer);
    var var_fmlyShare = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_features = sse_decode_Map_String_bool(deserializer);
    var var_thisDevice = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_lostModeEnabled = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_deviceDisplayName = sse_decode_opt_String(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_canWipeAfterLock = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_isMac = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_rawDeviceModel = sse_decode_opt_String(deserializer);
    var var_baUuid = sse_decode_opt_String(deserializer);
    var var_deviceDiscoveryId = sse_decode_opt_String(deserializer);
    var var_scd = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_locationCapable = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_wipeInProgress = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_darkWake = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_deviceWithYou = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_maxMsgChar = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_deviceClass = sse_decode_opt_String(deserializer);
    return FoundDevice(
        deviceModel: var_deviceModel,
        lowPowerMode: var_lowPowerMode,
        passcodeLength: var_passcodeLength,
        id: var_id,
        batteryStatus: var_batteryStatus,
        lostModeCapable: var_lostModeCapable,
        batteryLevel: var_batteryLevel,
        locationEnabled: var_locationEnabled,
        isConsideredAccessory: var_isConsideredAccessory,
        location: var_location,
        modelDisplayName: var_modelDisplayName,
        deviceColor: var_deviceColor,
        activationLocked: var_activationLocked,
        rm2State: var_rm2State,
        locFoundEnabled: var_locFoundEnabled,
        nwd: var_nwd,
        deviceStatus: var_deviceStatus,
        fmlyShare: var_fmlyShare,
        features: var_features,
        thisDevice: var_thisDevice,
        lostModeEnabled: var_lostModeEnabled,
        deviceDisplayName: var_deviceDisplayName,
        name: var_name,
        canWipeAfterLock: var_canWipeAfterLock,
        isMac: var_isMac,
        rawDeviceModel: var_rawDeviceModel,
        baUuid: var_baUuid,
        deviceDiscoveryId: var_deviceDiscoveryId,
        scd: var_scd,
        locationCapable: var_locationCapable,
        wipeInProgress: var_wipeInProgress,
        darkWake: var_darkWake,
        deviceWithYou: var_deviceWithYou,
        maxMsgChar: var_maxMsgChar,
        deviceClass: var_deviceClass);
  }

  @protected
  FTMember sse_decode_ft_member(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_nickname = sse_decode_opt_String(deserializer);
    var var_handle = sse_decode_String(deserializer);
    return FTMember(nickname: var_nickname, handle: var_handle);
  }

  @protected
  FTMessage sse_decode_ft_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_let_me_in_request(deserializer);
        return FTMessage_LetMeInRequest(var_field0);
      case 1:
        var var_guid = sse_decode_String(deserializer);
        return FTMessage_LinkChanged(guid: var_guid);
      case 2:
        var var_guid = sse_decode_String(deserializer);
        var var_participant = sse_decode_u_64(deserializer);
        var var_handle = sse_decode_String(deserializer);
        var var_ring = sse_decode_bool(deserializer);
        return FTMessage_JoinEvent(
            guid: var_guid,
            participant: var_participant,
            handle: var_handle,
            ring: var_ring);
      case 3:
        var var_guid = sse_decode_String(deserializer);
        var var_members = sse_decode_Set_ft_member(deserializer);
        var var_ring = sse_decode_bool(deserializer);
        return FTMessage_AddMembers(
            guid: var_guid, members: var_members, ring: var_ring);
      case 4:
        var var_guid = sse_decode_String(deserializer);
        var var_members = sse_decode_Set_ft_member(deserializer);
        return FTMessage_RemoveMembers(guid: var_guid, members: var_members);
      case 5:
        var var_guid = sse_decode_String(deserializer);
        var var_participant = sse_decode_u_64(deserializer);
        var var_handle = sse_decode_String(deserializer);
        return FTMessage_LeaveEvent(
            guid: var_guid, participant: var_participant, handle: var_handle);
      case 6:
        var var_guid = sse_decode_String(deserializer);
        return FTMessage_Ring(guid: var_guid);
      case 7:
        var var_guid = sse_decode_String(deserializer);
        return FTMessage_Decline(guid: var_guid);
      case 8:
        var var_guid = sse_decode_String(deserializer);
        return FTMessage_RespondedElsewhere(guid: var_guid);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  FTMode sse_decode_ft_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FTMode.values[inner];
  }

  @protected
  FTParticipant sse_decode_ft_participant(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_token = sse_decode_opt_String(deserializer);
    var var_handle = sse_decode_String(deserializer);
    var var_participantId = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_lastJoinDate = sse_decode_opt_CastedPrimitive_u_64(deserializer);
    var var_active =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
            deserializer);
    return FTParticipant(
        token: var_token,
        handle: var_handle,
        participantId: var_participantId,
        lastJoinDate: var_lastJoinDate,
        active: var_active);
  }

  @protected
  FTSession sse_decode_ft_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_groupId = sse_decode_String(deserializer);
    var var_myHandles = sse_decode_list_String(deserializer);
    var var_participants = sse_decode_Map_String_ft_participant(deserializer);
    var var_link =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
            deserializer);
    var var_members = sse_decode_Set_ft_member(deserializer);
    var var_reportId = sse_decode_String(deserializer);
    var var_startTime = sse_decode_opt_CastedPrimitive_u_64(deserializer);
    var var_lastRekey = sse_decode_opt_CastedPrimitive_u_64(deserializer);
    var var_isPropped = sse_decode_bool(deserializer);
    var var_isRingingInaccurate = sse_decode_bool(deserializer);
    var var_mode = sse_decode_opt_box_autoadd_ft_mode(deserializer);
    var var_recentMemberAdds =
        sse_decode_Map_String_CastedPrimitive_u_64(deserializer);
    return FTSession(
        groupId: var_groupId,
        myHandles: var_myHandles,
        participants: var_participants,
        link: var_link,
        members: var_members,
        reportId: var_reportId,
        startTime: var_startTime,
        lastRekey: var_lastRekey,
        isPropped: var_isPropped,
        isRingingInaccurate: var_isRingingInaccurate,
        mode: var_mode,
        recentMemberAdds: var_recentMemberAdds);
  }

  @protected
  HwExtra sse_decode_hw_extra(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_version = sse_decode_String(deserializer);
    var var_protocolVersion = sse_decode_u_32(deserializer);
    var var_deviceId = sse_decode_String(deserializer);
    var var_icloudUa = sse_decode_String(deserializer);
    var var_aoskitVersion = sse_decode_String(deserializer);
    return HwExtra(
        version: var_version,
        protocolVersion: var_protocolVersion,
        deviceId: var_deviceId,
        icloudUa: var_icloudUa,
        aoskitVersion: var_aoskitVersion);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  IconChangeMessage sse_decode_icon_change_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_file = sse_decode_opt_box_autoadd_mmcs_file(deserializer);
    var var_groupVersion = sse_decode_CastedPrimitive_u_64(deserializer);
    return IconChangeMessage(file: var_file, groupVersion: var_groupVersion);
  }

  @protected
  IndexedMessagePart sse_decode_indexed_message_part(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_part_ = sse_decode_message_part(deserializer);
    var var_idx = sse_decode_opt_CastedPrimitive_usize(deserializer);
    var var_ext = sse_decode_opt_box_autoadd_part_extension(deserializer);
    return IndexedMessagePart(part_: var_part_, idx: var_idx, ext: var_ext);
  }

  @protected
  LetMeInRequest sse_decode_let_me_in_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sharedSecret = sse_decode_list_prim_u_8_strict(deserializer);
    var var_pseud = sse_decode_String(deserializer);
    var var_requestor = sse_decode_String(deserializer);
    var var_nickname = sse_decode_opt_String(deserializer);
    var var_token = sse_decode_list_prim_u_8_strict(deserializer);
    var var_delegationUuid = sse_decode_opt_String(deserializer);
    var var_usage = sse_decode_opt_String(deserializer);
    return LetMeInRequest(
        sharedSecret: var_sharedSecret,
        pseud: var_pseud,
        requestor: var_requestor,
        nickname: var_nickname,
        token: var_token,
        delegationUuid: var_delegationUuid,
        usage: var_usage);
  }

  @protected
  LinkMeta sse_decode_link_meta(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_lp_link_metadata(deserializer);
    var var_attachments = sse_decode_list_list_prim_u_8_strict(deserializer);
    return LinkMeta(data: var_data, attachments: var_attachments);
  }

  @protected
  List<IdsUser>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <IdsUser>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Follow> sse_decode_list_follow(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Follow>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_follow(deserializer));
    }
    return ans_;
  }

  @protected
  List<FoundDevice> sse_decode_list_found_device(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FoundDevice>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_found_device(deserializer));
    }
    return ans_;
  }

  @protected
  List<FTMember> sse_decode_list_ft_member(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FTMember>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ft_member(deserializer));
    }
    return ans_;
  }

  @protected
  List<FTSession> sse_decode_list_ft_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FTSession>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ft_session(deserializer));
    }
    return ans_;
  }

  @protected
  List<IndexedMessagePart> sse_decode_list_indexed_message_part(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <IndexedMessagePart>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_indexed_message_part(deserializer));
    }
    return ans_;
  }

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Uint8List>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<MessageTarget> sse_decode_list_message_target(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MessageTarget>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_message_target(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<PrivateDeviceInfo> sse_decode_list_private_device_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PrivateDeviceInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_private_device_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, bool)> sse_decode_list_record_string_bool(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, bool)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_bool(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, int)> sse_decode_list_record_string_casted_primitive_u_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_casted_primitive_u_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, FTParticipant)> sse_decode_list_record_string_ft_participant(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, FTParticipant)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_ft_participant(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, SyncStatus)> sse_decode_list_record_string_sync_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, SyncStatus)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_sync_status(deserializer));
    }
    return ans_;
  }

  @protected
  List<SharedAlbum> sse_decode_list_shared_album(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SharedAlbum>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_shared_album(deserializer));
    }
    return ans_;
  }

  @protected
  List<TrustedPhoneNumber> sse_decode_list_trusted_phone_number(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TrustedPhoneNumber>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_trusted_phone_number(deserializer));
    }
    return ans_;
  }

  @protected
  Location sse_decode_location(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_opt_box_autoadd_address(deserializer);
    var var_altitude = sse_decode_f_64(deserializer);
    var var_floorLevel = sse_decode_i_64(deserializer);
    var var_horizontalAccuracy = sse_decode_f_64(deserializer);
    var var_isInaccurate = sse_decode_bool(deserializer);
    var var_latitude = sse_decode_f_64(deserializer);
    var var_locationId = sse_decode_opt_String(deserializer);
    var var_locationTimestamp = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_longitude = sse_decode_f_64(deserializer);
    var var_secureLocationTs = sse_decode_i_64(deserializer);
    var var_timestamp = sse_decode_i_64(deserializer);
    var var_verticalAccuracy = sse_decode_f_64(deserializer);
    var var_positionType = sse_decode_opt_String(deserializer);
    var var_isOld = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_locationFinished = sse_decode_opt_box_autoadd_bool(deserializer);
    return Location(
        address: var_address,
        altitude: var_altitude,
        floorLevel: var_floorLevel,
        horizontalAccuracy: var_horizontalAccuracy,
        isInaccurate: var_isInaccurate,
        latitude: var_latitude,
        locationId: var_locationId,
        locationTimestamp: var_locationTimestamp,
        longitude: var_longitude,
        secureLocationTs: var_secureLocationTs,
        timestamp: var_timestamp,
        verticalAccuracy: var_verticalAccuracy,
        positionType: var_positionType,
        isOld: var_isOld,
        locationFinished: var_locationFinished);
  }

  @protected
  LoginState sse_decode_login_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return LoginState_LoggedIn();
      case 1:
        return LoginState_NeedsDevice2FA();
      case 2:
        return LoginState_Needs2FAVerification();
      case 3:
        return LoginState_NeedsSMS2FA();
      case 4:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
                deserializer);
        return LoginState_NeedsSMS2FAVerification(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return LoginState_NeedsExtraStep(var_field0);
      case 6:
        return LoginState_NeedsLogin();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  LPIconMetadata sse_decode_lp_icon_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_nsurl(deserializer);
    var var_version = sse_decode_u_8(deserializer);
    return LPIconMetadata(url: var_url, version: var_version);
  }

  @protected
  LPImageMetadata sse_decode_lp_image_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_size = sse_decode_String(deserializer);
    var var_url = sse_decode_nsurl(deserializer);
    var var_version = sse_decode_u_8(deserializer);
    return LPImageMetadata(size: var_size, url: var_url, version: var_version);
  }

  @protected
  LPLinkMetadata sse_decode_lp_link_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_imageMetadata =
        sse_decode_opt_box_autoadd_lp_image_metadata(deserializer);
    var var_version = sse_decode_u_8(deserializer);
    var var_iconMetadata =
        sse_decode_opt_box_autoadd_lp_icon_metadata(deserializer);
    var var_originalUrl = sse_decode_nsurl(deserializer);
    var var_url = sse_decode_opt_box_autoadd_nsurl(deserializer);
    var var_title = sse_decode_opt_String(deserializer);
    var var_summary = sse_decode_opt_String(deserializer);
    var var_image =
        sse_decode_opt_box_autoadd_rich_link_image_attachment_substitute(
            deserializer);
    var var_icon =
        sse_decode_opt_box_autoadd_rich_link_image_attachment_substitute(
            deserializer);
    var var_images =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
            deserializer);
    var var_icons =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
            deserializer);
    return LPLinkMetadata(
        imageMetadata: var_imageMetadata,
        version: var_version,
        iconMetadata: var_iconMetadata,
        originalUrl: var_originalUrl,
        url: var_url,
        title: var_title,
        summary: var_summary,
        image: var_image,
        icon: var_icon,
        images: var_images,
        icons: var_icons);
  }

  @protected
  Message sse_decode_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_normal_message(deserializer);
        return Message_Message(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_rename_message(deserializer);
        return Message_RenameMessage(var_field0);
      case 2:
        var var_field0 =
            sse_decode_box_autoadd_change_participant_message(deserializer);
        return Message_ChangeParticipants(var_field0);
      case 3:
        var var_field0 = sse_decode_box_autoadd_react_message(deserializer);
        return Message_React(var_field0);
      case 4:
        return Message_Delivered();
      case 5:
        return Message_Read();
      case 6:
        return Message_Typing();
      case 7:
        var var_field0 = sse_decode_box_autoadd_unsend_message(deserializer);
        return Message_Unsend(var_field0);
      case 8:
        var var_field0 = sse_decode_box_autoadd_edit_message(deserializer);
        return Message_Edit(var_field0);
      case 9:
        var var_field0 =
            sse_decode_box_autoadd_icon_change_message(deserializer);
        return Message_IconChange(var_field0);
      case 10:
        return Message_StopTyping();
      case 11:
        var var_field0 = sse_decode_bool(deserializer);
        return Message_EnableSmsActivation(var_field0);
      case 12:
        return Message_MessageReadOnDevice();
      case 13:
        var var_field0 = sse_decode_bool(deserializer);
        return Message_SmsConfirmSent(var_field0);
      case 14:
        return Message_MarkUnread();
      case 15:
        return Message_PeerCacheInvalidate();
      case 16:
        var var_field0 =
            sse_decode_box_autoadd_update_extension_message(deserializer);
        return Message_UpdateExtension(var_field0);
      case 17:
        var var_field0 = sse_decode_box_autoadd_error_message(deserializer);
        return Message_Error(var_field0);
      case 18:
        var var_field0 =
            sse_decode_box_autoadd_move_to_recycle_bin_message(deserializer);
        return Message_MoveToRecycleBin(var_field0);
      case 19:
        var var_field0 = sse_decode_box_autoadd_operated_chat(deserializer);
        return Message_RecoverChat(var_field0);
      case 20:
        var var_field0 =
            sse_decode_box_autoadd_permanent_delete_message(deserializer);
        return Message_PermanentDelete(var_field0);
      case 21:
        return Message_Unschedule();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MessageInst sse_decode_message_inst(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_sender = sse_decode_opt_String(deserializer);
    var var_conversation =
        sse_decode_opt_box_autoadd_conversation_data(deserializer);
    var var_message = sse_decode_message(deserializer);
    var var_sentTimestamp = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_target = sse_decode_opt_list_message_target(deserializer);
    var var_sendDelivered = sse_decode_bool(deserializer);
    var var_verificationFailed = sse_decode_bool(deserializer);
    return MessageInst(
        id: var_id,
        sender: var_sender,
        conversation: var_conversation,
        message: var_message,
        sentTimestamp: var_sentTimestamp,
        target: var_target,
        sendDelivered: var_sendDelivered,
        verificationFailed: var_verificationFailed);
  }

  @protected
  MessagePart sse_decode_message_part(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_box_autoadd_text_format(deserializer);
        return MessagePart_Text(var_field0, var_field1);
      case 1:
        var var_field0 = sse_decode_box_autoadd_attachment(deserializer);
        return MessagePart_Attachment(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return MessagePart_Mention(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return MessagePart_Object(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MessageParts sse_decode_message_parts(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_indexed_message_part(deserializer);
    return MessageParts(field0: var_field0);
  }

  @protected
  MessageTarget sse_decode_message_target(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return MessageTarget_Token(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return MessageTarget_Uuid(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MessageType sse_decode_message_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return MessageType_IMessage();
      case 1:
        var var_isPhone = sse_decode_bool(deserializer);
        var var_usingNumber = sse_decode_String(deserializer);
        var var_fromHandle = sse_decode_opt_String(deserializer);
        return MessageType_SMS(
            isPhone: var_isPhone,
            usingNumber: var_usingNumber,
            fromHandle: var_fromHandle);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MMCSFile sse_decode_mmcs_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_signature = sse_decode_list_prim_u_8_strict(deserializer);
    var var_object = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_key = sse_decode_list_prim_u_8_strict(deserializer);
    var var_size = sse_decode_CastedPrimitive_usize(deserializer);
    return MMCSFile(
        signature: var_signature,
        object: var_object,
        url: var_url,
        key: var_key,
        size: var_size);
  }

  @protected
  MMCSTransferProgress sse_decode_mmcs_transfer_progress(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_prog = sse_decode_CastedPrimitive_usize(deserializer);
    var var_total = sse_decode_CastedPrimitive_usize(deserializer);
    var var_file = sse_decode_opt_box_autoadd_mmcs_file(deserializer);
    return MMCSTransferProgress(
        prog: var_prog, total: var_total, file: var_file);
  }

  @protected
  MoveToRecycleBinMessage sse_decode_move_to_recycle_bin_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_target = sse_decode_delete_target(deserializer);
    var var_recoverableDeleteDate =
        sse_decode_CastedPrimitive_u_64(deserializer);
    return MoveToRecycleBinMessage(
        target: var_target, recoverableDeleteDate: var_recoverableDeleteDate);
  }

  @protected
  MyAsyncRuntime sse_decode_my_async_runtime(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyAsyncRuntime();
  }

  @protected
  NormalMessage sse_decode_normal_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_parts = sse_decode_message_parts(deserializer);
    var var_effect = sse_decode_opt_String(deserializer);
    var var_replyGuid = sse_decode_opt_String(deserializer);
    var var_replyPart = sse_decode_opt_String(deserializer);
    var var_service = sse_decode_message_type(deserializer);
    var var_subject = sse_decode_opt_String(deserializer);
    var var_app = sse_decode_opt_box_autoadd_extension_app(deserializer);
    var var_linkMeta = sse_decode_opt_box_autoadd_link_meta(deserializer);
    var var_voice = sse_decode_bool(deserializer);
    var var_scheduled = sse_decode_opt_box_autoadd_schedule_mode(deserializer);
    return NormalMessage(
        parts: var_parts,
        effect: var_effect,
        replyGuid: var_replyGuid,
        replyPart: var_replyPart,
        service: var_service,
        subject: var_subject,
        app: var_app,
        linkMeta: var_linkMeta,
        voice: var_voice,
        scheduled: var_scheduled);
  }

  @protected
  NSDictionaryClass sse_decode_ns_dictionary_class(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return NSDictionaryClass.values[inner];
  }

  @protected
  NSURL sse_decode_nsurl(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_base = sse_decode_String(deserializer);
    var var_relative = sse_decode_String(deserializer);
    return NSURL(base: var_base, relative: var_relative);
  }

  @protected
  OperatedChat sse_decode_operated_chat(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_participants = sse_decode_list_String(deserializer);
    var var_groupId = sse_decode_String(deserializer);
    var var_guid = sse_decode_String(deserializer);
    var var_deleteIncomingMessages =
        sse_decode_opt_box_autoadd_bool(deserializer);
    var var_wasReportedAsJunk = sse_decode_opt_box_autoadd_bool(deserializer);
    return OperatedChat(
        participants: var_participants,
        groupId: var_groupId,
        guid: var_guid,
        deleteIncomingMessages: var_deleteIncomingMessages,
        wasReportedAsJunk: var_wasReportedAsJunk);
  }

  @protected
  int? sse_decode_opt_CastedPrimitive_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_CastedPrimitive_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_CastedPrimitive_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_CastedPrimitive_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ConversationLink?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ConversationParticipant?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  IdsUser?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  JoinedOsConfig?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  NsArrayLpIconMetadata?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  NsArrayLpImageMetadata?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Address? sse_decode_opt_box_autoadd_address(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_address(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Attachment? sse_decode_opt_box_autoadd_attachment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attachment(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Balloon? sse_decode_opt_box_autoadd_balloon(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_balloon(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ConversationData? sse_decode_opt_box_autoadd_conversation_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_conversation_data(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExtensionApp? sse_decode_opt_box_autoadd_extension_app(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_extension_app(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FTMode? sse_decode_opt_box_autoadd_ft_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ft_mode(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LinkMeta? sse_decode_opt_box_autoadd_link_meta(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_link_meta(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Location? sse_decode_opt_box_autoadd_location(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_location(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LoginState? sse_decode_opt_box_autoadd_login_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_login_state(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LPIconMetadata? sse_decode_opt_box_autoadd_lp_icon_metadata(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_lp_icon_metadata(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LPImageMetadata? sse_decode_opt_box_autoadd_lp_image_metadata(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_lp_image_metadata(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MMCSFile? sse_decode_opt_box_autoadd_mmcs_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_mmcs_file(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NSURL? sse_decode_opt_box_autoadd_nsurl(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_nsurl(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PartExtension? sse_decode_opt_box_autoadd_part_extension(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_part_extension(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PushMessage? sse_decode_opt_box_autoadd_push_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_push_message(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, BigInt)? sse_decode_opt_box_autoadd_record_string_u_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_record_string_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RichLinkImageAttachmentSubstitute?
      sse_decode_opt_box_autoadd_rich_link_image_attachment_substitute(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_rich_link_image_attachment_substitute(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ScheduleMode? sse_decode_opt_box_autoadd_schedule_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_schedule_mode(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SupportAction? sse_decode_opt_box_autoadd_support_action(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_support_action(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SupportAlert? sse_decode_opt_box_autoadd_support_alert(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_support_alert(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<MessageTarget>? sse_decode_opt_list_message_target(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_message_target(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PartExtension sse_decode_part_extension(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_msgWidth = sse_decode_f_64(deserializer);
        var var_rotation = sse_decode_f_64(deserializer);
        var var_sai = sse_decode_u_64(deserializer);
        var var_scale = sse_decode_f_64(deserializer);
        var var_update = sse_decode_opt_box_autoadd_bool(deserializer);
        var var_sli = sse_decode_u_64(deserializer);
        var var_normalizedX = sse_decode_f_64(deserializer);
        var var_normalizedY = sse_decode_f_64(deserializer);
        var var_version = sse_decode_u_64(deserializer);
        var var_hash = sse_decode_String(deserializer);
        var var_safi = sse_decode_u_64(deserializer);
        var var_effectType = sse_decode_i_64(deserializer);
        var var_stickerId = sse_decode_String(deserializer);
        return PartExtension_Sticker(
            msgWidth: var_msgWidth,
            rotation: var_rotation,
            sai: var_sai,
            scale: var_scale,
            update: var_update,
            sli: var_sli,
            normalizedX: var_normalizedX,
            normalizedY: var_normalizedY,
            version: var_version,
            hash: var_hash,
            safi: var_safi,
            effectType: var_effectType,
            stickerId: var_stickerId);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  PermanentDeleteMessage sse_decode_permanent_delete_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_target = sse_decode_delete_target(deserializer);
    var var_isScheduled = sse_decode_bool(deserializer);
    return PermanentDeleteMessage(
        target: var_target, isScheduled: var_isScheduled);
  }

  @protected
  PollResult sse_decode_poll_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return PollResult_Stop();
      case 1:
        var var_field0 = sse_decode_opt_box_autoadd_push_message(deserializer);
        return PollResult_Cont(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  PrivateDeviceInfo sse_decode_private_device_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_opt_String(deserializer);
    var var_deviceName = sse_decode_opt_String(deserializer);
    var var_token = sse_decode_list_prim_u_8_strict(deserializer);
    var var_isHsaTrusted = sse_decode_bool(deserializer);
    var var_identites = sse_decode_list_String(deserializer);
    var var_subServices = sse_decode_list_String(deserializer);
    return PrivateDeviceInfo(
        uuid: var_uuid,
        deviceName: var_deviceName,
        token: var_token,
        isHsaTrusted: var_isHsaTrusted,
        identites: var_identites,
        subServices: var_subServices);
  }

  @protected
  PushMessage sse_decode_push_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_message_inst(deserializer);
        return PushMessage_IMessage(var_field0);
      case 1:
        var var_uuid = sse_decode_String(deserializer);
        var var_error = sse_decode_opt_String(deserializer);
        return PushMessage_SendConfirm(uuid: var_uuid, error: var_error);
      case 2:
        var var_field0 = sse_decode_box_autoadd_register_state(deserializer);
        return PushMessage_RegistrationState(var_field0);
      case 3:
        var var_field0 = sse_decode_box_autoadd_shared_album(deserializer);
        return PushMessage_NewPhotostream(var_field0);
      case 4:
        var var_field0 = sse_decode_box_autoadd_ft_message(deserializer);
        return PushMessage_FaceTime(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ReactMessage sse_decode_react_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_toUuid = sse_decode_String(deserializer);
    var var_toPart = sse_decode_opt_CastedPrimitive_u_64(deserializer);
    var var_reaction = sse_decode_react_message_type(deserializer);
    var var_toText = sse_decode_String(deserializer);
    return ReactMessage(
        toUuid: var_toUuid,
        toPart: var_toPart,
        reaction: var_reaction,
        toText: var_toText);
  }

  @protected
  ReactMessageType sse_decode_react_message_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_reaction = sse_decode_box_autoadd_reaction(deserializer);
        var var_enable = sse_decode_bool(deserializer);
        return ReactMessageType_React(
            reaction: var_reaction, enable: var_enable);
      case 1:
        var var_spec = sse_decode_box_autoadd_extension_app(deserializer);
        var var_body = sse_decode_box_autoadd_message_parts(deserializer);
        return ReactMessageType_Extension(spec: var_spec, body: var_body);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Reaction sse_decode_reaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return Reaction_Heart();
      case 1:
        return Reaction_Like();
      case 2:
        return Reaction_Dislike();
      case 3:
        return Reaction_Laugh();
      case 4:
        return Reaction_Emphasize();
      case 5:
        return Reaction_Question();
      case 6:
        var var_field0 = sse_decode_String(deserializer);
        return Reaction_Emoji(var_field0);
      case 7:
        var var_spec = sse_decode_opt_box_autoadd_extension_app(deserializer);
        var var_body = sse_decode_box_autoadd_message_parts(deserializer);
        return Reaction_Sticker(spec: var_spec, body: var_body);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  (List<SharedAlbum>, List<String>)
      sse_decode_record_list_shared_album_list_string(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_shared_album(deserializer);
    var var_field1 = sse_decode_list_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (List<TrustedPhoneNumber>, LoginState?)
      sse_decode_record_list_trusted_phone_number_opt_box_autoadd_login_state(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_trusted_phone_number(deserializer);
    var var_field1 = sse_decode_opt_box_autoadd_login_state(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    LoginState,
    IdsUser?
  ) sse_decode_record_login_state_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_ids_user(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_login_state(deserializer);
    var var_field1 =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    Map<String, SyncStatus>,
    (String, BigInt)?
  ) sse_decode_record_map_string_sync_status_opt_box_autoadd_record_string_u_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_Map_String_sync_status(deserializer);
    var var_field1 =
        sse_decode_opt_box_autoadd_record_string_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, bool) sse_decode_record_string_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_bool(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, int) sse_decode_record_string_casted_primitive_u_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_CastedPrimitive_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, FTParticipant) sse_decode_record_string_ft_participant(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_ft_participant(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, SyncStatus) sse_decode_record_string_sync_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_sync_status(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, BigInt) sse_decode_record_string_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  RegisterState sse_decode_register_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_nextS = sse_decode_i_64(deserializer);
        return RegisterState_Registered(nextS: var_nextS);
      case 1:
        return RegisterState_Registering();
      case 2:
        var var_retryWait = sse_decode_opt_box_autoadd_u_64(deserializer);
        var var_error = sse_decode_String(deserializer);
        return RegisterState_Failed(retryWait: var_retryWait, error: var_error);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  RegistrationPhase sse_decode_registration_phase(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return RegistrationPhase.values[inner];
  }

  @protected
  RenameMessage sse_decode_rename_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_newName = sse_decode_String(deserializer);
    return RenameMessage(newName: var_newName);
  }

  @protected
  RichLinkImageAttachmentSubstitute
      sse_decode_rich_link_image_attachment_substitute(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mimeType = sse_decode_String(deserializer);
    var var_richLinkImageAttachmentSubstituteIndex =
        sse_decode_u_64(deserializer);
    return RichLinkImageAttachmentSubstitute(
        mimeType: var_mimeType,
        richLinkImageAttachmentSubstituteIndex:
            var_richLinkImageAttachmentSubstituteIndex);
  }

  @protected
  ScheduleMode sse_decode_schedule_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ms = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_schedule = sse_decode_bool(deserializer);
    return ScheduleMode(ms: var_ms, schedule: var_schedule);
  }

  @protected
  SharedAlbum sse_decode_shared_album(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_opt_String(deserializer);
    var var_fullname = sse_decode_opt_String(deserializer);
    var var_email = sse_decode_opt_String(deserializer);
    var var_albumguid = sse_decode_String(deserializer);
    var var_sharingtype = sse_decode_String(deserializer);
    var var_subscriptiondate = sse_decode_opt_String(deserializer);
    var var_albumlocation = sse_decode_opt_String(deserializer);
    var var_assets = sse_decode_list_String(deserializer);
    var var_delete = sse_decode_opt_String(deserializer);
    return SharedAlbum(
        name: var_name,
        fullname: var_fullname,
        email: var_email,
        albumguid: var_albumguid,
        sharingtype: var_sharingtype,
        subscriptiondate: var_subscriptiondate,
        albumlocation: var_albumlocation,
        assets: var_assets,
        delete: var_delete);
  }

  @protected
  SupportAction sse_decode_support_action(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_String(deserializer);
    var var_button = sse_decode_String(deserializer);
    return SupportAction(url: var_url, button: var_button);
  }

  @protected
  SupportAlert sse_decode_support_alert(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_body = sse_decode_String(deserializer);
    var var_action = sse_decode_opt_box_autoadd_support_action(deserializer);
    return SupportAlert(title: var_title, body: var_body, action: var_action);
  }

  @protected
  SyncStatus sse_decode_sync_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SyncStatus_Synced();
      case 1:
        var var_progress = sse_decode_usize(deserializer);
        var var_total = sse_decode_usize(deserializer);
        return SyncStatus_Downloading(progress: var_progress, total: var_total);
      case 2:
        var var_progress = sse_decode_usize(deserializer);
        var var_total = sse_decode_usize(deserializer);
        return SyncStatus_Uploading(progress: var_progress, total: var_total);
      case 3:
        return SyncStatus_Syncing();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TextEffect sse_decode_text_effect(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TextEffect.values[inner];
  }

  @protected
  TextFlags sse_decode_text_flags(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bold = sse_decode_bool(deserializer);
    var var_italic = sse_decode_bool(deserializer);
    var var_underline = sse_decode_bool(deserializer);
    var var_strikethrough = sse_decode_bool(deserializer);
    return TextFlags(
        bold: var_bold,
        italic: var_italic,
        underline: var_underline,
        strikethrough: var_strikethrough);
  }

  @protected
  TextFormat sse_decode_text_format(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_text_flags(deserializer);
        return TextFormat_Flags(var_field0);
      case 1:
        var var_field0 = sse_decode_text_effect(deserializer);
        return TextFormat_Effect(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TransferProgress sse_decode_transfer_progress(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_prog = sse_decode_CastedPrimitive_usize(deserializer);
    var var_total = sse_decode_CastedPrimitive_usize(deserializer);
    var var_attachment = sse_decode_opt_box_autoadd_attachment(deserializer);
    return TransferProgress(
        prog: var_prog, total: var_total, attachment: var_attachment);
  }

  @protected
  TrustedPhoneNumber sse_decode_trusted_phone_number(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_numberWithDialCode = sse_decode_String(deserializer);
    var var_lastTwoDigits = sse_decode_String(deserializer);
    var var_pushMode = sse_decode_String(deserializer);
    var var_id = sse_decode_u_32(deserializer);
    return TrustedPhoneNumber(
        numberWithDialCode: var_numberWithDialCode,
        lastTwoDigits: var_lastTwoDigits,
        pushMode: var_pushMode,
        id: var_id);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UnsendMessage sse_decode_unsend_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tuuid = sse_decode_String(deserializer);
    var var_editPart = sse_decode_CastedPrimitive_u_64(deserializer);
    return UnsendMessage(tuuid: var_tuuid, editPart: var_editPart);
  }

  @protected
  UpdateExtensionMessage sse_decode_update_extension_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_forUuid = sse_decode_String(deserializer);
    var var_ext = sse_decode_part_extension(deserializer);
    return UpdateExtensionMessage(forUuid: var_forUuid, ext: var_ext);
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          ArcPushState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcPushStateImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          ConversationLink self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConversationLinkImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          ConversationParticipant self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConversationParticipantImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
          FindMyFriendsClientDefaultAnisetteProvider self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FindMyFriendsClientDefaultAnisetteProviderImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
          FindMyPhoneClientDefaultAnisetteProvider self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FindMyPhoneClientDefaultAnisetteProviderImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          IdsUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IdsUserImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          JoinedOsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JoinedOsConfigImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          NsArrayLpIconMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NsArrayLpIconMetadataImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          NsArrayLpImageMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NsArrayLpImageMetadataImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          VerifyBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VerifyBodyImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
          FindMyFriendsClientDefaultAnisetteProvider self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FindMyFriendsClientDefaultAnisetteProviderImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
          FindMyPhoneClientDefaultAnisetteProvider self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FindMyPhoneClientDefaultAnisetteProviderImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          ArcPushState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcPushStateImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          IdsUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IdsUserImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          JoinedOsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JoinedOsConfigImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          VerifyBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VerifyBodyImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(sseEncodeCastedPrimitiveU64(self), serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(sseEncodeCastedPrimitiveU64(self), serializer);
  }

  @protected
  void sse_encode_Map_String_CastedPrimitive_u_64(
      Map<String, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_casted_primitive_u_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_bool(
      Map<String, bool> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_bool(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_ft_participant(
      Map<String, FTParticipant> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_ft_participant(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_sync_status(
      Map<String, SyncStatus> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_sync_status(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          ArcPushState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcPushStateImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          ConversationLink self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConversationLinkImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          ConversationParticipant self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConversationParticipantImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyFriendsClientDefaultAnisetteProvider(
          FindMyFriendsClientDefaultAnisetteProvider self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FindMyFriendsClientDefaultAnisetteProviderImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFindMyPhoneClientDefaultAnisetteProvider(
          FindMyPhoneClientDefaultAnisetteProvider self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FindMyPhoneClientDefaultAnisetteProviderImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          IdsUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IdsUserImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          JoinedOsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JoinedOsConfigImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          NsArrayLpIconMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NsArrayLpIconMetadataImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          NsArrayLpImageMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NsArrayLpImageMetadataImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          VerifyBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VerifyBodyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_Set_ft_member(Set<FTMember> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_ft_member(self.toList(), serializer);
  }

  @protected
  void sse_encode_StreamSink_mmcs_transfer_progress_Sse(
      RustStreamSink<MMCSTransferProgress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_mmcs_transfer_progress,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_transfer_progress_Sse(
      RustStreamSink<TransferProgress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_transfer_progress,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_address(Address self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.administrativeArea, serializer);
    sse_encode_String(self.country, serializer);
    sse_encode_String(self.countryCode, serializer);
    sse_encode_opt_list_String(self.formattedAddressLines, serializer);
    sse_encode_opt_String(self.locality, serializer);
    sse_encode_opt_String(self.stateCode, serializer);
    sse_encode_opt_String(self.streetAddress, serializer);
    sse_encode_opt_String(self.streetName, serializer);
  }

  @protected
  void sse_encode_attachment(Attachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_attachment_type(self.aType, serializer);
    sse_encode_CastedPrimitive_u_64(self.part_, serializer);
    sse_encode_String(self.utiType, serializer);
    sse_encode_String(self.mime, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_bool(self.iris, serializer);
  }

  @protected
  void sse_encode_attachment_type(
      AttachmentType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case AttachmentType_Inline(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case AttachmentType_MMCS(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_mmcs_file(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_balloon(Balloon self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
    sse_encode_opt_String(self.session, serializer);
    sse_encode_balloon_layout(self.layout, serializer);
    sse_encode_opt_String(self.ldText, serializer);
    sse_encode_bool(self.isLive, serializer);
    sse_encode_list_prim_u_8_strict(self.icon, serializer);
  }

  @protected
  void sse_encode_balloon_layout(BalloonLayout self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BalloonLayout_TemplateLayout(
          imageSubtitle: final imageSubtitle,
          imageTitle: final imageTitle,
          caption: final caption,
          secondarySubcaption: final secondarySubcaption,
          tertiarySubcaption: final tertiarySubcaption,
          subcaption: final subcaption,
          class_: final class_
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(imageSubtitle, serializer);
        sse_encode_String(imageTitle, serializer);
        sse_encode_String(caption, serializer);
        sse_encode_String(secondarySubcaption, serializer);
        sse_encode_String(tertiarySubcaption, serializer);
        sse_encode_String(subcaption, serializer);
        sse_encode_ns_dictionary_class(class_, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          ConversationLink self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          ConversationParticipant self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          IdsUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          JoinedOsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          NsArrayLpIconMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          NsArrayLpImageMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_address(Address self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_address(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_attachment(
      Attachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_attachment(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_balloon(Balloon self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_balloon(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_change_participant_message(
      ChangeParticipantMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_change_participant_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_conversation_data(
      ConversationData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_conversation_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_edit_message(
      EditMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_edit_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_error_message(
      ErrorMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_error_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_extension_app(
      ExtensionApp self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_extension_app(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ft_message(
      FTMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ft_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ft_mode(FTMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ft_mode(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_hw_extra(HwExtra self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_hw_extra(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_icon_change_message(
      IconChangeMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_icon_change_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_let_me_in_request(
      LetMeInRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_let_me_in_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_link_meta(
      LinkMeta self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_link_meta(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_location(
      Location self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_location(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_login_state(
      LoginState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_login_state(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_lp_icon_metadata(
      LPIconMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_lp_icon_metadata(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_lp_image_metadata(
      LPImageMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_lp_image_metadata(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message(Message self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_inst(
      MessageInst self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message_inst(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_parts(
      MessageParts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message_parts(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_mmcs_file(
      MMCSFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mmcs_file(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_move_to_recycle_bin_message(
      MoveToRecycleBinMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_move_to_recycle_bin_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_normal_message(
      NormalMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_normal_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_nsurl(NSURL self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_nsurl(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_operated_chat(
      OperatedChat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_operated_chat(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_part_extension(
      PartExtension self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_part_extension(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_permanent_delete_message(
      PermanentDeleteMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_permanent_delete_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_push_message(
      PushMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_push_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_react_message(
      ReactMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_react_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_reaction(
      Reaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_reaction(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_record_string_u_64(
      (String, BigInt) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_string_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_register_state(
      RegisterState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_register_state(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_rename_message(
      RenameMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rename_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_rich_link_image_attachment_substitute(
      RichLinkImageAttachmentSubstitute self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rich_link_image_attachment_substitute(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_schedule_mode(
      ScheduleMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_schedule_mode(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_shared_album(
      SharedAlbum self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_shared_album(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_support_action(
      SupportAction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_support_action(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_support_alert(
      SupportAlert self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_support_alert(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_text_flags(
      TextFlags self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_text_flags(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_text_format(
      TextFormat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_text_format(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_unsend_message(
      UnsendMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_unsend_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_update_extension_message(
      UpdateExtensionMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_update_extension_message(self, serializer);
  }

  @protected
  void sse_encode_change_participant_message(
      ChangeParticipantMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.newParticipants, serializer);
    sse_encode_CastedPrimitive_u_64(self.groupVersion, serializer);
  }

  @protected
  void sse_encode_conversation_data(
      ConversationData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.participants, serializer);
    sse_encode_opt_String(self.cvName, serializer);
    sse_encode_opt_String(self.senderGuid, serializer);
    sse_encode_opt_String(self.afterGuid, serializer);
  }

  @protected
  void sse_encode_delete_target(DeleteTarget self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DeleteTarget_Chat(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_operated_chat(field0, serializer);
      case DeleteTarget_Messages(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_String(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_device_info(DeviceInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.osVersion, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.encodedData, serializer);
  }

  @protected
  void sse_encode_edit_message(EditMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.tuuid, serializer);
    sse_encode_CastedPrimitive_u_64(self.editPart, serializer);
    sse_encode_message_parts(self.newParts, serializer);
  }

  @protected
  void sse_encode_error_message(ErrorMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.forUuid, serializer);
    sse_encode_u_64(self.status, serializer);
    sse_encode_String(self.statusStr, serializer);
  }

  @protected
  void sse_encode_extension_app(ExtensionApp self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.appId, serializer);
    sse_encode_String(self.bundleId, serializer);
    sse_encode_opt_box_autoadd_balloon(self.balloon, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_ffi_file_packager(
      FFIFilePackager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_follow(Follow self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.createTimestamp, serializer);
    sse_encode_i_64(self.expires, serializer);
    sse_encode_String(self.id, serializer);
    sse_encode_list_String(self.invitationAcceptedHandles, serializer);
    sse_encode_list_String(self.invitationFromHandles, serializer);
    sse_encode_bool(self.isFromMessages, serializer);
    sse_encode_opt_String(self.offerId, serializer);
    sse_encode_bool(self.onlyInEvent, serializer);
    sse_encode_String(self.personIdHash, serializer);
    sse_encode_bool(self.secureLocationsCapable, serializer);
    sse_encode_bool(self.shallowOrLiveSecureLocationsCapable, serializer);
    sse_encode_String(self.source, serializer);
    sse_encode_bool(self.tkPermission, serializer);
    sse_encode_i_64(self.updateTimestamp, serializer);
    sse_encode_opt_box_autoadd_bool(self.fallbackToLegacyAllowed, serializer);
    sse_encode_opt_box_autoadd_bool(self.optedNotToShare, serializer);
    sse_encode_opt_box_autoadd_location(self.lastLocation, serializer);
    sse_encode_bool(self.locateInProgress, serializer);
  }

  @protected
  void sse_encode_found_device(FoundDevice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.deviceModel, serializer);
    sse_encode_opt_box_autoadd_bool(self.lowPowerMode, serializer);
    sse_encode_opt_box_autoadd_i_64(self.passcodeLength, serializer);
    sse_encode_opt_String(self.id, serializer);
    sse_encode_opt_String(self.batteryStatus, serializer);
    sse_encode_opt_box_autoadd_bool(self.lostModeCapable, serializer);
    sse_encode_opt_box_autoadd_f_64(self.batteryLevel, serializer);
    sse_encode_opt_box_autoadd_bool(self.locationEnabled, serializer);
    sse_encode_opt_box_autoadd_bool(self.isConsideredAccessory, serializer);
    sse_encode_opt_box_autoadd_location(self.location, serializer);
    sse_encode_opt_String(self.modelDisplayName, serializer);
    sse_encode_opt_String(self.deviceColor, serializer);
    sse_encode_opt_box_autoadd_bool(self.activationLocked, serializer);
    sse_encode_opt_box_autoadd_i_64(self.rm2State, serializer);
    sse_encode_opt_box_autoadd_bool(self.locFoundEnabled, serializer);
    sse_encode_opt_box_autoadd_bool(self.nwd, serializer);
    sse_encode_opt_String(self.deviceStatus, serializer);
    sse_encode_opt_box_autoadd_bool(self.fmlyShare, serializer);
    sse_encode_Map_String_bool(self.features, serializer);
    sse_encode_opt_box_autoadd_bool(self.thisDevice, serializer);
    sse_encode_opt_box_autoadd_bool(self.lostModeEnabled, serializer);
    sse_encode_opt_String(self.deviceDisplayName, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_box_autoadd_bool(self.canWipeAfterLock, serializer);
    sse_encode_opt_box_autoadd_bool(self.isMac, serializer);
    sse_encode_opt_String(self.rawDeviceModel, serializer);
    sse_encode_opt_String(self.baUuid, serializer);
    sse_encode_opt_String(self.deviceDiscoveryId, serializer);
    sse_encode_opt_box_autoadd_bool(self.scd, serializer);
    sse_encode_opt_box_autoadd_bool(self.locationCapable, serializer);
    sse_encode_opt_box_autoadd_bool(self.wipeInProgress, serializer);
    sse_encode_opt_box_autoadd_bool(self.darkWake, serializer);
    sse_encode_opt_box_autoadd_bool(self.deviceWithYou, serializer);
    sse_encode_opt_box_autoadd_i_64(self.maxMsgChar, serializer);
    sse_encode_opt_String(self.deviceClass, serializer);
  }

  @protected
  void sse_encode_ft_member(FTMember self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.nickname, serializer);
    sse_encode_String(self.handle, serializer);
  }

  @protected
  void sse_encode_ft_message(FTMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case FTMessage_LetMeInRequest(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_let_me_in_request(field0, serializer);
      case FTMessage_LinkChanged(guid: final guid):
        sse_encode_i_32(1, serializer);
        sse_encode_String(guid, serializer);
      case FTMessage_JoinEvent(
          guid: final guid,
          participant: final participant,
          handle: final handle,
          ring: final ring
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_String(guid, serializer);
        sse_encode_u_64(participant, serializer);
        sse_encode_String(handle, serializer);
        sse_encode_bool(ring, serializer);
      case FTMessage_AddMembers(
          guid: final guid,
          members: final members,
          ring: final ring
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_String(guid, serializer);
        sse_encode_Set_ft_member(members, serializer);
        sse_encode_bool(ring, serializer);
      case FTMessage_RemoveMembers(guid: final guid, members: final members):
        sse_encode_i_32(4, serializer);
        sse_encode_String(guid, serializer);
        sse_encode_Set_ft_member(members, serializer);
      case FTMessage_LeaveEvent(
          guid: final guid,
          participant: final participant,
          handle: final handle
        ):
        sse_encode_i_32(5, serializer);
        sse_encode_String(guid, serializer);
        sse_encode_u_64(participant, serializer);
        sse_encode_String(handle, serializer);
      case FTMessage_Ring(guid: final guid):
        sse_encode_i_32(6, serializer);
        sse_encode_String(guid, serializer);
      case FTMessage_Decline(guid: final guid):
        sse_encode_i_32(7, serializer);
        sse_encode_String(guid, serializer);
      case FTMessage_RespondedElsewhere(guid: final guid):
        sse_encode_i_32(8, serializer);
        sse_encode_String(guid, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_ft_mode(FTMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_ft_participant(FTParticipant self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.token, serializer);
    sse_encode_String(self.handle, serializer);
    sse_encode_CastedPrimitive_u_64(self.participantId, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.lastJoinDate, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
        self.active, serializer);
  }

  @protected
  void sse_encode_ft_session(FTSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.groupId, serializer);
    sse_encode_list_String(self.myHandles, serializer);
    sse_encode_Map_String_ft_participant(self.participants, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
        self.link, serializer);
    sse_encode_Set_ft_member(self.members, serializer);
    sse_encode_String(self.reportId, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.startTime, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.lastRekey, serializer);
    sse_encode_bool(self.isPropped, serializer);
    sse_encode_bool(self.isRingingInaccurate, serializer);
    sse_encode_opt_box_autoadd_ft_mode(self.mode, serializer);
    sse_encode_Map_String_CastedPrimitive_u_64(
        self.recentMemberAdds, serializer);
  }

  @protected
  void sse_encode_hw_extra(HwExtra self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.version, serializer);
    sse_encode_u_32(self.protocolVersion, serializer);
    sse_encode_String(self.deviceId, serializer);
    sse_encode_String(self.icloudUa, serializer);
    sse_encode_String(self.aoskitVersion, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_icon_change_message(
      IconChangeMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_mmcs_file(self.file, serializer);
    sse_encode_CastedPrimitive_u_64(self.groupVersion, serializer);
  }

  @protected
  void sse_encode_indexed_message_part(
      IndexedMessagePart self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message_part(self.part_, serializer);
    sse_encode_opt_CastedPrimitive_usize(self.idx, serializer);
    sse_encode_opt_box_autoadd_part_extension(self.ext, serializer);
  }

  @protected
  void sse_encode_let_me_in_request(
      LetMeInRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.sharedSecret, serializer);
    sse_encode_String(self.pseud, serializer);
    sse_encode_String(self.requestor, serializer);
    sse_encode_opt_String(self.nickname, serializer);
    sse_encode_list_prim_u_8_strict(self.token, serializer);
    sse_encode_opt_String(self.delegationUuid, serializer);
    sse_encode_opt_String(self.usage, serializer);
  }

  @protected
  void sse_encode_link_meta(LinkMeta self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_lp_link_metadata(self.data, serializer);
    sse_encode_list_list_prim_u_8_strict(self.attachments, serializer);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          List<IdsUser> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_follow(List<Follow> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_follow(item, serializer);
    }
  }

  @protected
  void sse_encode_list_found_device(
      List<FoundDevice> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_found_device(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ft_member(
      List<FTMember> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ft_member(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ft_session(
      List<FTSession> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ft_session(item, serializer);
    }
  }

  @protected
  void sse_encode_list_indexed_message_part(
      List<IndexedMessagePart> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_indexed_message_part(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_prim_u_8_strict(
      List<Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_message_target(
      List<MessageTarget> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_message_target(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_private_device_info(
      List<PrivateDeviceInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_private_device_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_bool(
      List<(String, bool)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_bool(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_casted_primitive_u_64(
      List<(String, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_casted_primitive_u_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_ft_participant(
      List<(String, FTParticipant)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_ft_participant(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_sync_status(
      List<(String, SyncStatus)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_sync_status(item, serializer);
    }
  }

  @protected
  void sse_encode_list_shared_album(
      List<SharedAlbum> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_shared_album(item, serializer);
    }
  }

  @protected
  void sse_encode_list_trusted_phone_number(
      List<TrustedPhoneNumber> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_trusted_phone_number(item, serializer);
    }
  }

  @protected
  void sse_encode_location(Location self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_address(self.address, serializer);
    sse_encode_f_64(self.altitude, serializer);
    sse_encode_i_64(self.floorLevel, serializer);
    sse_encode_f_64(self.horizontalAccuracy, serializer);
    sse_encode_bool(self.isInaccurate, serializer);
    sse_encode_f_64(self.latitude, serializer);
    sse_encode_opt_String(self.locationId, serializer);
    sse_encode_opt_box_autoadd_i_64(self.locationTimestamp, serializer);
    sse_encode_f_64(self.longitude, serializer);
    sse_encode_i_64(self.secureLocationTs, serializer);
    sse_encode_i_64(self.timestamp, serializer);
    sse_encode_f_64(self.verticalAccuracy, serializer);
    sse_encode_opt_String(self.positionType, serializer);
    sse_encode_opt_box_autoadd_bool(self.isOld, serializer);
    sse_encode_opt_box_autoadd_bool(self.locationFinished, serializer);
  }

  @protected
  void sse_encode_login_state(LoginState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LoginState_LoggedIn():
        sse_encode_i_32(0, serializer);
      case LoginState_NeedsDevice2FA():
        sse_encode_i_32(1, serializer);
      case LoginState_Needs2FAVerification():
        sse_encode_i_32(2, serializer);
      case LoginState_NeedsSMS2FA():
        sse_encode_i_32(3, serializer);
      case LoginState_NeedsSMS2FAVerification(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
            field0, serializer);
      case LoginState_NeedsExtraStep(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
      case LoginState_NeedsLogin():
        sse_encode_i_32(6, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_lp_icon_metadata(
      LPIconMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_nsurl(self.url, serializer);
    sse_encode_u_8(self.version, serializer);
  }

  @protected
  void sse_encode_lp_image_metadata(
      LPImageMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.size, serializer);
    sse_encode_nsurl(self.url, serializer);
    sse_encode_u_8(self.version, serializer);
  }

  @protected
  void sse_encode_lp_link_metadata(
      LPLinkMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_lp_image_metadata(
        self.imageMetadata, serializer);
    sse_encode_u_8(self.version, serializer);
    sse_encode_opt_box_autoadd_lp_icon_metadata(self.iconMetadata, serializer);
    sse_encode_nsurl(self.originalUrl, serializer);
    sse_encode_opt_box_autoadd_nsurl(self.url, serializer);
    sse_encode_opt_String(self.title, serializer);
    sse_encode_opt_String(self.summary, serializer);
    sse_encode_opt_box_autoadd_rich_link_image_attachment_substitute(
        self.image, serializer);
    sse_encode_opt_box_autoadd_rich_link_image_attachment_substitute(
        self.icon, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
        self.images, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
        self.icons, serializer);
  }

  @protected
  void sse_encode_message(Message self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Message_Message(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_normal_message(field0, serializer);
      case Message_RenameMessage(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_rename_message(field0, serializer);
      case Message_ChangeParticipants(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_change_participant_message(field0, serializer);
      case Message_React(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_box_autoadd_react_message(field0, serializer);
      case Message_Delivered():
        sse_encode_i_32(4, serializer);
      case Message_Read():
        sse_encode_i_32(5, serializer);
      case Message_Typing():
        sse_encode_i_32(6, serializer);
      case Message_Unsend(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_box_autoadd_unsend_message(field0, serializer);
      case Message_Edit(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_box_autoadd_edit_message(field0, serializer);
      case Message_IconChange(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_box_autoadd_icon_change_message(field0, serializer);
      case Message_StopTyping():
        sse_encode_i_32(10, serializer);
      case Message_EnableSmsActivation(field0: final field0):
        sse_encode_i_32(11, serializer);
        sse_encode_bool(field0, serializer);
      case Message_MessageReadOnDevice():
        sse_encode_i_32(12, serializer);
      case Message_SmsConfirmSent(field0: final field0):
        sse_encode_i_32(13, serializer);
        sse_encode_bool(field0, serializer);
      case Message_MarkUnread():
        sse_encode_i_32(14, serializer);
      case Message_PeerCacheInvalidate():
        sse_encode_i_32(15, serializer);
      case Message_UpdateExtension(field0: final field0):
        sse_encode_i_32(16, serializer);
        sse_encode_box_autoadd_update_extension_message(field0, serializer);
      case Message_Error(field0: final field0):
        sse_encode_i_32(17, serializer);
        sse_encode_box_autoadd_error_message(field0, serializer);
      case Message_MoveToRecycleBin(field0: final field0):
        sse_encode_i_32(18, serializer);
        sse_encode_box_autoadd_move_to_recycle_bin_message(field0, serializer);
      case Message_RecoverChat(field0: final field0):
        sse_encode_i_32(19, serializer);
        sse_encode_box_autoadd_operated_chat(field0, serializer);
      case Message_PermanentDelete(field0: final field0):
        sse_encode_i_32(20, serializer);
        sse_encode_box_autoadd_permanent_delete_message(field0, serializer);
      case Message_Unschedule():
        sse_encode_i_32(21, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_message_inst(MessageInst self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_opt_String(self.sender, serializer);
    sse_encode_opt_box_autoadd_conversation_data(self.conversation, serializer);
    sse_encode_message(self.message, serializer);
    sse_encode_CastedPrimitive_u_64(self.sentTimestamp, serializer);
    sse_encode_opt_list_message_target(self.target, serializer);
    sse_encode_bool(self.sendDelivered, serializer);
    sse_encode_bool(self.verificationFailed, serializer);
  }

  @protected
  void sse_encode_message_part(MessagePart self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MessagePart_Text(field0: final field0, field1: final field1):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_box_autoadd_text_format(field1, serializer);
      case MessagePart_Attachment(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_attachment(field0, serializer);
      case MessagePart_Mention(field0: final field0, field1: final field1):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_String(field1, serializer);
      case MessagePart_Object(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_message_parts(MessageParts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_indexed_message_part(self.field0, serializer);
  }

  @protected
  void sse_encode_message_target(MessageTarget self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MessageTarget_Token(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case MessageTarget_Uuid(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_message_type(MessageType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MessageType_IMessage():
        sse_encode_i_32(0, serializer);
      case MessageType_SMS(
          isPhone: final isPhone,
          usingNumber: final usingNumber,
          fromHandle: final fromHandle
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(isPhone, serializer);
        sse_encode_String(usingNumber, serializer);
        sse_encode_opt_String(fromHandle, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_mmcs_file(MMCSFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.signature, serializer);
    sse_encode_String(self.object, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_list_prim_u_8_strict(self.key, serializer);
    sse_encode_CastedPrimitive_usize(self.size, serializer);
  }

  @protected
  void sse_encode_mmcs_transfer_progress(
      MMCSTransferProgress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_usize(self.prog, serializer);
    sse_encode_CastedPrimitive_usize(self.total, serializer);
    sse_encode_opt_box_autoadd_mmcs_file(self.file, serializer);
  }

  @protected
  void sse_encode_move_to_recycle_bin_message(
      MoveToRecycleBinMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_delete_target(self.target, serializer);
    sse_encode_CastedPrimitive_u_64(self.recoverableDeleteDate, serializer);
  }

  @protected
  void sse_encode_my_async_runtime(
      MyAsyncRuntime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_normal_message(NormalMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message_parts(self.parts, serializer);
    sse_encode_opt_String(self.effect, serializer);
    sse_encode_opt_String(self.replyGuid, serializer);
    sse_encode_opt_String(self.replyPart, serializer);
    sse_encode_message_type(self.service, serializer);
    sse_encode_opt_String(self.subject, serializer);
    sse_encode_opt_box_autoadd_extension_app(self.app, serializer);
    sse_encode_opt_box_autoadd_link_meta(self.linkMeta, serializer);
    sse_encode_bool(self.voice, serializer);
    sse_encode_opt_box_autoadd_schedule_mode(self.scheduled, serializer);
  }

  @protected
  void sse_encode_ns_dictionary_class(
      NSDictionaryClass self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_nsurl(NSURL self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.base, serializer);
    sse_encode_String(self.relative, serializer);
  }

  @protected
  void sse_encode_operated_chat(OperatedChat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.participants, serializer);
    sse_encode_String(self.groupId, serializer);
    sse_encode_String(self.guid, serializer);
    sse_encode_opt_box_autoadd_bool(self.deleteIncomingMessages, serializer);
    sse_encode_opt_box_autoadd_bool(self.wasReportedAsJunk, serializer);
  }

  @protected
  void sse_encode_opt_CastedPrimitive_u_64(
      int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_CastedPrimitive_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_CastedPrimitive_usize(
      int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_CastedPrimitive_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          ConversationLink? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationLink(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          ConversationParticipant? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationParticipant(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          IdsUser? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          JoinedOsConfig? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          NsArrayLpIconMetadata? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPIconMetadata(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          NsArrayLpImageMetadata? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNSArrayLPImageMetadata(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_address(
      Address? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_address(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attachment(
      Attachment? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attachment(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_balloon(
      Balloon? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_balloon(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_conversation_data(
      ConversationData? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_conversation_data(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_extension_app(
      ExtensionApp? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_extension_app(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ft_mode(
      FTMode? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ft_mode(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_link_meta(
      LinkMeta? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_link_meta(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_location(
      Location? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_location(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_login_state(
      LoginState? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_login_state(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_lp_icon_metadata(
      LPIconMetadata? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_lp_icon_metadata(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_lp_image_metadata(
      LPImageMetadata? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_lp_image_metadata(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_mmcs_file(
      MMCSFile? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_mmcs_file(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_nsurl(NSURL? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_nsurl(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_part_extension(
      PartExtension? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_part_extension(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_push_message(
      PushMessage? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_push_message(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_record_string_u_64(
      (String, BigInt)? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_record_string_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_rich_link_image_attachment_substitute(
      RichLinkImageAttachmentSubstitute? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_rich_link_image_attachment_substitute(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_schedule_mode(
      ScheduleMode? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_schedule_mode(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_support_action(
      SupportAction? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_support_action(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_support_alert(
      SupportAlert? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_support_alert(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_message_target(
      List<MessageTarget>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_message_target(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_part_extension(PartExtension self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PartExtension_Sticker(
          msgWidth: final msgWidth,
          rotation: final rotation,
          sai: final sai,
          scale: final scale,
          update: final update,
          sli: final sli,
          normalizedX: final normalizedX,
          normalizedY: final normalizedY,
          version: final version,
          hash: final hash,
          safi: final safi,
          effectType: final effectType,
          stickerId: final stickerId
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_f_64(msgWidth, serializer);
        sse_encode_f_64(rotation, serializer);
        sse_encode_u_64(sai, serializer);
        sse_encode_f_64(scale, serializer);
        sse_encode_opt_box_autoadd_bool(update, serializer);
        sse_encode_u_64(sli, serializer);
        sse_encode_f_64(normalizedX, serializer);
        sse_encode_f_64(normalizedY, serializer);
        sse_encode_u_64(version, serializer);
        sse_encode_String(hash, serializer);
        sse_encode_u_64(safi, serializer);
        sse_encode_i_64(effectType, serializer);
        sse_encode_String(stickerId, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_permanent_delete_message(
      PermanentDeleteMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_delete_target(self.target, serializer);
    sse_encode_bool(self.isScheduled, serializer);
  }

  @protected
  void sse_encode_poll_result(PollResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PollResult_Stop():
        sse_encode_i_32(0, serializer);
      case PollResult_Cont(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_opt_box_autoadd_push_message(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_private_device_info(
      PrivateDeviceInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.uuid, serializer);
    sse_encode_opt_String(self.deviceName, serializer);
    sse_encode_list_prim_u_8_strict(self.token, serializer);
    sse_encode_bool(self.isHsaTrusted, serializer);
    sse_encode_list_String(self.identites, serializer);
    sse_encode_list_String(self.subServices, serializer);
  }

  @protected
  void sse_encode_push_message(PushMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PushMessage_IMessage(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_message_inst(field0, serializer);
      case PushMessage_SendConfirm(uuid: final uuid, error: final error):
        sse_encode_i_32(1, serializer);
        sse_encode_String(uuid, serializer);
        sse_encode_opt_String(error, serializer);
      case PushMessage_RegistrationState(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_register_state(field0, serializer);
      case PushMessage_NewPhotostream(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_box_autoadd_shared_album(field0, serializer);
      case PushMessage_FaceTime(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_box_autoadd_ft_message(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_react_message(ReactMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toUuid, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.toPart, serializer);
    sse_encode_react_message_type(self.reaction, serializer);
    sse_encode_String(self.toText, serializer);
  }

  @protected
  void sse_encode_react_message_type(
      ReactMessageType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ReactMessageType_React(
          reaction: final reaction,
          enable: final enable
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_reaction(reaction, serializer);
        sse_encode_bool(enable, serializer);
      case ReactMessageType_Extension(spec: final spec, body: final body):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_extension_app(spec, serializer);
        sse_encode_box_autoadd_message_parts(body, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_reaction(Reaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Reaction_Heart():
        sse_encode_i_32(0, serializer);
      case Reaction_Like():
        sse_encode_i_32(1, serializer);
      case Reaction_Dislike():
        sse_encode_i_32(2, serializer);
      case Reaction_Laugh():
        sse_encode_i_32(3, serializer);
      case Reaction_Emphasize():
        sse_encode_i_32(4, serializer);
      case Reaction_Question():
        sse_encode_i_32(5, serializer);
      case Reaction_Emoji(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_String(field0, serializer);
      case Reaction_Sticker(spec: final spec, body: final body):
        sse_encode_i_32(7, serializer);
        sse_encode_opt_box_autoadd_extension_app(spec, serializer);
        sse_encode_box_autoadd_message_parts(body, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_record_list_shared_album_list_string(
      (List<SharedAlbum>, List<String>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_shared_album(self.$1, serializer);
    sse_encode_list_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_list_trusted_phone_number_opt_box_autoadd_login_state(
      (List<TrustedPhoneNumber>, LoginState?) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_trusted_phone_number(self.$1, serializer);
    sse_encode_opt_box_autoadd_login_state(self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_login_state_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_ids_user(
          (LoginState, IdsUser?) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_login_state(self.$1, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
        self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_map_string_sync_status_opt_box_autoadd_record_string_u_64(
          (Map<String, SyncStatus>, (String, BigInt)?) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Map_String_sync_status(self.$1, serializer);
    sse_encode_opt_box_autoadd_record_string_u_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_bool(
      (String, bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_bool(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_casted_primitive_u_64(
      (String, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_CastedPrimitive_u_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_ft_participant(
      (String, FTParticipant) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_ft_participant(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_sync_status(
      (String, SyncStatus) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_sync_status(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_u_64(
      (String, BigInt) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_u_64(self.$2, serializer);
  }

  @protected
  void sse_encode_register_state(RegisterState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case RegisterState_Registered(nextS: final nextS):
        sse_encode_i_32(0, serializer);
        sse_encode_i_64(nextS, serializer);
      case RegisterState_Registering():
        sse_encode_i_32(1, serializer);
      case RegisterState_Failed(retryWait: final retryWait, error: final error):
        sse_encode_i_32(2, serializer);
        sse_encode_opt_box_autoadd_u_64(retryWait, serializer);
        sse_encode_String(error, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_registration_phase(
      RegistrationPhase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_rename_message(RenameMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.newName, serializer);
  }

  @protected
  void sse_encode_rich_link_image_attachment_substitute(
      RichLinkImageAttachmentSubstitute self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.mimeType, serializer);
    sse_encode_u_64(self.richLinkImageAttachmentSubstituteIndex, serializer);
  }

  @protected
  void sse_encode_schedule_mode(ScheduleMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_u_64(self.ms, serializer);
    sse_encode_bool(self.schedule, serializer);
  }

  @protected
  void sse_encode_shared_album(SharedAlbum self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_String(self.fullname, serializer);
    sse_encode_opt_String(self.email, serializer);
    sse_encode_String(self.albumguid, serializer);
    sse_encode_String(self.sharingtype, serializer);
    sse_encode_opt_String(self.subscriptiondate, serializer);
    sse_encode_opt_String(self.albumlocation, serializer);
    sse_encode_list_String(self.assets, serializer);
    sse_encode_opt_String(self.delete, serializer);
  }

  @protected
  void sse_encode_support_action(SupportAction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.button, serializer);
  }

  @protected
  void sse_encode_support_alert(SupportAlert self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.body, serializer);
    sse_encode_opt_box_autoadd_support_action(self.action, serializer);
  }

  @protected
  void sse_encode_sync_status(SyncStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SyncStatus_Synced():
        sse_encode_i_32(0, serializer);
      case SyncStatus_Downloading(progress: final progress, total: final total):
        sse_encode_i_32(1, serializer);
        sse_encode_usize(progress, serializer);
        sse_encode_usize(total, serializer);
      case SyncStatus_Uploading(progress: final progress, total: final total):
        sse_encode_i_32(2, serializer);
        sse_encode_usize(progress, serializer);
        sse_encode_usize(total, serializer);
      case SyncStatus_Syncing():
        sse_encode_i_32(3, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_text_effect(TextEffect self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_text_flags(TextFlags self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.bold, serializer);
    sse_encode_bool(self.italic, serializer);
    sse_encode_bool(self.underline, serializer);
    sse_encode_bool(self.strikethrough, serializer);
  }

  @protected
  void sse_encode_text_format(TextFormat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TextFormat_Flags(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_text_flags(field0, serializer);
      case TextFormat_Effect(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_text_effect(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_transfer_progress(
      TransferProgress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_usize(self.prog, serializer);
    sse_encode_CastedPrimitive_usize(self.total, serializer);
    sse_encode_opt_box_autoadd_attachment(self.attachment, serializer);
  }

  @protected
  void sse_encode_trusted_phone_number(
      TrustedPhoneNumber self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.numberWithDialCode, serializer);
    sse_encode_String(self.lastTwoDigits, serializer);
    sse_encode_String(self.pushMode, serializer);
    sse_encode_u_32(self.id, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_unsend_message(UnsendMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.tuuid, serializer);
    sse_encode_CastedPrimitive_u_64(self.editPart, serializer);
  }

  @protected
  void sse_encode_update_extension_message(
      UpdateExtensionMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.forUuid, serializer);
    sse_encode_part_extension(self.ext, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ArcPushStateImpl extends RustOpaque implements ArcPushState {
  // Not to be used by end users
  ArcPushStateImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcPushStateImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArcPushState,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcPushState,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcPushStatePtr,
  );
}

@sealed
class ConversationLinkImpl extends RustOpaque implements ConversationLink {
  // Not to be used by end users
  ConversationLinkImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConversationLinkImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ConversationLink,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConversationLink,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ConversationLinkPtr,
  );
}

@sealed
class ConversationParticipantImpl extends RustOpaque
    implements ConversationParticipant {
  // Not to be used by end users
  ConversationParticipantImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConversationParticipantImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ConversationParticipant,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ConversationParticipant,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ConversationParticipantPtr,
  );
}

@sealed
class FindMyFriendsClientDefaultAnisetteProviderImpl extends RustOpaque
    implements FindMyFriendsClientDefaultAnisetteProvider {
  // Not to be used by end users
  FindMyFriendsClientDefaultAnisetteProviderImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FindMyFriendsClientDefaultAnisetteProviderImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_FindMyFriendsClientDefaultAnisetteProvider,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_FindMyFriendsClientDefaultAnisetteProvider,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_FindMyFriendsClientDefaultAnisetteProviderPtr,
  );
}

@sealed
class FindMyPhoneClientDefaultAnisetteProviderImpl extends RustOpaque
    implements FindMyPhoneClientDefaultAnisetteProvider {
  // Not to be used by end users
  FindMyPhoneClientDefaultAnisetteProviderImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FindMyPhoneClientDefaultAnisetteProviderImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_FindMyPhoneClientDefaultAnisetteProvider,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_FindMyPhoneClientDefaultAnisetteProvider,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_FindMyPhoneClientDefaultAnisetteProviderPtr,
  );
}

@sealed
class IdsUserImpl extends RustOpaque implements IdsUser {
  // Not to be used by end users
  IdsUserImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IdsUserImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_IdsUser,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_IdsUser,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_IdsUserPtr,
  );
}

@sealed
class JoinedOsConfigImpl extends RustOpaque implements JoinedOsConfig {
  // Not to be used by end users
  JoinedOsConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JoinedOsConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_JoinedOsConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_JoinedOsConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_JoinedOsConfigPtr,
  );
}

@sealed
class NsArrayLpIconMetadataImpl extends RustOpaque
    implements NsArrayLpIconMetadata {
  // Not to be used by end users
  NsArrayLpIconMetadataImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NsArrayLpIconMetadataImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_NsArrayLpIconMetadata,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_NsArrayLpIconMetadata,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_NsArrayLpIconMetadataPtr,
  );
}

@sealed
class NsArrayLpImageMetadataImpl extends RustOpaque
    implements NsArrayLpImageMetadata {
  // Not to be used by end users
  NsArrayLpImageMetadataImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NsArrayLpImageMetadataImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_NsArrayLpImageMetadata,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_NsArrayLpImageMetadata,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_NsArrayLpImageMetadataPtr,
  );
}

@sealed
class VerifyBodyImpl extends RustOpaque implements VerifyBody {
  // Not to be used by end users
  VerifyBodyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VerifyBodyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VerifyBody,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VerifyBody,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_VerifyBodyPtr,
  );
}
